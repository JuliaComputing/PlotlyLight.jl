# This file is automatically generated.  Do not edit this file directly.
# Last update: 2024-02-01T16:47:23.477 ET

module Traces

using ..PlotlyLight: Plot

#-----------------------------------------------------------------------------# area
export area
"""
    area(; kw...) --> Plot(type=:area, kw...)

Create a Plotly trace of type `area` with the given `kw` attributes.  Attributes will be
validated against the Plotly schema.  Available attributes for `area` are:

- `customdata`: Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, *scatter* traces also appends customdata items in the markers DOM elements
- `customdatasrc`: Sets the source reference on Chart Studio Cloud for  customdata .
- `hoverinfo`: Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.
- `hoverinfosrc`: Sets the source reference on Chart Studio Cloud for  hoverinfo .
- `hoverlabel`: 
- `ids`: Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.
- `idssrc`: Sets the source reference on Chart Studio Cloud for  ids .
- `legendgroup`: Sets the legend group for this trace. Traces part of the same legend group hide/show at the same time when toggling legend items.
- `marker`: 
- `meta`: Assigns extra meta information associated with this trace that can be used in various text attributes. Attributes such as trace `name`, graph, axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues` and `sliders` `label` text all support `meta`. To access the trace `meta` values in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the index or key of the `meta` item in question. To access trace `meta` in layout attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta` and `n` is the trace index.
- `metasrc`: Sets the source reference on Chart Studio Cloud for  meta .
- `name`: Sets the trace name. The trace name appear as the legend item and on hover.
- `opacity`: Sets the opacity of the trace.
- `r`: Area traces are deprecated! Please switch to the *barpolar* trace type. Sets the radial coordinates for legacy polar chart only.
- `rsrc`: Sets the source reference on Chart Studio Cloud for  r .
- `showlegend`: Determines whether or not an item corresponding to this trace is shown in the legend.
- `stream`: 
- `t`: Area traces are deprecated! Please switch to the *barpolar* trace type. Sets the angular coordinates for legacy polar chart only.
- `transforms`: 
- `tsrc`: Sets the source reference on Chart Studio Cloud for  t .
- `type`: area
- `uid`: Assign an id to this trace, Use this to provide object constancy between traces during animations and transitions.
- `uirevision`: Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves.
- `visible`: Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).

"""
function area(; kw...)
    for k in keys(kw)
        k in (:customdata, :customdatasrc, :hoverinfo, :hoverinfosrc, :hoverlabel, :ids, :idssrc, :legendgroup, :marker, :meta, :metasrc, :name, :opacity, :r, :rsrc, :showlegend, :stream, :t, :transforms, :tsrc, :type, :uid, :uirevision, :visible) || @warn "Function `area` does not have attribute `$k`"
    end
    Plot(; type=:area, kw...)
end

#-----------------------------------------------------------------------------# bar
export bar
"""
    bar(; kw...) --> Plot(type=:bar, kw...)

Create a Plotly trace of type `bar` with the given `kw` attributes.  Attributes will be
validated against the Plotly schema.  Available attributes for `bar` are:

- `_deprecated`: 
- `alignmentgroup`: Set several traces linked to the same position axis or matching axes to the same alignmentgroup. This controls whether bars compute their positional range dependently or independently.
- `base`: Sets where the bar base is drawn (in position axis units). In *stack* or *relative* barmode, traces that set *base* will be excluded and drawn in *overlay* mode instead.
- `basesrc`: Sets the source reference on Chart Studio Cloud for  base .
- `cliponaxis`: Determines whether the text nodes are clipped about the subplot axes. To show the text nodes above axis lines and tick labels, make sure to set `xaxis.layer` and `yaxis.layer` to *below traces*.
- `constraintext`: Constrain the size of text inside or outside a bar to be no larger than the bar itself.
- `customdata`: Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, *scatter* traces also appends customdata items in the markers DOM elements
- `customdatasrc`: Sets the source reference on Chart Studio Cloud for  customdata .
- `dx`: Sets the x coordinate step. See `x0` for more info.
- `dy`: Sets the y coordinate step. See `y0` for more info.
- `error_x`: 
- `error_y`: 
- `hoverinfo`: Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.
- `hoverinfosrc`: Sets the source reference on Chart Studio Cloud for  hoverinfo .
- `hoverlabel`: 
- `hovertemplate`: Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example "y: %{y}". Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example "Price: %{y:$.2f}". https://github.com/d3/d3-3.x-api-reference/blob/master/Formatting.md#d3_format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example "Day: %{2019-01-01|%A}". https://github.com/d3/d3-time-format#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. variables `value` and `label`. Anything contained in tag `<extra>` is displayed in the secondary box, for example "<extra>{fullData.name}</extra>". To hide the secondary box completely, use an empty tag `<extra></extra>`.
- `hovertemplatesrc`: Sets the source reference on Chart Studio Cloud for  hovertemplate .
- `hovertext`: Sets hover text elements associated with each (x,y) pair. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates. To be seen, trace `hoverinfo` must contain a *text* flag.
- `hovertextsrc`: Sets the source reference on Chart Studio Cloud for  hovertext .
- `ids`: Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.
- `idssrc`: Sets the source reference on Chart Studio Cloud for  ids .
- `insidetextanchor`: Determines if texts are kept at center or start/end points in `textposition` *inside* mode.
- `insidetextfont`: Sets the font used for `text` lying inside the bar.
- `legendgroup`: Sets the legend group for this trace. Traces part of the same legend group hide/show at the same time when toggling legend items.
- `marker`: 
- `meta`: Assigns extra meta information associated with this trace that can be used in various text attributes. Attributes such as trace `name`, graph, axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues` and `sliders` `label` text all support `meta`. To access the trace `meta` values in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the index or key of the `meta` item in question. To access trace `meta` in layout attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta` and `n` is the trace index.
- `metasrc`: Sets the source reference on Chart Studio Cloud for  meta .
- `name`: Sets the trace name. The trace name appear as the legend item and on hover.
- `offset`: Shifts the position where the bar is drawn (in position axis units). In *group* barmode, traces that set *offset* will be excluded and drawn in *overlay* mode instead.
- `offsetgroup`: Set several traces linked to the same position axis or matching axes to the same offsetgroup where bars of the same position coordinate will line up.
- `offsetsrc`: Sets the source reference on Chart Studio Cloud for  offset .
- `opacity`: Sets the opacity of the trace.
- `orientation`: Sets the orientation of the bars. With *v* (*h*), the value of the each bar spans along the vertical (horizontal).
- `outsidetextfont`: Sets the font used for `text` lying outside the bar.
- `r`: r coordinates in scatter traces are deprecated!Please switch to the *scatterpolar* trace type.Sets the radial coordinatesfor legacy polar chart only.
- `rsrc`: Sets the source reference on Chart Studio Cloud for  r .
- `selected`: 
- `selectedpoints`: Array containing integer indices of selected points. Has an effect only for traces that support selections. Note that an empty array means an empty selection where the `unselected` are turned on for all points, whereas, any other non-array values means no selection all where the `selected` and `unselected` styles have no effect.
- `showlegend`: Determines whether or not an item corresponding to this trace is shown in the legend.
- `stream`: 
- `t`: t coordinates in scatter traces are deprecated!Please switch to the *scatterpolar* trace type.Sets the angular coordinatesfor legacy polar chart only.
- `text`: Sets text elements associated with each (x,y) pair. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates. If trace `hoverinfo` contains a *text* flag and *hovertext* is not set, these elements will be seen in the hover labels.
- `textangle`: Sets the angle of the tick labels with respect to the bar. For example, a `tickangle` of -90 draws the tick labels vertically. With *auto* the texts may automatically be rotated to fit with the maximum size in bars.
- `textfont`: Sets the font used for `text`.
- `textposition`: Specifies the location of the `text`. *inside* positions `text` inside, next to the bar end (rotated and scaled if needed). *outside* positions `text` outside, next to the bar end (scaled if needed), unless there is another bar stacked on this one, then the text gets pushed inside. *auto* tries to position `text` inside the bar, but if the bar is too small and no bar is stacked on this one the text is moved outside.
- `textpositionsrc`: Sets the source reference on Chart Studio Cloud for  textposition .
- `textsrc`: Sets the source reference on Chart Studio Cloud for  text .
- `texttemplate`: Template string used for rendering the information text that appear on points. Note that this will override `textinfo`. Variables are inserted using %{variable}, for example "y: %{y}". Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example "Price: %{y:$.2f}". https://github.com/d3/d3-3.x-api-reference/blob/master/Formatting.md#d3_format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example "Day: %{2019-01-01|%A}". https://github.com/d3/d3-time-format#locale_format for details on the date formatting syntax. Every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. variables `value` and `label`.
- `texttemplatesrc`: Sets the source reference on Chart Studio Cloud for  texttemplate .
- `transforms`: 
- `tsrc`: Sets the source reference on Chart Studio Cloud for  t .
- `type`: bar
- `uid`: Assign an id to this trace, Use this to provide object constancy between traces during animations and transitions.
- `uirevision`: Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves.
- `unselected`: 
- `visible`: Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).
- `width`: Sets the bar width (in position axis units).
- `widthsrc`: Sets the source reference on Chart Studio Cloud for  width .
- `x`: Sets the x coordinates.
- `x0`: Alternate to `x`. Builds a linear space of x coordinates. Use with `dx` where `x0` is the starting coordinate and `dx` the step.
- `xaxis`: Sets a reference between this trace's x coordinates and a 2D cartesian x axis. If *x* (the default value), the x coordinates refer to `layout.xaxis`. If *x2*, the x coordinates refer to `layout.xaxis2`, and so on.
- `xcalendar`: Sets the calendar system to use with `x` date data.
- `xperiod`: Only relevant when the axis `type` is *date*. Sets the period positioning in milliseconds or *M<n>* on the x axis. Special values in the form of *M<n>* could be used to declare the number of months. In this case `n` must be a positive integer.
- `xperiod0`: Only relevant when the axis `type` is *date*. Sets the base for period positioning in milliseconds or date string on the x0 axis. When `x0period` is round number of weeks, the `x0period0` by default would be on a Sunday i.e. 2000-01-02, otherwise it would be at 2000-01-01.
- `xperiodalignment`: Only relevant when the axis `type` is *date*. Sets the alignment of data points on the x axis.
- `xsrc`: Sets the source reference on Chart Studio Cloud for  x .
- `y`: Sets the y coordinates.
- `y0`: Alternate to `y`. Builds a linear space of y coordinates. Use with `dy` where `y0` is the starting coordinate and `dy` the step.
- `yaxis`: Sets a reference between this trace's y coordinates and a 2D cartesian y axis. If *y* (the default value), the y coordinates refer to `layout.yaxis`. If *y2*, the y coordinates refer to `layout.yaxis2`, and so on.
- `ycalendar`: Sets the calendar system to use with `y` date data.
- `yperiod`: Only relevant when the axis `type` is *date*. Sets the period positioning in milliseconds or *M<n>* on the y axis. Special values in the form of *M<n>* could be used to declare the number of months. In this case `n` must be a positive integer.
- `yperiod0`: Only relevant when the axis `type` is *date*. Sets the base for period positioning in milliseconds or date string on the y0 axis. When `y0period` is round number of weeks, the `y0period0` by default would be on a Sunday i.e. 2000-01-02, otherwise it would be at 2000-01-01.
- `yperiodalignment`: Only relevant when the axis `type` is *date*. Sets the alignment of data points on the y axis.
- `ysrc`: Sets the source reference on Chart Studio Cloud for  y .

"""
function bar(; kw...)
    for k in keys(kw)
        k in (:_deprecated, :alignmentgroup, :base, :basesrc, :cliponaxis, :constraintext, :customdata, :customdatasrc, :dx, :dy, :error_x, :error_y, :hoverinfo, :hoverinfosrc, :hoverlabel, :hovertemplate, :hovertemplatesrc, :hovertext, :hovertextsrc, :ids, :idssrc, :insidetextanchor, :insidetextfont, :legendgroup, :marker, :meta, :metasrc, :name, :offset, :offsetgroup, :offsetsrc, :opacity, :orientation, :outsidetextfont, :r, :rsrc, :selected, :selectedpoints, :showlegend, :stream, :t, :text, :textangle, :textfont, :textposition, :textpositionsrc, :textsrc, :texttemplate, :texttemplatesrc, :transforms, :tsrc, :type, :uid, :uirevision, :unselected, :visible, :width, :widthsrc, :x, :x0, :xaxis, :xcalendar, :xperiod, :xperiod0, :xperiodalignment, :xsrc, :y, :y0, :yaxis, :ycalendar, :yperiod, :yperiod0, :yperiodalignment, :ysrc) || @warn "Function `bar` does not have attribute `$k`"
    end
    Plot(; type=:bar, kw...)
end

#-----------------------------------------------------------------------------# barpolar
export barpolar
"""
    barpolar(; kw...) --> Plot(type=:barpolar, kw...)

Create a Plotly trace of type `barpolar` with the given `kw` attributes.  Attributes will be
validated against the Plotly schema.  Available attributes for `barpolar` are:

- `base`: Sets where the bar base is drawn (in radial axis units). In *stack* barmode, traces that set *base* will be excluded and drawn in *overlay* mode instead.
- `basesrc`: Sets the source reference on Chart Studio Cloud for  base .
- `customdata`: Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, *scatter* traces also appends customdata items in the markers DOM elements
- `customdatasrc`: Sets the source reference on Chart Studio Cloud for  customdata .
- `dr`: Sets the r coordinate step.
- `dtheta`: Sets the theta coordinate step. By default, the `dtheta` step equals the subplot's period divided by the length of the `r` coordinates.
- `hoverinfo`: Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.
- `hoverinfosrc`: Sets the source reference on Chart Studio Cloud for  hoverinfo .
- `hoverlabel`: 
- `hovertemplate`: Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example "y: %{y}". Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example "Price: %{y:$.2f}". https://github.com/d3/d3-3.x-api-reference/blob/master/Formatting.md#d3_format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example "Day: %{2019-01-01|%A}". https://github.com/d3/d3-time-format#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available.  Anything contained in tag `<extra>` is displayed in the secondary box, for example "<extra>{fullData.name}</extra>". To hide the secondary box completely, use an empty tag `<extra></extra>`.
- `hovertemplatesrc`: Sets the source reference on Chart Studio Cloud for  hovertemplate .
- `hovertext`: Same as `text`.
- `hovertextsrc`: Sets the source reference on Chart Studio Cloud for  hovertext .
- `ids`: Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.
- `idssrc`: Sets the source reference on Chart Studio Cloud for  ids .
- `legendgroup`: Sets the legend group for this trace. Traces part of the same legend group hide/show at the same time when toggling legend items.
- `marker`: 
- `meta`: Assigns extra meta information associated with this trace that can be used in various text attributes. Attributes such as trace `name`, graph, axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues` and `sliders` `label` text all support `meta`. To access the trace `meta` values in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the index or key of the `meta` item in question. To access trace `meta` in layout attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta` and `n` is the trace index.
- `metasrc`: Sets the source reference on Chart Studio Cloud for  meta .
- `name`: Sets the trace name. The trace name appear as the legend item and on hover.
- `offset`: Shifts the angular position where the bar is drawn (in *thetatunit* units).
- `offsetsrc`: Sets the source reference on Chart Studio Cloud for  offset .
- `opacity`: Sets the opacity of the trace.
- `r`: Sets the radial coordinates
- `r0`: Alternate to `r`. Builds a linear space of r coordinates. Use with `dr` where `r0` is the starting coordinate and `dr` the step.
- `rsrc`: Sets the source reference on Chart Studio Cloud for  r .
- `selected`: 
- `selectedpoints`: Array containing integer indices of selected points. Has an effect only for traces that support selections. Note that an empty array means an empty selection where the `unselected` are turned on for all points, whereas, any other non-array values means no selection all where the `selected` and `unselected` styles have no effect.
- `showlegend`: Determines whether or not an item corresponding to this trace is shown in the legend.
- `stream`: 
- `subplot`: Sets a reference between this trace's data coordinates and a polar subplot. If *polar* (the default value), the data refer to `layout.polar`. If *polar2*, the data refer to `layout.polar2`, and so on.
- `text`: Sets hover text elements associated with each bar. If a single string, the same string appears over all bars. If an array of string, the items are mapped in order to the this trace's coordinates.
- `textsrc`: Sets the source reference on Chart Studio Cloud for  text .
- `theta`: Sets the angular coordinates
- `theta0`: Alternate to `theta`. Builds a linear space of theta coordinates. Use with `dtheta` where `theta0` is the starting coordinate and `dtheta` the step.
- `thetasrc`: Sets the source reference on Chart Studio Cloud for  theta .
- `thetaunit`: Sets the unit of input *theta* values. Has an effect only when on *linear* angular axes.
- `transforms`: 
- `type`: barpolar
- `uid`: Assign an id to this trace, Use this to provide object constancy between traces during animations and transitions.
- `uirevision`: Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves.
- `unselected`: 
- `visible`: Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).
- `width`: Sets the bar angular width (in *thetaunit* units).
- `widthsrc`: Sets the source reference on Chart Studio Cloud for  width .

"""
function barpolar(; kw...)
    for k in keys(kw)
        k in (:base, :basesrc, :customdata, :customdatasrc, :dr, :dtheta, :hoverinfo, :hoverinfosrc, :hoverlabel, :hovertemplate, :hovertemplatesrc, :hovertext, :hovertextsrc, :ids, :idssrc, :legendgroup, :marker, :meta, :metasrc, :name, :offset, :offsetsrc, :opacity, :r, :r0, :rsrc, :selected, :selectedpoints, :showlegend, :stream, :subplot, :text, :textsrc, :theta, :theta0, :thetasrc, :thetaunit, :transforms, :type, :uid, :uirevision, :unselected, :visible, :width, :widthsrc) || @warn "Function `barpolar` does not have attribute `$k`"
    end
    Plot(; type=:barpolar, kw...)
end

#-----------------------------------------------------------------------------# box
export box
"""
    box(; kw...) --> Plot(type=:box, kw...)

Create a Plotly trace of type `box` with the given `kw` attributes.  Attributes will be
validated against the Plotly schema.  Available attributes for `box` are:

- `alignmentgroup`: Set several traces linked to the same position axis or matching axes to the same alignmentgroup. This controls whether bars compute their positional range dependently or independently.
- `boxmean`: If *true*, the mean of the box(es)' underlying distribution is drawn as a dashed line inside the box(es). If *sd* the standard deviation is also drawn. Defaults to *true* when `mean` is set. Defaults to *sd* when `sd` is set Otherwise defaults to *false*.
- `boxpoints`: If *outliers*, only the sample points lying outside the whiskers are shown If *suspectedoutliers*, the outlier points are shown and points either less than 4*Q1-3*Q3 or greater than 4*Q3-3*Q1 are highlighted (see `outliercolor`) If *all*, all sample points are shown If *false*, only the box(es) are shown with no sample points Defaults to *suspectedoutliers* when `marker.outliercolor` or `marker.line.outliercolor` is set. Defaults to *all* under the q1/median/q3 signature. Otherwise defaults to *outliers*.
- `customdata`: Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, *scatter* traces also appends customdata items in the markers DOM elements
- `customdatasrc`: Sets the source reference on Chart Studio Cloud for  customdata .
- `dx`: Sets the x coordinate step for multi-box traces set using q1/median/q3.
- `dy`: Sets the y coordinate step for multi-box traces set using q1/median/q3.
- `fillcolor`: Sets the fill color. Defaults to a half-transparent variant of the line color, marker color, or marker line color, whichever is available.
- `hoverinfo`: Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.
- `hoverinfosrc`: Sets the source reference on Chart Studio Cloud for  hoverinfo .
- `hoverlabel`: 
- `hoveron`: Do the hover effects highlight individual boxes  or sample points or both?
- `hovertemplate`: Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example "y: %{y}". Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example "Price: %{y:$.2f}". https://github.com/d3/d3-3.x-api-reference/blob/master/Formatting.md#d3_format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example "Day: %{2019-01-01|%A}". https://github.com/d3/d3-time-format#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available.  Anything contained in tag `<extra>` is displayed in the secondary box, for example "<extra>{fullData.name}</extra>". To hide the secondary box completely, use an empty tag `<extra></extra>`.
- `hovertemplatesrc`: Sets the source reference on Chart Studio Cloud for  hovertemplate .
- `hovertext`: Same as `text`.
- `hovertextsrc`: Sets the source reference on Chart Studio Cloud for  hovertext .
- `ids`: Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.
- `idssrc`: Sets the source reference on Chart Studio Cloud for  ids .
- `jitter`: Sets the amount of jitter in the sample points drawn. If *0*, the sample points align along the distribution axis. If *1*, the sample points are drawn in a random jitter of width equal to the width of the box(es).
- `legendgroup`: Sets the legend group for this trace. Traces part of the same legend group hide/show at the same time when toggling legend items.
- `line`: 
- `lowerfence`: Sets the lower fence values. There should be as many items as the number of boxes desired. This attribute has effect only under the q1/median/q3 signature. If `lowerfence` is not provided but a sample (in `y` or `x`) is set, we compute the lower as the last sample point below 1.5 times the IQR.
- `lowerfencesrc`: Sets the source reference on Chart Studio Cloud for  lowerfence .
- `marker`: 
- `mean`: Sets the mean values. There should be as many items as the number of boxes desired. This attribute has effect only under the q1/median/q3 signature. If `mean` is not provided but a sample (in `y` or `x`) is set, we compute the mean for each box using the sample values.
- `meansrc`: Sets the source reference on Chart Studio Cloud for  mean .
- `median`: Sets the median values. There should be as many items as the number of boxes desired.
- `mediansrc`: Sets the source reference on Chart Studio Cloud for  median .
- `meta`: Assigns extra meta information associated with this trace that can be used in various text attributes. Attributes such as trace `name`, graph, axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues` and `sliders` `label` text all support `meta`. To access the trace `meta` values in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the index or key of the `meta` item in question. To access trace `meta` in layout attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta` and `n` is the trace index.
- `metasrc`: Sets the source reference on Chart Studio Cloud for  meta .
- `name`: Sets the trace name. The trace name appear as the legend item and on hover. For box traces, the name will also be used for the position coordinate, if `x` and `x0` (`y` and `y0` if horizontal) are missing and the position axis is categorical
- `notched`: Determines whether or not notches are drawn. Notches displays a confidence interval around the median. We compute the confidence interval as median +/- 1.57 * IQR / sqrt(N), where IQR is the interquartile range and N is the sample size. If two boxes' notches do not overlap there is 95% confidence their medians differ. See https://sites.google.com/site/davidsstatistics/home/notched-box-plots for more info. Defaults to *false* unless `notchwidth` or `notchspan` is set.
- `notchspan`: Sets the notch span from the boxes' `median` values. There should be as many items as the number of boxes desired. This attribute has effect only under the q1/median/q3 signature. If `notchspan` is not provided but a sample (in `y` or `x`) is set, we compute it as 1.57 * IQR / sqrt(N), where N is the sample size.
- `notchspansrc`: Sets the source reference on Chart Studio Cloud for  notchspan .
- `notchwidth`: Sets the width of the notches relative to the box' width. For example, with 0, the notches are as wide as the box(es).
- `offsetgroup`: Set several traces linked to the same position axis or matching axes to the same offsetgroup where bars of the same position coordinate will line up.
- `opacity`: Sets the opacity of the trace.
- `orientation`: Sets the orientation of the box(es). If *v* (*h*), the distribution is visualized along the vertical (horizontal).
- `pointpos`: Sets the position of the sample points in relation to the box(es). If *0*, the sample points are places over the center of the box(es). Positive (negative) values correspond to positions to the right (left) for vertical boxes and above (below) for horizontal boxes
- `q1`: Sets the Quartile 1 values. There should be as many items as the number of boxes desired.
- `q1src`: Sets the source reference on Chart Studio Cloud for  q1 .
- `q3`: Sets the Quartile 3 values. There should be as many items as the number of boxes desired.
- `q3src`: Sets the source reference on Chart Studio Cloud for  q3 .
- `quartilemethod`: Sets the method used to compute the sample's Q1 and Q3 quartiles. The *linear* method uses the 25th percentile for Q1 and 75th percentile for Q3 as computed using method #10 (listed on http://www.amstat.org/publications/jse/v14n3/langford.html). The *exclusive* method uses the median to divide the ordered dataset into two halves if the sample is odd, it does not include the median in either half - Q1 is then the median of the lower half and Q3 the median of the upper half. The *inclusive* method also uses the median to divide the ordered dataset into two halves but if the sample is odd, it includes the median in both halves - Q1 is then the median of the lower half and Q3 the median of the upper half.
- `sd`: Sets the standard deviation values. There should be as many items as the number of boxes desired. This attribute has effect only under the q1/median/q3 signature. If `sd` is not provided but a sample (in `y` or `x`) is set, we compute the standard deviation for each box using the sample values.
- `sdsrc`: Sets the source reference on Chart Studio Cloud for  sd .
- `selected`: 
- `selectedpoints`: Array containing integer indices of selected points. Has an effect only for traces that support selections. Note that an empty array means an empty selection where the `unselected` are turned on for all points, whereas, any other non-array values means no selection all where the `selected` and `unselected` styles have no effect.
- `showlegend`: Determines whether or not an item corresponding to this trace is shown in the legend.
- `stream`: 
- `text`: Sets the text elements associated with each sample value. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates. To be seen, trace `hoverinfo` must contain a *text* flag.
- `textsrc`: Sets the source reference on Chart Studio Cloud for  text .
- `transforms`: 
- `type`: box
- `uid`: Assign an id to this trace, Use this to provide object constancy between traces during animations and transitions.
- `uirevision`: Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves.
- `unselected`: 
- `upperfence`: Sets the upper fence values. There should be as many items as the number of boxes desired. This attribute has effect only under the q1/median/q3 signature. If `upperfence` is not provided but a sample (in `y` or `x`) is set, we compute the lower as the last sample point above 1.5 times the IQR.
- `upperfencesrc`: Sets the source reference on Chart Studio Cloud for  upperfence .
- `visible`: Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).
- `whiskerwidth`: Sets the width of the whiskers relative to the box' width. For example, with 1, the whiskers are as wide as the box(es).
- `width`: Sets the width of the box in data coordinate If *0* (default value) the width is automatically selected based on the positions of other box traces in the same subplot.
- `x`: Sets the x sample data or coordinates. See overview for more info.
- `x0`: Sets the x coordinate for single-box traces or the starting coordinate for multi-box traces set using q1/median/q3. See overview for more info.
- `xaxis`: Sets a reference between this trace's x coordinates and a 2D cartesian x axis. If *x* (the default value), the x coordinates refer to `layout.xaxis`. If *x2*, the x coordinates refer to `layout.xaxis2`, and so on.
- `xcalendar`: Sets the calendar system to use with `x` date data.
- `xperiod`: Only relevant when the axis `type` is *date*. Sets the period positioning in milliseconds or *M<n>* on the x axis. Special values in the form of *M<n>* could be used to declare the number of months. In this case `n` must be a positive integer.
- `xperiod0`: Only relevant when the axis `type` is *date*. Sets the base for period positioning in milliseconds or date string on the x0 axis. When `x0period` is round number of weeks, the `x0period0` by default would be on a Sunday i.e. 2000-01-02, otherwise it would be at 2000-01-01.
- `xperiodalignment`: Only relevant when the axis `type` is *date*. Sets the alignment of data points on the x axis.
- `xsrc`: Sets the source reference on Chart Studio Cloud for  x .
- `y`: Sets the y sample data or coordinates. See overview for more info.
- `y0`: Sets the y coordinate for single-box traces or the starting coordinate for multi-box traces set using q1/median/q3. See overview for more info.
- `yaxis`: Sets a reference between this trace's y coordinates and a 2D cartesian y axis. If *y* (the default value), the y coordinates refer to `layout.yaxis`. If *y2*, the y coordinates refer to `layout.yaxis2`, and so on.
- `ycalendar`: Sets the calendar system to use with `y` date data.
- `yperiod`: Only relevant when the axis `type` is *date*. Sets the period positioning in milliseconds or *M<n>* on the y axis. Special values in the form of *M<n>* could be used to declare the number of months. In this case `n` must be a positive integer.
- `yperiod0`: Only relevant when the axis `type` is *date*. Sets the base for period positioning in milliseconds or date string on the y0 axis. When `y0period` is round number of weeks, the `y0period0` by default would be on a Sunday i.e. 2000-01-02, otherwise it would be at 2000-01-01.
- `yperiodalignment`: Only relevant when the axis `type` is *date*. Sets the alignment of data points on the y axis.
- `ysrc`: Sets the source reference on Chart Studio Cloud for  y .

"""
function box(; kw...)
    for k in keys(kw)
        k in (:alignmentgroup, :boxmean, :boxpoints, :customdata, :customdatasrc, :dx, :dy, :fillcolor, :hoverinfo, :hoverinfosrc, :hoverlabel, :hoveron, :hovertemplate, :hovertemplatesrc, :hovertext, :hovertextsrc, :ids, :idssrc, :jitter, :legendgroup, :line, :lowerfence, :lowerfencesrc, :marker, :mean, :meansrc, :median, :mediansrc, :meta, :metasrc, :name, :notched, :notchspan, :notchspansrc, :notchwidth, :offsetgroup, :opacity, :orientation, :pointpos, :q1, :q1src, :q3, :q3src, :quartilemethod, :sd, :sdsrc, :selected, :selectedpoints, :showlegend, :stream, :text, :textsrc, :transforms, :type, :uid, :uirevision, :unselected, :upperfence, :upperfencesrc, :visible, :whiskerwidth, :width, :x, :x0, :xaxis, :xcalendar, :xperiod, :xperiod0, :xperiodalignment, :xsrc, :y, :y0, :yaxis, :ycalendar, :yperiod, :yperiod0, :yperiodalignment, :ysrc) || @warn "Function `box` does not have attribute `$k`"
    end
    Plot(; type=:box, kw...)
end

#-----------------------------------------------------------------------------# candlestick
export candlestick
"""
    candlestick(; kw...) --> Plot(type=:candlestick, kw...)

Create a Plotly trace of type `candlestick` with the given `kw` attributes.  Attributes will be
validated against the Plotly schema.  Available attributes for `candlestick` are:

- `close`: Sets the close values.
- `closesrc`: Sets the source reference on Chart Studio Cloud for  close .
- `customdata`: Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, *scatter* traces also appends customdata items in the markers DOM elements
- `customdatasrc`: Sets the source reference on Chart Studio Cloud for  customdata .
- `decreasing`: 
- `high`: Sets the high values.
- `highsrc`: Sets the source reference on Chart Studio Cloud for  high .
- `hoverinfo`: Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.
- `hoverinfosrc`: Sets the source reference on Chart Studio Cloud for  hoverinfo .
- `hoverlabel`: 
- `hovertext`: Same as `text`.
- `hovertextsrc`: Sets the source reference on Chart Studio Cloud for  hovertext .
- `ids`: Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.
- `idssrc`: Sets the source reference on Chart Studio Cloud for  ids .
- `increasing`: 
- `legendgroup`: Sets the legend group for this trace. Traces part of the same legend group hide/show at the same time when toggling legend items.
- `line`: 
- `low`: Sets the low values.
- `lowsrc`: Sets the source reference on Chart Studio Cloud for  low .
- `meta`: Assigns extra meta information associated with this trace that can be used in various text attributes. Attributes such as trace `name`, graph, axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues` and `sliders` `label` text all support `meta`. To access the trace `meta` values in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the index or key of the `meta` item in question. To access trace `meta` in layout attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta` and `n` is the trace index.
- `metasrc`: Sets the source reference on Chart Studio Cloud for  meta .
- `name`: Sets the trace name. The trace name appear as the legend item and on hover.
- `opacity`: Sets the opacity of the trace.
- `open`: Sets the open values.
- `opensrc`: Sets the source reference on Chart Studio Cloud for  open .
- `selectedpoints`: Array containing integer indices of selected points. Has an effect only for traces that support selections. Note that an empty array means an empty selection where the `unselected` are turned on for all points, whereas, any other non-array values means no selection all where the `selected` and `unselected` styles have no effect.
- `showlegend`: Determines whether or not an item corresponding to this trace is shown in the legend.
- `stream`: 
- `text`: Sets hover text elements associated with each sample point. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to this trace's sample points.
- `textsrc`: Sets the source reference on Chart Studio Cloud for  text .
- `transforms`: 
- `type`: candlestick
- `uid`: Assign an id to this trace, Use this to provide object constancy between traces during animations and transitions.
- `uirevision`: Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves.
- `visible`: Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).
- `whiskerwidth`: Sets the width of the whiskers relative to the box' width. For example, with 1, the whiskers are as wide as the box(es).
- `x`: Sets the x coordinates. If absent, linear coordinate will be generated.
- `xaxis`: Sets a reference between this trace's x coordinates and a 2D cartesian x axis. If *x* (the default value), the x coordinates refer to `layout.xaxis`. If *x2*, the x coordinates refer to `layout.xaxis2`, and so on.
- `xcalendar`: Sets the calendar system to use with `x` date data.
- `xperiod`: Only relevant when the axis `type` is *date*. Sets the period positioning in milliseconds or *M<n>* on the x axis. Special values in the form of *M<n>* could be used to declare the number of months. In this case `n` must be a positive integer.
- `xperiod0`: Only relevant when the axis `type` is *date*. Sets the base for period positioning in milliseconds or date string on the x0 axis. When `x0period` is round number of weeks, the `x0period0` by default would be on a Sunday i.e. 2000-01-02, otherwise it would be at 2000-01-01.
- `xperiodalignment`: Only relevant when the axis `type` is *date*. Sets the alignment of data points on the x axis.
- `xsrc`: Sets the source reference on Chart Studio Cloud for  x .
- `yaxis`: Sets a reference between this trace's y coordinates and a 2D cartesian y axis. If *y* (the default value), the y coordinates refer to `layout.yaxis`. If *y2*, the y coordinates refer to `layout.yaxis2`, and so on.

"""
function candlestick(; kw...)
    for k in keys(kw)
        k in (:close, :closesrc, :customdata, :customdatasrc, :decreasing, :high, :highsrc, :hoverinfo, :hoverinfosrc, :hoverlabel, :hovertext, :hovertextsrc, :ids, :idssrc, :increasing, :legendgroup, :line, :low, :lowsrc, :meta, :metasrc, :name, :opacity, :open, :opensrc, :selectedpoints, :showlegend, :stream, :text, :textsrc, :transforms, :type, :uid, :uirevision, :visible, :whiskerwidth, :x, :xaxis, :xcalendar, :xperiod, :xperiod0, :xperiodalignment, :xsrc, :yaxis) || @warn "Function `candlestick` does not have attribute `$k`"
    end
    Plot(; type=:candlestick, kw...)
end

#-----------------------------------------------------------------------------# carpet
export carpet
"""
    carpet(; kw...) --> Plot(type=:carpet, kw...)

Create a Plotly trace of type `carpet` with the given `kw` attributes.  Attributes will be
validated against the Plotly schema.  Available attributes for `carpet` are:

- `a`: An array containing values of the first parameter value
- `a0`: Alternate to `a`. Builds a linear space of a coordinates. Use with `da` where `a0` is the starting coordinate and `da` the step.
- `aaxis`: 
- `asrc`: Sets the source reference on Chart Studio Cloud for  a .
- `b`: A two dimensional array of y coordinates at each carpet point.
- `b0`: Alternate to `b`. Builds a linear space of a coordinates. Use with `db` where `b0` is the starting coordinate and `db` the step.
- `baxis`: 
- `bsrc`: Sets the source reference on Chart Studio Cloud for  b .
- `carpet`: An identifier for this carpet, so that `scattercarpet` and `contourcarpet` traces can specify a carpet plot on which they lie
- `cheaterslope`: The shift applied to each successive row of data in creating a cheater plot. Only used if `x` is been omitted.
- `color`: Sets default for all colors associated with this axis all at once: line, font, tick, and grid colors. Grid color is lightened by blending this with the plot background Individual pieces can override this.
- `customdata`: Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, *scatter* traces also appends customdata items in the markers DOM elements
- `customdatasrc`: Sets the source reference on Chart Studio Cloud for  customdata .
- `da`: Sets the a coordinate step. See `a0` for more info.
- `db`: Sets the b coordinate step. See `b0` for more info.
- `font`: The default font used for axis & tick labels on this carpet
- `ids`: Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.
- `idssrc`: Sets the source reference on Chart Studio Cloud for  ids .
- `meta`: Assigns extra meta information associated with this trace that can be used in various text attributes. Attributes such as trace `name`, graph, axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues` and `sliders` `label` text all support `meta`. To access the trace `meta` values in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the index or key of the `meta` item in question. To access trace `meta` in layout attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta` and `n` is the trace index.
- `metasrc`: Sets the source reference on Chart Studio Cloud for  meta .
- `name`: Sets the trace name. The trace name appear as the legend item and on hover.
- `opacity`: Sets the opacity of the trace.
- `stream`: 
- `type`: carpet
- `uid`: Assign an id to this trace, Use this to provide object constancy between traces during animations and transitions.
- `uirevision`: Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves.
- `visible`: Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).
- `x`: A two dimensional array of x coordinates at each carpet point. If omitted, the plot is a cheater plot and the xaxis is hidden by default.
- `xaxis`: Sets a reference between this trace's x coordinates and a 2D cartesian x axis. If *x* (the default value), the x coordinates refer to `layout.xaxis`. If *x2*, the x coordinates refer to `layout.xaxis2`, and so on.
- `xsrc`: Sets the source reference on Chart Studio Cloud for  x .
- `y`: A two dimensional array of y coordinates at each carpet point.
- `yaxis`: Sets a reference between this trace's y coordinates and a 2D cartesian y axis. If *y* (the default value), the y coordinates refer to `layout.yaxis`. If *y2*, the y coordinates refer to `layout.yaxis2`, and so on.
- `ysrc`: Sets the source reference on Chart Studio Cloud for  y .

"""
function carpet(; kw...)
    for k in keys(kw)
        k in (:a, :a0, :aaxis, :asrc, :b, :b0, :baxis, :bsrc, :carpet, :cheaterslope, :color, :customdata, :customdatasrc, :da, :db, :font, :ids, :idssrc, :meta, :metasrc, :name, :opacity, :stream, :type, :uid, :uirevision, :visible, :x, :xaxis, :xsrc, :y, :yaxis, :ysrc) || @warn "Function `carpet` does not have attribute `$k`"
    end
    Plot(; type=:carpet, kw...)
end

#-----------------------------------------------------------------------------# choropleth
export choropleth
"""
    choropleth(; kw...) --> Plot(type=:choropleth, kw...)

Create a Plotly trace of type `choropleth` with the given `kw` attributes.  Attributes will be
validated against the Plotly schema.  Available attributes for `choropleth` are:

- `autocolorscale`: Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `colorscale`. In case `colorscale` is unspecified or `autocolorscale` is true, the default  palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.
- `coloraxis`: Sets a reference to a shared color axis. References to these shared color axes are *coloraxis*, *coloraxis2*, *coloraxis3*, etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.
- `colorbar`: 
- `colorscale`: Sets the colorscale. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use`zmin` and `zmax`. Alternatively, `colorscale` may be a palette name string of the following list: Greys,YlGnBu,Greens,YlOrRd,Bluered,RdBu,Reds,Blues,Picnic,Rainbow,Portland,Jet,Hot,Blackbody,Earth,Electric,Viridis,Cividis.
- `customdata`: Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, *scatter* traces also appends customdata items in the markers DOM elements
- `customdatasrc`: Sets the source reference on Chart Studio Cloud for  customdata .
- `featureidkey`: Sets the key in GeoJSON features which is used as id to match the items included in the `locations` array. Only has an effect when `geojson` is set. Support nested property, for example *properties.name*.
- `geo`: Sets a reference between this trace's geospatial coordinates and a geographic map. If *geo* (the default value), the geospatial coordinates refer to `layout.geo`. If *geo2*, the geospatial coordinates refer to `layout.geo2`, and so on.
- `geojson`: Sets optional GeoJSON data associated with this trace. If not given, the features on the base map are used. It can be set as a valid GeoJSON object or as a URL string. Note that we only accept GeoJSONs of type *FeatureCollection* or *Feature* with geometries of type *Polygon* or *MultiPolygon*.
- `hoverinfo`: Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.
- `hoverinfosrc`: Sets the source reference on Chart Studio Cloud for  hoverinfo .
- `hoverlabel`: 
- `hovertemplate`: Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example "y: %{y}". Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example "Price: %{y:$.2f}". https://github.com/d3/d3-3.x-api-reference/blob/master/Formatting.md#d3_format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example "Day: %{2019-01-01|%A}". https://github.com/d3/d3-time-format#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available.  Anything contained in tag `<extra>` is displayed in the secondary box, for example "<extra>{fullData.name}</extra>". To hide the secondary box completely, use an empty tag `<extra></extra>`.
- `hovertemplatesrc`: Sets the source reference on Chart Studio Cloud for  hovertemplate .
- `hovertext`: Same as `text`.
- `hovertextsrc`: Sets the source reference on Chart Studio Cloud for  hovertext .
- `ids`: Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.
- `idssrc`: Sets the source reference on Chart Studio Cloud for  ids .
- `legendgroup`: Sets the legend group for this trace. Traces part of the same legend group hide/show at the same time when toggling legend items.
- `locationmode`: Determines the set of locations used to match entries in `locations` to regions on the map. Values *ISO-3*, *USA-states*, *country names* correspond to features on the base map and value *geojson-id* corresponds to features from a custom GeoJSON linked to the `geojson` attribute.
- `locations`: Sets the coordinates via location IDs or names. See `locationmode` for more info.
- `locationssrc`: Sets the source reference on Chart Studio Cloud for  locations .
- `marker`: 
- `meta`: Assigns extra meta information associated with this trace that can be used in various text attributes. Attributes such as trace `name`, graph, axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues` and `sliders` `label` text all support `meta`. To access the trace `meta` values in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the index or key of the `meta` item in question. To access trace `meta` in layout attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta` and `n` is the trace index.
- `metasrc`: Sets the source reference on Chart Studio Cloud for  meta .
- `name`: Sets the trace name. The trace name appear as the legend item and on hover.
- `reversescale`: Reverses the color mapping if true. If true, `zmin` will correspond to the last color in the array and `zmax` will correspond to the first color.
- `selected`: 
- `selectedpoints`: Array containing integer indices of selected points. Has an effect only for traces that support selections. Note that an empty array means an empty selection where the `unselected` are turned on for all points, whereas, any other non-array values means no selection all where the `selected` and `unselected` styles have no effect.
- `showlegend`: Determines whether or not an item corresponding to this trace is shown in the legend.
- `showscale`: Determines whether or not a colorbar is displayed for this trace.
- `stream`: 
- `text`: Sets the text elements associated with each location.
- `textsrc`: Sets the source reference on Chart Studio Cloud for  text .
- `transforms`: 
- `type`: choropleth
- `uid`: Assign an id to this trace, Use this to provide object constancy between traces during animations and transitions.
- `uirevision`: Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves.
- `unselected`: 
- `visible`: Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).
- `z`: Sets the color values.
- `zauto`: Determines whether or not the color domain is computed with respect to the input data (here in `z`) or the bounds set in `zmin` and `zmax`  Defaults to `false` when `zmin` and `zmax` are set by the user.
- `zmax`: Sets the upper bound of the color domain. Value should have the same units as in `z` and if set, `zmin` must be set as well.
- `zmid`: Sets the mid-point of the color domain by scaling `zmin` and/or `zmax` to be equidistant to this point. Value should have the same units as in `z`. Has no effect when `zauto` is `false`.
- `zmin`: Sets the lower bound of the color domain. Value should have the same units as in `z` and if set, `zmax` must be set as well.
- `zsrc`: Sets the source reference on Chart Studio Cloud for  z .

"""
function choropleth(; kw...)
    for k in keys(kw)
        k in (:autocolorscale, :coloraxis, :colorbar, :colorscale, :customdata, :customdatasrc, :featureidkey, :geo, :geojson, :hoverinfo, :hoverinfosrc, :hoverlabel, :hovertemplate, :hovertemplatesrc, :hovertext, :hovertextsrc, :ids, :idssrc, :legendgroup, :locationmode, :locations, :locationssrc, :marker, :meta, :metasrc, :name, :reversescale, :selected, :selectedpoints, :showlegend, :showscale, :stream, :text, :textsrc, :transforms, :type, :uid, :uirevision, :unselected, :visible, :z, :zauto, :zmax, :zmid, :zmin, :zsrc) || @warn "Function `choropleth` does not have attribute `$k`"
    end
    Plot(; type=:choropleth, kw...)
end

#-----------------------------------------------------------------------------# choroplethmapbox
export choroplethmapbox
"""
    choroplethmapbox(; kw...) --> Plot(type=:choroplethmapbox, kw...)

Create a Plotly trace of type `choroplethmapbox` with the given `kw` attributes.  Attributes will be
validated against the Plotly schema.  Available attributes for `choroplethmapbox` are:

- `autocolorscale`: Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `colorscale`. In case `colorscale` is unspecified or `autocolorscale` is true, the default  palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.
- `below`: Determines if the choropleth polygons will be inserted before the layer with the specified ID. By default, choroplethmapbox traces are placed above the water layers. If set to '', the layer will be inserted above every existing layer.
- `coloraxis`: Sets a reference to a shared color axis. References to these shared color axes are *coloraxis*, *coloraxis2*, *coloraxis3*, etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.
- `colorbar`: 
- `colorscale`: Sets the colorscale. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use`zmin` and `zmax`. Alternatively, `colorscale` may be a palette name string of the following list: Greys,YlGnBu,Greens,YlOrRd,Bluered,RdBu,Reds,Blues,Picnic,Rainbow,Portland,Jet,Hot,Blackbody,Earth,Electric,Viridis,Cividis.
- `customdata`: Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, *scatter* traces also appends customdata items in the markers DOM elements
- `customdatasrc`: Sets the source reference on Chart Studio Cloud for  customdata .
- `featureidkey`: Sets the key in GeoJSON features which is used as id to match the items included in the `locations` array. Support nested property, for example *properties.name*.
- `geojson`: Sets the GeoJSON data associated with this trace. It can be set as a valid GeoJSON object or as a URL string. Note that we only accept GeoJSONs of type *FeatureCollection* or *Feature* with geometries of type *Polygon* or *MultiPolygon*.
- `hoverinfo`: Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.
- `hoverinfosrc`: Sets the source reference on Chart Studio Cloud for  hoverinfo .
- `hoverlabel`: 
- `hovertemplate`: Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example "y: %{y}". Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example "Price: %{y:$.2f}". https://github.com/d3/d3-3.x-api-reference/blob/master/Formatting.md#d3_format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example "Day: %{2019-01-01|%A}". https://github.com/d3/d3-time-format#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. variable `properties` Anything contained in tag `<extra>` is displayed in the secondary box, for example "<extra>{fullData.name}</extra>". To hide the secondary box completely, use an empty tag `<extra></extra>`.
- `hovertemplatesrc`: Sets the source reference on Chart Studio Cloud for  hovertemplate .
- `hovertext`: Same as `text`.
- `hovertextsrc`: Sets the source reference on Chart Studio Cloud for  hovertext .
- `ids`: Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.
- `idssrc`: Sets the source reference on Chart Studio Cloud for  ids .
- `legendgroup`: Sets the legend group for this trace. Traces part of the same legend group hide/show at the same time when toggling legend items.
- `locations`: Sets which features found in *geojson* to plot using their feature `id` field.
- `locationssrc`: Sets the source reference on Chart Studio Cloud for  locations .
- `marker`: 
- `meta`: Assigns extra meta information associated with this trace that can be used in various text attributes. Attributes such as trace `name`, graph, axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues` and `sliders` `label` text all support `meta`. To access the trace `meta` values in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the index or key of the `meta` item in question. To access trace `meta` in layout attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta` and `n` is the trace index.
- `metasrc`: Sets the source reference on Chart Studio Cloud for  meta .
- `name`: Sets the trace name. The trace name appear as the legend item and on hover.
- `reversescale`: Reverses the color mapping if true. If true, `zmin` will correspond to the last color in the array and `zmax` will correspond to the first color.
- `selected`: 
- `selectedpoints`: Array containing integer indices of selected points. Has an effect only for traces that support selections. Note that an empty array means an empty selection where the `unselected` are turned on for all points, whereas, any other non-array values means no selection all where the `selected` and `unselected` styles have no effect.
- `showlegend`: Determines whether or not an item corresponding to this trace is shown in the legend.
- `showscale`: Determines whether or not a colorbar is displayed for this trace.
- `stream`: 
- `subplot`: Sets a reference between this trace's data coordinates and a mapbox subplot. If *mapbox* (the default value), the data refer to `layout.mapbox`. If *mapbox2*, the data refer to `layout.mapbox2`, and so on.
- `text`: Sets the text elements associated with each location.
- `textsrc`: Sets the source reference on Chart Studio Cloud for  text .
- `transforms`: 
- `type`: choroplethmapbox
- `uid`: Assign an id to this trace, Use this to provide object constancy between traces during animations and transitions.
- `uirevision`: Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves.
- `unselected`: 
- `visible`: Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).
- `z`: Sets the color values.
- `zauto`: Determines whether or not the color domain is computed with respect to the input data (here in `z`) or the bounds set in `zmin` and `zmax`  Defaults to `false` when `zmin` and `zmax` are set by the user.
- `zmax`: Sets the upper bound of the color domain. Value should have the same units as in `z` and if set, `zmin` must be set as well.
- `zmid`: Sets the mid-point of the color domain by scaling `zmin` and/or `zmax` to be equidistant to this point. Value should have the same units as in `z`. Has no effect when `zauto` is `false`.
- `zmin`: Sets the lower bound of the color domain. Value should have the same units as in `z` and if set, `zmax` must be set as well.
- `zsrc`: Sets the source reference on Chart Studio Cloud for  z .

"""
function choroplethmapbox(; kw...)
    for k in keys(kw)
        k in (:autocolorscale, :below, :coloraxis, :colorbar, :colorscale, :customdata, :customdatasrc, :featureidkey, :geojson, :hoverinfo, :hoverinfosrc, :hoverlabel, :hovertemplate, :hovertemplatesrc, :hovertext, :hovertextsrc, :ids, :idssrc, :legendgroup, :locations, :locationssrc, :marker, :meta, :metasrc, :name, :reversescale, :selected, :selectedpoints, :showlegend, :showscale, :stream, :subplot, :text, :textsrc, :transforms, :type, :uid, :uirevision, :unselected, :visible, :z, :zauto, :zmax, :zmid, :zmin, :zsrc) || @warn "Function `choroplethmapbox` does not have attribute `$k`"
    end
    Plot(; type=:choroplethmapbox, kw...)
end

#-----------------------------------------------------------------------------# cone
export cone
"""
    cone(; kw...) --> Plot(type=:cone, kw...)

Create a Plotly trace of type `cone` with the given `kw` attributes.  Attributes will be
validated against the Plotly schema.  Available attributes for `cone` are:

- `anchor`: Sets the cones' anchor with respect to their x/y/z positions. Note that *cm* denote the cone's center of mass which corresponds to 1/4 from the tail to tip.
- `autocolorscale`: Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `colorscale`. In case `colorscale` is unspecified or `autocolorscale` is true, the default  palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.
- `cauto`: Determines whether or not the color domain is computed with respect to the input data (here u/v/w norm) or the bounds set in `cmin` and `cmax`  Defaults to `false` when `cmin` and `cmax` are set by the user.
- `cmax`: Sets the upper bound of the color domain. Value should have the same units as u/v/w norm and if set, `cmin` must be set as well.
- `cmid`: Sets the mid-point of the color domain by scaling `cmin` and/or `cmax` to be equidistant to this point. Value should have the same units as u/v/w norm. Has no effect when `cauto` is `false`.
- `cmin`: Sets the lower bound of the color domain. Value should have the same units as u/v/w norm and if set, `cmax` must be set as well.
- `coloraxis`: Sets a reference to a shared color axis. References to these shared color axes are *coloraxis*, *coloraxis2*, *coloraxis3*, etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.
- `colorbar`: 
- `colorscale`: Sets the colorscale. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use`cmin` and `cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Greys,YlGnBu,Greens,YlOrRd,Bluered,RdBu,Reds,Blues,Picnic,Rainbow,Portland,Jet,Hot,Blackbody,Earth,Electric,Viridis,Cividis.
- `customdata`: Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, *scatter* traces also appends customdata items in the markers DOM elements
- `customdatasrc`: Sets the source reference on Chart Studio Cloud for  customdata .
- `hoverinfo`: Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.
- `hoverinfosrc`: Sets the source reference on Chart Studio Cloud for  hoverinfo .
- `hoverlabel`: 
- `hovertemplate`: Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example "y: %{y}". Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example "Price: %{y:$.2f}". https://github.com/d3/d3-3.x-api-reference/blob/master/Formatting.md#d3_format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example "Day: %{2019-01-01|%A}". https://github.com/d3/d3-time-format#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. variable `norm` Anything contained in tag `<extra>` is displayed in the secondary box, for example "<extra>{fullData.name}</extra>". To hide the secondary box completely, use an empty tag `<extra></extra>`.
- `hovertemplatesrc`: Sets the source reference on Chart Studio Cloud for  hovertemplate .
- `hovertext`: Same as `text`.
- `hovertextsrc`: Sets the source reference on Chart Studio Cloud for  hovertext .
- `ids`: Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.
- `idssrc`: Sets the source reference on Chart Studio Cloud for  ids .
- `legendgroup`: Sets the legend group for this trace. Traces part of the same legend group hide/show at the same time when toggling legend items.
- `lighting`: 
- `lightposition`: 
- `meta`: Assigns extra meta information associated with this trace that can be used in various text attributes. Attributes such as trace `name`, graph, axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues` and `sliders` `label` text all support `meta`. To access the trace `meta` values in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the index or key of the `meta` item in question. To access trace `meta` in layout attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta` and `n` is the trace index.
- `metasrc`: Sets the source reference on Chart Studio Cloud for  meta .
- `name`: Sets the trace name. The trace name appear as the legend item and on hover.
- `opacity`: Sets the opacity of the surface. Please note that in the case of using high `opacity` values for example a value greater than or equal to 0.5 on two surfaces (and 0.25 with four surfaces), an overlay of multiple transparent surfaces may not perfectly be sorted in depth by the webgl API. This behavior may be improved in the near future and is subject to change.
- `reversescale`: Reverses the color mapping if true. If true, `cmin` will correspond to the last color in the array and `cmax` will correspond to the first color.
- `scene`: Sets a reference between this trace's 3D coordinate system and a 3D scene. If *scene* (the default value), the (x,y,z) coordinates refer to `layout.scene`. If *scene2*, the (x,y,z) coordinates refer to `layout.scene2`, and so on.
- `showlegend`: Determines whether or not an item corresponding to this trace is shown in the legend.
- `showscale`: Determines whether or not a colorbar is displayed for this trace.
- `sizemode`: Determines whether `sizeref` is set as a *scaled* (i.e unitless) scalar (normalized by the max u/v/w norm in the vector field) or as *absolute* value (in the same units as the vector field).
- `sizeref`: Adjusts the cone size scaling. The size of the cones is determined by their u/v/w norm multiplied a factor and `sizeref`. This factor (computed internally) corresponds to the minimum "time" to travel across two successive x/y/z positions at the average velocity of those two successive positions. All cones in a given trace use the same factor. With `sizemode` set to *scaled*, `sizeref` is unitless, its default value is *0.5* With `sizemode` set to *absolute*, `sizeref` has the same units as the u/v/w vector field, its the default value is half the sample's maximum vector norm.
- `stream`: 
- `text`: Sets the text elements associated with the cones. If trace `hoverinfo` contains a *text* flag and *hovertext* is not set, these elements will be seen in the hover labels.
- `textsrc`: Sets the source reference on Chart Studio Cloud for  text .
- `type`: cone
- `u`: Sets the x components of the vector field.
- `uid`: Assign an id to this trace, Use this to provide object constancy between traces during animations and transitions.
- `uirevision`: Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves.
- `usrc`: Sets the source reference on Chart Studio Cloud for  u .
- `v`: Sets the y components of the vector field.
- `visible`: Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).
- `vsrc`: Sets the source reference on Chart Studio Cloud for  v .
- `w`: Sets the z components of the vector field.
- `wsrc`: Sets the source reference on Chart Studio Cloud for  w .
- `x`: Sets the x coordinates of the vector field and of the displayed cones.
- `xsrc`: Sets the source reference on Chart Studio Cloud for  x .
- `y`: Sets the y coordinates of the vector field and of the displayed cones.
- `ysrc`: Sets the source reference on Chart Studio Cloud for  y .
- `z`: Sets the z coordinates of the vector field and of the displayed cones.
- `zsrc`: Sets the source reference on Chart Studio Cloud for  z .

"""
function cone(; kw...)
    for k in keys(kw)
        k in (:anchor, :autocolorscale, :cauto, :cmax, :cmid, :cmin, :coloraxis, :colorbar, :colorscale, :customdata, :customdatasrc, :hoverinfo, :hoverinfosrc, :hoverlabel, :hovertemplate, :hovertemplatesrc, :hovertext, :hovertextsrc, :ids, :idssrc, :legendgroup, :lighting, :lightposition, :meta, :metasrc, :name, :opacity, :reversescale, :scene, :showlegend, :showscale, :sizemode, :sizeref, :stream, :text, :textsrc, :type, :u, :uid, :uirevision, :usrc, :v, :visible, :vsrc, :w, :wsrc, :x, :xsrc, :y, :ysrc, :z, :zsrc) || @warn "Function `cone` does not have attribute `$k`"
    end
    Plot(; type=:cone, kw...)
end

#-----------------------------------------------------------------------------# contour
export contour
"""
    contour(; kw...) --> Plot(type=:contour, kw...)

Create a Plotly trace of type `contour` with the given `kw` attributes.  Attributes will be
validated against the Plotly schema.  Available attributes for `contour` are:

- `autocolorscale`: Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `colorscale`. In case `colorscale` is unspecified or `autocolorscale` is true, the default  palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.
- `autocontour`: Determines whether or not the contour level attributes are picked by an algorithm. If *true*, the number of contour levels can be set in `ncontours`. If *false*, set the contour level attributes in `contours`.
- `coloraxis`: Sets a reference to a shared color axis. References to these shared color axes are *coloraxis*, *coloraxis2*, *coloraxis3*, etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.
- `colorbar`: 
- `colorscale`: Sets the colorscale. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use`zmin` and `zmax`. Alternatively, `colorscale` may be a palette name string of the following list: Greys,YlGnBu,Greens,YlOrRd,Bluered,RdBu,Reds,Blues,Picnic,Rainbow,Portland,Jet,Hot,Blackbody,Earth,Electric,Viridis,Cividis.
- `connectgaps`: Determines whether or not gaps (i.e. {nan} or missing values) in the `z` data are filled in. It is defaulted to true if `z` is a one dimensional array otherwise it is defaulted to false.
- `contours`: 
- `customdata`: Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, *scatter* traces also appends customdata items in the markers DOM elements
- `customdatasrc`: Sets the source reference on Chart Studio Cloud for  customdata .
- `dx`: Sets the x coordinate step. See `x0` for more info.
- `dy`: Sets the y coordinate step. See `y0` for more info.
- `fillcolor`: Sets the fill color if `contours.type` is *constraint*. Defaults to a half-transparent variant of the line color, marker color, or marker line color, whichever is available.
- `hoverinfo`: Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.
- `hoverinfosrc`: Sets the source reference on Chart Studio Cloud for  hoverinfo .
- `hoverlabel`: 
- `hoverongaps`: Determines whether or not gaps (i.e. {nan} or missing values) in the `z` data have hover labels associated with them.
- `hovertemplate`: Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example "y: %{y}". Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example "Price: %{y:$.2f}". https://github.com/d3/d3-3.x-api-reference/blob/master/Formatting.md#d3_format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example "Day: %{2019-01-01|%A}". https://github.com/d3/d3-time-format#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available.  Anything contained in tag `<extra>` is displayed in the secondary box, for example "<extra>{fullData.name}</extra>". To hide the secondary box completely, use an empty tag `<extra></extra>`.
- `hovertemplatesrc`: Sets the source reference on Chart Studio Cloud for  hovertemplate .
- `hovertext`: Same as `text`.
- `hovertextsrc`: Sets the source reference on Chart Studio Cloud for  hovertext .
- `ids`: Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.
- `idssrc`: Sets the source reference on Chart Studio Cloud for  ids .
- `legendgroup`: Sets the legend group for this trace. Traces part of the same legend group hide/show at the same time when toggling legend items.
- `line`: 
- `meta`: Assigns extra meta information associated with this trace that can be used in various text attributes. Attributes such as trace `name`, graph, axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues` and `sliders` `label` text all support `meta`. To access the trace `meta` values in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the index or key of the `meta` item in question. To access trace `meta` in layout attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta` and `n` is the trace index.
- `metasrc`: Sets the source reference on Chart Studio Cloud for  meta .
- `name`: Sets the trace name. The trace name appear as the legend item and on hover.
- `ncontours`: Sets the maximum number of contour levels. The actual number of contours will be chosen automatically to be less than or equal to the value of `ncontours`. Has an effect only if `autocontour` is *true* or if `contours.size` is missing.
- `opacity`: Sets the opacity of the trace.
- `reversescale`: Reverses the color mapping if true. If true, `zmin` will correspond to the last color in the array and `zmax` will correspond to the first color.
- `showlegend`: Determines whether or not an item corresponding to this trace is shown in the legend.
- `showscale`: Determines whether or not a colorbar is displayed for this trace.
- `stream`: 
- `text`: Sets the text elements associated with each z value.
- `textsrc`: Sets the source reference on Chart Studio Cloud for  text .
- `transforms`: 
- `transpose`: Transposes the z data.
- `type`: contour
- `uid`: Assign an id to this trace, Use this to provide object constancy between traces during animations and transitions.
- `uirevision`: Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves.
- `visible`: Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).
- `x`: Sets the x coordinates.
- `x0`: Alternate to `x`. Builds a linear space of x coordinates. Use with `dx` where `x0` is the starting coordinate and `dx` the step.
- `xaxis`: Sets a reference between this trace's x coordinates and a 2D cartesian x axis. If *x* (the default value), the x coordinates refer to `layout.xaxis`. If *x2*, the x coordinates refer to `layout.xaxis2`, and so on.
- `xcalendar`: Sets the calendar system to use with `x` date data.
- `xperiod`: Only relevant when the axis `type` is *date*. Sets the period positioning in milliseconds or *M<n>* on the x axis. Special values in the form of *M<n>* could be used to declare the number of months. In this case `n` must be a positive integer.
- `xperiod0`: Only relevant when the axis `type` is *date*. Sets the base for period positioning in milliseconds or date string on the x0 axis. When `x0period` is round number of weeks, the `x0period0` by default would be on a Sunday i.e. 2000-01-02, otherwise it would be at 2000-01-01.
- `xperiodalignment`: Only relevant when the axis `type` is *date*. Sets the alignment of data points on the x axis.
- `xsrc`: Sets the source reference on Chart Studio Cloud for  x .
- `xtype`: If *array*, the heatmap's x coordinates are given by *x* (the default behavior when `x` is provided). If *scaled*, the heatmap's x coordinates are given by *x0* and *dx* (the default behavior when `x` is not provided).
- `y`: Sets the y coordinates.
- `y0`: Alternate to `y`. Builds a linear space of y coordinates. Use with `dy` where `y0` is the starting coordinate and `dy` the step.
- `yaxis`: Sets a reference between this trace's y coordinates and a 2D cartesian y axis. If *y* (the default value), the y coordinates refer to `layout.yaxis`. If *y2*, the y coordinates refer to `layout.yaxis2`, and so on.
- `ycalendar`: Sets the calendar system to use with `y` date data.
- `yperiod`: Only relevant when the axis `type` is *date*. Sets the period positioning in milliseconds or *M<n>* on the y axis. Special values in the form of *M<n>* could be used to declare the number of months. In this case `n` must be a positive integer.
- `yperiod0`: Only relevant when the axis `type` is *date*. Sets the base for period positioning in milliseconds or date string on the y0 axis. When `y0period` is round number of weeks, the `y0period0` by default would be on a Sunday i.e. 2000-01-02, otherwise it would be at 2000-01-01.
- `yperiodalignment`: Only relevant when the axis `type` is *date*. Sets the alignment of data points on the y axis.
- `ysrc`: Sets the source reference on Chart Studio Cloud for  y .
- `ytype`: If *array*, the heatmap's y coordinates are given by *y* (the default behavior when `y` is provided) If *scaled*, the heatmap's y coordinates are given by *y0* and *dy* (the default behavior when `y` is not provided)
- `z`: Sets the z data.
- `zauto`: Determines whether or not the color domain is computed with respect to the input data (here in `z`) or the bounds set in `zmin` and `zmax`  Defaults to `false` when `zmin` and `zmax` are set by the user.
- `zhoverformat`: Sets the hover text formatting rule using d3 formatting mini-languages which are very similar to those in Python. See: https://github.com/d3/d3-3.x-api-reference/blob/master/Formatting.md#d3_format
- `zmax`: Sets the upper bound of the color domain. Value should have the same units as in `z` and if set, `zmin` must be set as well.
- `zmid`: Sets the mid-point of the color domain by scaling `zmin` and/or `zmax` to be equidistant to this point. Value should have the same units as in `z`. Has no effect when `zauto` is `false`.
- `zmin`: Sets the lower bound of the color domain. Value should have the same units as in `z` and if set, `zmax` must be set as well.
- `zsrc`: Sets the source reference on Chart Studio Cloud for  z .

"""
function contour(; kw...)
    for k in keys(kw)
        k in (:autocolorscale, :autocontour, :coloraxis, :colorbar, :colorscale, :connectgaps, :contours, :customdata, :customdatasrc, :dx, :dy, :fillcolor, :hoverinfo, :hoverinfosrc, :hoverlabel, :hoverongaps, :hovertemplate, :hovertemplatesrc, :hovertext, :hovertextsrc, :ids, :idssrc, :legendgroup, :line, :meta, :metasrc, :name, :ncontours, :opacity, :reversescale, :showlegend, :showscale, :stream, :text, :textsrc, :transforms, :transpose, :type, :uid, :uirevision, :visible, :x, :x0, :xaxis, :xcalendar, :xperiod, :xperiod0, :xperiodalignment, :xsrc, :xtype, :y, :y0, :yaxis, :ycalendar, :yperiod, :yperiod0, :yperiodalignment, :ysrc, :ytype, :z, :zauto, :zhoverformat, :zmax, :zmid, :zmin, :zsrc) || @warn "Function `contour` does not have attribute `$k`"
    end
    Plot(; type=:contour, kw...)
end

#-----------------------------------------------------------------------------# contourcarpet
export contourcarpet
"""
    contourcarpet(; kw...) --> Plot(type=:contourcarpet, kw...)

Create a Plotly trace of type `contourcarpet` with the given `kw` attributes.  Attributes will be
validated against the Plotly schema.  Available attributes for `contourcarpet` are:

- `a`: Sets the x coordinates.
- `a0`: Alternate to `x`. Builds a linear space of x coordinates. Use with `dx` where `x0` is the starting coordinate and `dx` the step.
- `asrc`: Sets the source reference on Chart Studio Cloud for  a .
- `atype`: If *array*, the heatmap's x coordinates are given by *x* (the default behavior when `x` is provided). If *scaled*, the heatmap's x coordinates are given by *x0* and *dx* (the default behavior when `x` is not provided).
- `autocolorscale`: Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `colorscale`. In case `colorscale` is unspecified or `autocolorscale` is true, the default  palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.
- `autocontour`: Determines whether or not the contour level attributes are picked by an algorithm. If *true*, the number of contour levels can be set in `ncontours`. If *false*, set the contour level attributes in `contours`.
- `b`: Sets the y coordinates.
- `b0`: Alternate to `y`. Builds a linear space of y coordinates. Use with `dy` where `y0` is the starting coordinate and `dy` the step.
- `bsrc`: Sets the source reference on Chart Studio Cloud for  b .
- `btype`: If *array*, the heatmap's y coordinates are given by *y* (the default behavior when `y` is provided) If *scaled*, the heatmap's y coordinates are given by *y0* and *dy* (the default behavior when `y` is not provided)
- `carpet`: The `carpet` of the carpet axes on which this contour trace lies
- `coloraxis`: Sets a reference to a shared color axis. References to these shared color axes are *coloraxis*, *coloraxis2*, *coloraxis3*, etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.
- `colorbar`: 
- `colorscale`: Sets the colorscale. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use`zmin` and `zmax`. Alternatively, `colorscale` may be a palette name string of the following list: Greys,YlGnBu,Greens,YlOrRd,Bluered,RdBu,Reds,Blues,Picnic,Rainbow,Portland,Jet,Hot,Blackbody,Earth,Electric,Viridis,Cividis.
- `contours`: 
- `customdata`: Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, *scatter* traces also appends customdata items in the markers DOM elements
- `customdatasrc`: Sets the source reference on Chart Studio Cloud for  customdata .
- `da`: Sets the x coordinate step. See `x0` for more info.
- `db`: Sets the y coordinate step. See `y0` for more info.
- `fillcolor`: Sets the fill color if `contours.type` is *constraint*. Defaults to a half-transparent variant of the line color, marker color, or marker line color, whichever is available.
- `hovertext`: Same as `text`.
- `hovertextsrc`: Sets the source reference on Chart Studio Cloud for  hovertext .
- `ids`: Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.
- `idssrc`: Sets the source reference on Chart Studio Cloud for  ids .
- `legendgroup`: Sets the legend group for this trace. Traces part of the same legend group hide/show at the same time when toggling legend items.
- `line`: 
- `meta`: Assigns extra meta information associated with this trace that can be used in various text attributes. Attributes such as trace `name`, graph, axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues` and `sliders` `label` text all support `meta`. To access the trace `meta` values in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the index or key of the `meta` item in question. To access trace `meta` in layout attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta` and `n` is the trace index.
- `metasrc`: Sets the source reference on Chart Studio Cloud for  meta .
- `name`: Sets the trace name. The trace name appear as the legend item and on hover.
- `ncontours`: Sets the maximum number of contour levels. The actual number of contours will be chosen automatically to be less than or equal to the value of `ncontours`. Has an effect only if `autocontour` is *true* or if `contours.size` is missing.
- `opacity`: Sets the opacity of the trace.
- `reversescale`: Reverses the color mapping if true. If true, `zmin` will correspond to the last color in the array and `zmax` will correspond to the first color.
- `showlegend`: Determines whether or not an item corresponding to this trace is shown in the legend.
- `showscale`: Determines whether or not a colorbar is displayed for this trace.
- `stream`: 
- `text`: Sets the text elements associated with each z value.
- `textsrc`: Sets the source reference on Chart Studio Cloud for  text .
- `transpose`: Transposes the z data.
- `type`: contourcarpet
- `uid`: Assign an id to this trace, Use this to provide object constancy between traces during animations and transitions.
- `uirevision`: Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves.
- `visible`: Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).
- `xaxis`: Sets a reference between this trace's x coordinates and a 2D cartesian x axis. If *x* (the default value), the x coordinates refer to `layout.xaxis`. If *x2*, the x coordinates refer to `layout.xaxis2`, and so on.
- `yaxis`: Sets a reference between this trace's y coordinates and a 2D cartesian y axis. If *y* (the default value), the y coordinates refer to `layout.yaxis`. If *y2*, the y coordinates refer to `layout.yaxis2`, and so on.
- `z`: Sets the z data.
- `zauto`: Determines whether or not the color domain is computed with respect to the input data (here in `z`) or the bounds set in `zmin` and `zmax`  Defaults to `false` when `zmin` and `zmax` are set by the user.
- `zmax`: Sets the upper bound of the color domain. Value should have the same units as in `z` and if set, `zmin` must be set as well.
- `zmid`: Sets the mid-point of the color domain by scaling `zmin` and/or `zmax` to be equidistant to this point. Value should have the same units as in `z`. Has no effect when `zauto` is `false`.
- `zmin`: Sets the lower bound of the color domain. Value should have the same units as in `z` and if set, `zmax` must be set as well.
- `zsrc`: Sets the source reference on Chart Studio Cloud for  z .

"""
function contourcarpet(; kw...)
    for k in keys(kw)
        k in (:a, :a0, :asrc, :atype, :autocolorscale, :autocontour, :b, :b0, :bsrc, :btype, :carpet, :coloraxis, :colorbar, :colorscale, :contours, :customdata, :customdatasrc, :da, :db, :fillcolor, :hovertext, :hovertextsrc, :ids, :idssrc, :legendgroup, :line, :meta, :metasrc, :name, :ncontours, :opacity, :reversescale, :showlegend, :showscale, :stream, :text, :textsrc, :transpose, :type, :uid, :uirevision, :visible, :xaxis, :yaxis, :z, :zauto, :zmax, :zmid, :zmin, :zsrc) || @warn "Function `contourcarpet` does not have attribute `$k`"
    end
    Plot(; type=:contourcarpet, kw...)
end

#-----------------------------------------------------------------------------# densitymapbox
export densitymapbox
"""
    densitymapbox(; kw...) --> Plot(type=:densitymapbox, kw...)

Create a Plotly trace of type `densitymapbox` with the given `kw` attributes.  Attributes will be
validated against the Plotly schema.  Available attributes for `densitymapbox` are:

- `autocolorscale`: Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `colorscale`. In case `colorscale` is unspecified or `autocolorscale` is true, the default  palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.
- `below`: Determines if the densitymapbox trace will be inserted before the layer with the specified ID. By default, densitymapbox traces are placed below the first layer of type symbol If set to '', the layer will be inserted above every existing layer.
- `coloraxis`: Sets a reference to a shared color axis. References to these shared color axes are *coloraxis*, *coloraxis2*, *coloraxis3*, etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.
- `colorbar`: 
- `colorscale`: Sets the colorscale. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use`zmin` and `zmax`. Alternatively, `colorscale` may be a palette name string of the following list: Greys,YlGnBu,Greens,YlOrRd,Bluered,RdBu,Reds,Blues,Picnic,Rainbow,Portland,Jet,Hot,Blackbody,Earth,Electric,Viridis,Cividis.
- `customdata`: Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, *scatter* traces also appends customdata items in the markers DOM elements
- `customdatasrc`: Sets the source reference on Chart Studio Cloud for  customdata .
- `hoverinfo`: Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.
- `hoverinfosrc`: Sets the source reference on Chart Studio Cloud for  hoverinfo .
- `hoverlabel`: 
- `hovertemplate`: Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example "y: %{y}". Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example "Price: %{y:$.2f}". https://github.com/d3/d3-3.x-api-reference/blob/master/Formatting.md#d3_format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example "Day: %{2019-01-01|%A}". https://github.com/d3/d3-time-format#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available.  Anything contained in tag `<extra>` is displayed in the secondary box, for example "<extra>{fullData.name}</extra>". To hide the secondary box completely, use an empty tag `<extra></extra>`.
- `hovertemplatesrc`: Sets the source reference on Chart Studio Cloud for  hovertemplate .
- `hovertext`: Sets hover text elements associated with each (lon,lat) pair If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (lon,lat) coordinates. To be seen, trace `hoverinfo` must contain a *text* flag.
- `hovertextsrc`: Sets the source reference on Chart Studio Cloud for  hovertext .
- `ids`: Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.
- `idssrc`: Sets the source reference on Chart Studio Cloud for  ids .
- `lat`: Sets the latitude coordinates (in degrees North).
- `latsrc`: Sets the source reference on Chart Studio Cloud for  lat .
- `legendgroup`: Sets the legend group for this trace. Traces part of the same legend group hide/show at the same time when toggling legend items.
- `lon`: Sets the longitude coordinates (in degrees East).
- `lonsrc`: Sets the source reference on Chart Studio Cloud for  lon .
- `meta`: Assigns extra meta information associated with this trace that can be used in various text attributes. Attributes such as trace `name`, graph, axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues` and `sliders` `label` text all support `meta`. To access the trace `meta` values in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the index or key of the `meta` item in question. To access trace `meta` in layout attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta` and `n` is the trace index.
- `metasrc`: Sets the source reference on Chart Studio Cloud for  meta .
- `name`: Sets the trace name. The trace name appear as the legend item and on hover.
- `opacity`: Sets the opacity of the trace.
- `radius`: Sets the radius of influence of one `lon` / `lat` point in pixels. Increasing the value makes the densitymapbox trace smoother, but less detailed.
- `radiussrc`: Sets the source reference on Chart Studio Cloud for  radius .
- `reversescale`: Reverses the color mapping if true. If true, `zmin` will correspond to the last color in the array and `zmax` will correspond to the first color.
- `showlegend`: Determines whether or not an item corresponding to this trace is shown in the legend.
- `showscale`: Determines whether or not a colorbar is displayed for this trace.
- `stream`: 
- `subplot`: Sets a reference between this trace's data coordinates and a mapbox subplot. If *mapbox* (the default value), the data refer to `layout.mapbox`. If *mapbox2*, the data refer to `layout.mapbox2`, and so on.
- `text`: Sets text elements associated with each (lon,lat) pair If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (lon,lat) coordinates. If trace `hoverinfo` contains a *text* flag and *hovertext* is not set, these elements will be seen in the hover labels.
- `textsrc`: Sets the source reference on Chart Studio Cloud for  text .
- `transforms`: 
- `type`: densitymapbox
- `uid`: Assign an id to this trace, Use this to provide object constancy between traces during animations and transitions.
- `uirevision`: Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves.
- `visible`: Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).
- `z`: Sets the points' weight. For example, a value of 10 would be equivalent to having 10 points of weight 1 in the same spot
- `zauto`: Determines whether or not the color domain is computed with respect to the input data (here in `z`) or the bounds set in `zmin` and `zmax`  Defaults to `false` when `zmin` and `zmax` are set by the user.
- `zmax`: Sets the upper bound of the color domain. Value should have the same units as in `z` and if set, `zmin` must be set as well.
- `zmid`: Sets the mid-point of the color domain by scaling `zmin` and/or `zmax` to be equidistant to this point. Value should have the same units as in `z`. Has no effect when `zauto` is `false`.
- `zmin`: Sets the lower bound of the color domain. Value should have the same units as in `z` and if set, `zmax` must be set as well.
- `zsrc`: Sets the source reference on Chart Studio Cloud for  z .

"""
function densitymapbox(; kw...)
    for k in keys(kw)
        k in (:autocolorscale, :below, :coloraxis, :colorbar, :colorscale, :customdata, :customdatasrc, :hoverinfo, :hoverinfosrc, :hoverlabel, :hovertemplate, :hovertemplatesrc, :hovertext, :hovertextsrc, :ids, :idssrc, :lat, :latsrc, :legendgroup, :lon, :lonsrc, :meta, :metasrc, :name, :opacity, :radius, :radiussrc, :reversescale, :showlegend, :showscale, :stream, :subplot, :text, :textsrc, :transforms, :type, :uid, :uirevision, :visible, :z, :zauto, :zmax, :zmid, :zmin, :zsrc) || @warn "Function `densitymapbox` does not have attribute `$k`"
    end
    Plot(; type=:densitymapbox, kw...)
end

#-----------------------------------------------------------------------------# funnel
export funnel
"""
    funnel(; kw...) --> Plot(type=:funnel, kw...)

Create a Plotly trace of type `funnel` with the given `kw` attributes.  Attributes will be
validated against the Plotly schema.  Available attributes for `funnel` are:

- `alignmentgroup`: Set several traces linked to the same position axis or matching axes to the same alignmentgroup. This controls whether bars compute their positional range dependently or independently.
- `cliponaxis`: Determines whether the text nodes are clipped about the subplot axes. To show the text nodes above axis lines and tick labels, make sure to set `xaxis.layer` and `yaxis.layer` to *below traces*.
- `connector`: 
- `constraintext`: Constrain the size of text inside or outside a bar to be no larger than the bar itself.
- `customdata`: Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, *scatter* traces also appends customdata items in the markers DOM elements
- `customdatasrc`: Sets the source reference on Chart Studio Cloud for  customdata .
- `dx`: Sets the x coordinate step. See `x0` for more info.
- `dy`: Sets the y coordinate step. See `y0` for more info.
- `hoverinfo`: Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.
- `hoverinfosrc`: Sets the source reference on Chart Studio Cloud for  hoverinfo .
- `hoverlabel`: 
- `hovertemplate`: Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example "y: %{y}". Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example "Price: %{y:$.2f}". https://github.com/d3/d3-3.x-api-reference/blob/master/Formatting.md#d3_format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example "Day: %{2019-01-01|%A}". https://github.com/d3/d3-time-format#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. variables `percentInitial`, `percentPrevious` and `percentTotal`. Anything contained in tag `<extra>` is displayed in the secondary box, for example "<extra>{fullData.name}</extra>". To hide the secondary box completely, use an empty tag `<extra></extra>`.
- `hovertemplatesrc`: Sets the source reference on Chart Studio Cloud for  hovertemplate .
- `hovertext`: Sets hover text elements associated with each (x,y) pair. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates. To be seen, trace `hoverinfo` must contain a *text* flag.
- `hovertextsrc`: Sets the source reference on Chart Studio Cloud for  hovertext .
- `ids`: Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.
- `idssrc`: Sets the source reference on Chart Studio Cloud for  ids .
- `insidetextanchor`: Determines if texts are kept at center or start/end points in `textposition` *inside* mode.
- `insidetextfont`: Sets the font used for `text` lying inside the bar.
- `legendgroup`: Sets the legend group for this trace. Traces part of the same legend group hide/show at the same time when toggling legend items.
- `marker`: 
- `meta`: Assigns extra meta information associated with this trace that can be used in various text attributes. Attributes such as trace `name`, graph, axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues` and `sliders` `label` text all support `meta`. To access the trace `meta` values in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the index or key of the `meta` item in question. To access trace `meta` in layout attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta` and `n` is the trace index.
- `metasrc`: Sets the source reference on Chart Studio Cloud for  meta .
- `name`: Sets the trace name. The trace name appear as the legend item and on hover.
- `offset`: Shifts the position where the bar is drawn (in position axis units). In *group* barmode, traces that set *offset* will be excluded and drawn in *overlay* mode instead.
- `offsetgroup`: Set several traces linked to the same position axis or matching axes to the same offsetgroup where bars of the same position coordinate will line up.
- `opacity`: Sets the opacity of the trace.
- `orientation`: Sets the orientation of the funnels. With *v* (*h*), the value of the each bar spans along the vertical (horizontal). By default funnels are tend to be oriented horizontally; unless only *y* array is presented or orientation is set to *v*. Also regarding graphs including only 'horizontal' funnels, *autorange* on the *y-axis* are set to *reversed*.
- `outsidetextfont`: Sets the font used for `text` lying outside the bar.
- `selectedpoints`: Array containing integer indices of selected points. Has an effect only for traces that support selections. Note that an empty array means an empty selection where the `unselected` are turned on for all points, whereas, any other non-array values means no selection all where the `selected` and `unselected` styles have no effect.
- `showlegend`: Determines whether or not an item corresponding to this trace is shown in the legend.
- `stream`: 
- `text`: Sets text elements associated with each (x,y) pair. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates. If trace `hoverinfo` contains a *text* flag and *hovertext* is not set, these elements will be seen in the hover labels.
- `textangle`: Sets the angle of the tick labels with respect to the bar. For example, a `tickangle` of -90 draws the tick labels vertically. With *auto* the texts may automatically be rotated to fit with the maximum size in bars.
- `textfont`: Sets the font used for `text`.
- `textinfo`: Determines which trace information appear on the graph. In the case of having multiple funnels, percentages & totals are computed separately (per trace).
- `textposition`: Specifies the location of the `text`. *inside* positions `text` inside, next to the bar end (rotated and scaled if needed). *outside* positions `text` outside, next to the bar end (scaled if needed), unless there is another bar stacked on this one, then the text gets pushed inside. *auto* tries to position `text` inside the bar, but if the bar is too small and no bar is stacked on this one the text is moved outside.
- `textpositionsrc`: Sets the source reference on Chart Studio Cloud for  textposition .
- `textsrc`: Sets the source reference on Chart Studio Cloud for  text .
- `texttemplate`: Template string used for rendering the information text that appear on points. Note that this will override `textinfo`. Variables are inserted using %{variable}, for example "y: %{y}". Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example "Price: %{y:$.2f}". https://github.com/d3/d3-3.x-api-reference/blob/master/Formatting.md#d3_format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example "Day: %{2019-01-01|%A}". https://github.com/d3/d3-time-format#locale_format for details on the date formatting syntax. Every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. variables `percentInitial`, `percentPrevious`, `percentTotal`, `label` and `value`.
- `texttemplatesrc`: Sets the source reference on Chart Studio Cloud for  texttemplate .
- `transforms`: 
- `type`: funnel
- `uid`: Assign an id to this trace, Use this to provide object constancy between traces during animations and transitions.
- `uirevision`: Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves.
- `visible`: Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).
- `width`: Sets the bar width (in position axis units).
- `x`: Sets the x coordinates.
- `x0`: Alternate to `x`. Builds a linear space of x coordinates. Use with `dx` where `x0` is the starting coordinate and `dx` the step.
- `xaxis`: Sets a reference between this trace's x coordinates and a 2D cartesian x axis. If *x* (the default value), the x coordinates refer to `layout.xaxis`. If *x2*, the x coordinates refer to `layout.xaxis2`, and so on.
- `xperiod`: Only relevant when the axis `type` is *date*. Sets the period positioning in milliseconds or *M<n>* on the x axis. Special values in the form of *M<n>* could be used to declare the number of months. In this case `n` must be a positive integer.
- `xperiod0`: Only relevant when the axis `type` is *date*. Sets the base for period positioning in milliseconds or date string on the x0 axis. When `x0period` is round number of weeks, the `x0period0` by default would be on a Sunday i.e. 2000-01-02, otherwise it would be at 2000-01-01.
- `xperiodalignment`: Only relevant when the axis `type` is *date*. Sets the alignment of data points on the x axis.
- `xsrc`: Sets the source reference on Chart Studio Cloud for  x .
- `y`: Sets the y coordinates.
- `y0`: Alternate to `y`. Builds a linear space of y coordinates. Use with `dy` where `y0` is the starting coordinate and `dy` the step.
- `yaxis`: Sets a reference between this trace's y coordinates and a 2D cartesian y axis. If *y* (the default value), the y coordinates refer to `layout.yaxis`. If *y2*, the y coordinates refer to `layout.yaxis2`, and so on.
- `yperiod`: Only relevant when the axis `type` is *date*. Sets the period positioning in milliseconds or *M<n>* on the y axis. Special values in the form of *M<n>* could be used to declare the number of months. In this case `n` must be a positive integer.
- `yperiod0`: Only relevant when the axis `type` is *date*. Sets the base for period positioning in milliseconds or date string on the y0 axis. When `y0period` is round number of weeks, the `y0period0` by default would be on a Sunday i.e. 2000-01-02, otherwise it would be at 2000-01-01.
- `yperiodalignment`: Only relevant when the axis `type` is *date*. Sets the alignment of data points on the y axis.
- `ysrc`: Sets the source reference on Chart Studio Cloud for  y .

"""
function funnel(; kw...)
    for k in keys(kw)
        k in (:alignmentgroup, :cliponaxis, :connector, :constraintext, :customdata, :customdatasrc, :dx, :dy, :hoverinfo, :hoverinfosrc, :hoverlabel, :hovertemplate, :hovertemplatesrc, :hovertext, :hovertextsrc, :ids, :idssrc, :insidetextanchor, :insidetextfont, :legendgroup, :marker, :meta, :metasrc, :name, :offset, :offsetgroup, :opacity, :orientation, :outsidetextfont, :selectedpoints, :showlegend, :stream, :text, :textangle, :textfont, :textinfo, :textposition, :textpositionsrc, :textsrc, :texttemplate, :texttemplatesrc, :transforms, :type, :uid, :uirevision, :visible, :width, :x, :x0, :xaxis, :xperiod, :xperiod0, :xperiodalignment, :xsrc, :y, :y0, :yaxis, :yperiod, :yperiod0, :yperiodalignment, :ysrc) || @warn "Function `funnel` does not have attribute `$k`"
    end
    Plot(; type=:funnel, kw...)
end

#-----------------------------------------------------------------------------# funnelarea
export funnelarea
"""
    funnelarea(; kw...) --> Plot(type=:funnelarea, kw...)

Create a Plotly trace of type `funnelarea` with the given `kw` attributes.  Attributes will be
validated against the Plotly schema.  Available attributes for `funnelarea` are:

- `aspectratio`: Sets the ratio between height and width
- `baseratio`: Sets the ratio between bottom length and maximum top length.
- `customdata`: Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, *scatter* traces also appends customdata items in the markers DOM elements
- `customdatasrc`: Sets the source reference on Chart Studio Cloud for  customdata .
- `dlabel`: Sets the label step. See `label0` for more info.
- `domain`: 
- `hoverinfo`: Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.
- `hoverinfosrc`: Sets the source reference on Chart Studio Cloud for  hoverinfo .
- `hoverlabel`: 
- `hovertemplate`: Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example "y: %{y}". Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example "Price: %{y:$.2f}". https://github.com/d3/d3-3.x-api-reference/blob/master/Formatting.md#d3_format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example "Day: %{2019-01-01|%A}". https://github.com/d3/d3-time-format#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. variables `label`, `color`, `value`, `text` and `percent`. Anything contained in tag `<extra>` is displayed in the secondary box, for example "<extra>{fullData.name}</extra>". To hide the secondary box completely, use an empty tag `<extra></extra>`.
- `hovertemplatesrc`: Sets the source reference on Chart Studio Cloud for  hovertemplate .
- `hovertext`: Sets hover text elements associated with each sector. If a single string, the same string appears for all data points. If an array of string, the items are mapped in order of this trace's sectors. To be seen, trace `hoverinfo` must contain a *text* flag.
- `hovertextsrc`: Sets the source reference on Chart Studio Cloud for  hovertext .
- `ids`: Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.
- `idssrc`: Sets the source reference on Chart Studio Cloud for  ids .
- `insidetextfont`: Sets the font used for `textinfo` lying inside the sector.
- `label0`: Alternate to `labels`. Builds a numeric set of labels. Use with `dlabel` where `label0` is the starting label and `dlabel` the step.
- `labels`: Sets the sector labels. If `labels` entries are duplicated, we sum associated `values` or simply count occurrences if `values` is not provided. For other array attributes (including color) we use the first non-empty entry among all occurrences of the label.
- `labelssrc`: Sets the source reference on Chart Studio Cloud for  labels .
- `legendgroup`: Sets the legend group for this trace. Traces part of the same legend group hide/show at the same time when toggling legend items.
- `marker`: 
- `meta`: Assigns extra meta information associated with this trace that can be used in various text attributes. Attributes such as trace `name`, graph, axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues` and `sliders` `label` text all support `meta`. To access the trace `meta` values in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the index or key of the `meta` item in question. To access trace `meta` in layout attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta` and `n` is the trace index.
- `metasrc`: Sets the source reference on Chart Studio Cloud for  meta .
- `name`: Sets the trace name. The trace name appear as the legend item and on hover.
- `opacity`: Sets the opacity of the trace.
- `scalegroup`: If there are multiple funnelareas that should be sized according to their totals, link them by providing a non-empty group id here shared by every trace in the same group.
- `showlegend`: Determines whether or not an item corresponding to this trace is shown in the legend.
- `stream`: 
- `text`: Sets text elements associated with each sector. If trace `textinfo` contains a *text* flag, these elements will be seen on the chart. If trace `hoverinfo` contains a *text* flag and *hovertext* is not set, these elements will be seen in the hover labels.
- `textfont`: Sets the font used for `textinfo`.
- `textinfo`: Determines which trace information appear on the graph.
- `textposition`: Specifies the location of the `textinfo`.
- `textpositionsrc`: Sets the source reference on Chart Studio Cloud for  textposition .
- `textsrc`: Sets the source reference on Chart Studio Cloud for  text .
- `texttemplate`: Template string used for rendering the information text that appear on points. Note that this will override `textinfo`. Variables are inserted using %{variable}, for example "y: %{y}". Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example "Price: %{y:$.2f}". https://github.com/d3/d3-3.x-api-reference/blob/master/Formatting.md#d3_format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example "Day: %{2019-01-01|%A}". https://github.com/d3/d3-time-format#locale_format for details on the date formatting syntax. Every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. variables `label`, `color`, `value`, `text` and `percent`.
- `texttemplatesrc`: Sets the source reference on Chart Studio Cloud for  texttemplate .
- `title`: 
- `transforms`: 
- `type`: funnelarea
- `uid`: Assign an id to this trace, Use this to provide object constancy between traces during animations and transitions.
- `uirevision`: Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves.
- `values`: Sets the values of the sectors. If omitted, we count occurrences of each label.
- `valuessrc`: Sets the source reference on Chart Studio Cloud for  values .
- `visible`: Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).

"""
function funnelarea(; kw...)
    for k in keys(kw)
        k in (:aspectratio, :baseratio, :customdata, :customdatasrc, :dlabel, :domain, :hoverinfo, :hoverinfosrc, :hoverlabel, :hovertemplate, :hovertemplatesrc, :hovertext, :hovertextsrc, :ids, :idssrc, :insidetextfont, :label0, :labels, :labelssrc, :legendgroup, :marker, :meta, :metasrc, :name, :opacity, :scalegroup, :showlegend, :stream, :text, :textfont, :textinfo, :textposition, :textpositionsrc, :textsrc, :texttemplate, :texttemplatesrc, :title, :transforms, :type, :uid, :uirevision, :values, :valuessrc, :visible) || @warn "Function `funnelarea` does not have attribute `$k`"
    end
    Plot(; type=:funnelarea, kw...)
end

#-----------------------------------------------------------------------------# heatmap
export heatmap
"""
    heatmap(; kw...) --> Plot(type=:heatmap, kw...)

Create a Plotly trace of type `heatmap` with the given `kw` attributes.  Attributes will be
validated against the Plotly schema.  Available attributes for `heatmap` are:

- `autocolorscale`: Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `colorscale`. In case `colorscale` is unspecified or `autocolorscale` is true, the default  palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.
- `coloraxis`: Sets a reference to a shared color axis. References to these shared color axes are *coloraxis*, *coloraxis2*, *coloraxis3*, etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.
- `colorbar`: 
- `colorscale`: Sets the colorscale. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use`zmin` and `zmax`. Alternatively, `colorscale` may be a palette name string of the following list: Greys,YlGnBu,Greens,YlOrRd,Bluered,RdBu,Reds,Blues,Picnic,Rainbow,Portland,Jet,Hot,Blackbody,Earth,Electric,Viridis,Cividis.
- `connectgaps`: Determines whether or not gaps (i.e. {nan} or missing values) in the `z` data are filled in. It is defaulted to true if `z` is a one dimensional array and `zsmooth` is not false; otherwise it is defaulted to false.
- `customdata`: Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, *scatter* traces also appends customdata items in the markers DOM elements
- `customdatasrc`: Sets the source reference on Chart Studio Cloud for  customdata .
- `dx`: Sets the x coordinate step. See `x0` for more info.
- `dy`: Sets the y coordinate step. See `y0` for more info.
- `hoverinfo`: Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.
- `hoverinfosrc`: Sets the source reference on Chart Studio Cloud for  hoverinfo .
- `hoverlabel`: 
- `hoverongaps`: Determines whether or not gaps (i.e. {nan} or missing values) in the `z` data have hover labels associated with them.
- `hovertemplate`: Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example "y: %{y}". Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example "Price: %{y:$.2f}". https://github.com/d3/d3-3.x-api-reference/blob/master/Formatting.md#d3_format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example "Day: %{2019-01-01|%A}". https://github.com/d3/d3-time-format#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available.  Anything contained in tag `<extra>` is displayed in the secondary box, for example "<extra>{fullData.name}</extra>". To hide the secondary box completely, use an empty tag `<extra></extra>`.
- `hovertemplatesrc`: Sets the source reference on Chart Studio Cloud for  hovertemplate .
- `hovertext`: Same as `text`.
- `hovertextsrc`: Sets the source reference on Chart Studio Cloud for  hovertext .
- `ids`: Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.
- `idssrc`: Sets the source reference on Chart Studio Cloud for  ids .
- `legendgroup`: Sets the legend group for this trace. Traces part of the same legend group hide/show at the same time when toggling legend items.
- `meta`: Assigns extra meta information associated with this trace that can be used in various text attributes. Attributes such as trace `name`, graph, axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues` and `sliders` `label` text all support `meta`. To access the trace `meta` values in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the index or key of the `meta` item in question. To access trace `meta` in layout attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta` and `n` is the trace index.
- `metasrc`: Sets the source reference on Chart Studio Cloud for  meta .
- `name`: Sets the trace name. The trace name appear as the legend item and on hover.
- `opacity`: Sets the opacity of the trace.
- `reversescale`: Reverses the color mapping if true. If true, `zmin` will correspond to the last color in the array and `zmax` will correspond to the first color.
- `showlegend`: Determines whether or not an item corresponding to this trace is shown in the legend.
- `showscale`: Determines whether or not a colorbar is displayed for this trace.
- `stream`: 
- `text`: Sets the text elements associated with each z value.
- `textsrc`: Sets the source reference on Chart Studio Cloud for  text .
- `transforms`: 
- `transpose`: Transposes the z data.
- `type`: heatmap
- `uid`: Assign an id to this trace, Use this to provide object constancy between traces during animations and transitions.
- `uirevision`: Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves.
- `visible`: Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).
- `x`: Sets the x coordinates.
- `x0`: Alternate to `x`. Builds a linear space of x coordinates. Use with `dx` where `x0` is the starting coordinate and `dx` the step.
- `xaxis`: Sets a reference between this trace's x coordinates and a 2D cartesian x axis. If *x* (the default value), the x coordinates refer to `layout.xaxis`. If *x2*, the x coordinates refer to `layout.xaxis2`, and so on.
- `xcalendar`: Sets the calendar system to use with `x` date data.
- `xgap`: Sets the horizontal gap (in pixels) between bricks.
- `xperiod`: Only relevant when the axis `type` is *date*. Sets the period positioning in milliseconds or *M<n>* on the x axis. Special values in the form of *M<n>* could be used to declare the number of months. In this case `n` must be a positive integer.
- `xperiod0`: Only relevant when the axis `type` is *date*. Sets the base for period positioning in milliseconds or date string on the x0 axis. When `x0period` is round number of weeks, the `x0period0` by default would be on a Sunday i.e. 2000-01-02, otherwise it would be at 2000-01-01.
- `xperiodalignment`: Only relevant when the axis `type` is *date*. Sets the alignment of data points on the x axis.
- `xsrc`: Sets the source reference on Chart Studio Cloud for  x .
- `xtype`: If *array*, the heatmap's x coordinates are given by *x* (the default behavior when `x` is provided). If *scaled*, the heatmap's x coordinates are given by *x0* and *dx* (the default behavior when `x` is not provided).
- `y`: Sets the y coordinates.
- `y0`: Alternate to `y`. Builds a linear space of y coordinates. Use with `dy` where `y0` is the starting coordinate and `dy` the step.
- `yaxis`: Sets a reference between this trace's y coordinates and a 2D cartesian y axis. If *y* (the default value), the y coordinates refer to `layout.yaxis`. If *y2*, the y coordinates refer to `layout.yaxis2`, and so on.
- `ycalendar`: Sets the calendar system to use with `y` date data.
- `ygap`: Sets the vertical gap (in pixels) between bricks.
- `yperiod`: Only relevant when the axis `type` is *date*. Sets the period positioning in milliseconds or *M<n>* on the y axis. Special values in the form of *M<n>* could be used to declare the number of months. In this case `n` must be a positive integer.
- `yperiod0`: Only relevant when the axis `type` is *date*. Sets the base for period positioning in milliseconds or date string on the y0 axis. When `y0period` is round number of weeks, the `y0period0` by default would be on a Sunday i.e. 2000-01-02, otherwise it would be at 2000-01-01.
- `yperiodalignment`: Only relevant when the axis `type` is *date*. Sets the alignment of data points on the y axis.
- `ysrc`: Sets the source reference on Chart Studio Cloud for  y .
- `ytype`: If *array*, the heatmap's y coordinates are given by *y* (the default behavior when `y` is provided) If *scaled*, the heatmap's y coordinates are given by *y0* and *dy* (the default behavior when `y` is not provided)
- `z`: Sets the z data.
- `zauto`: Determines whether or not the color domain is computed with respect to the input data (here in `z`) or the bounds set in `zmin` and `zmax`  Defaults to `false` when `zmin` and `zmax` are set by the user.
- `zhoverformat`: Sets the hover text formatting rule using d3 formatting mini-languages which are very similar to those in Python. See: https://github.com/d3/d3-3.x-api-reference/blob/master/Formatting.md#d3_format
- `zmax`: Sets the upper bound of the color domain. Value should have the same units as in `z` and if set, `zmin` must be set as well.
- `zmid`: Sets the mid-point of the color domain by scaling `zmin` and/or `zmax` to be equidistant to this point. Value should have the same units as in `z`. Has no effect when `zauto` is `false`.
- `zmin`: Sets the lower bound of the color domain. Value should have the same units as in `z` and if set, `zmax` must be set as well.
- `zsmooth`: Picks a smoothing algorithm use to smooth `z` data.
- `zsrc`: Sets the source reference on Chart Studio Cloud for  z .

"""
function heatmap(; kw...)
    for k in keys(kw)
        k in (:autocolorscale, :coloraxis, :colorbar, :colorscale, :connectgaps, :customdata, :customdatasrc, :dx, :dy, :hoverinfo, :hoverinfosrc, :hoverlabel, :hoverongaps, :hovertemplate, :hovertemplatesrc, :hovertext, :hovertextsrc, :ids, :idssrc, :legendgroup, :meta, :metasrc, :name, :opacity, :reversescale, :showlegend, :showscale, :stream, :text, :textsrc, :transforms, :transpose, :type, :uid, :uirevision, :visible, :x, :x0, :xaxis, :xcalendar, :xgap, :xperiod, :xperiod0, :xperiodalignment, :xsrc, :xtype, :y, :y0, :yaxis, :ycalendar, :ygap, :yperiod, :yperiod0, :yperiodalignment, :ysrc, :ytype, :z, :zauto, :zhoverformat, :zmax, :zmid, :zmin, :zsmooth, :zsrc) || @warn "Function `heatmap` does not have attribute `$k`"
    end
    Plot(; type=:heatmap, kw...)
end

#-----------------------------------------------------------------------------# heatmapgl
export heatmapgl
"""
    heatmapgl(; kw...) --> Plot(type=:heatmapgl, kw...)

Create a Plotly trace of type `heatmapgl` with the given `kw` attributes.  Attributes will be
validated against the Plotly schema.  Available attributes for `heatmapgl` are:

- `autocolorscale`: Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `colorscale`. In case `colorscale` is unspecified or `autocolorscale` is true, the default  palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.
- `coloraxis`: Sets a reference to a shared color axis. References to these shared color axes are *coloraxis*, *coloraxis2*, *coloraxis3*, etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.
- `colorbar`: 
- `colorscale`: Sets the colorscale. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use`zmin` and `zmax`. Alternatively, `colorscale` may be a palette name string of the following list: Greys,YlGnBu,Greens,YlOrRd,Bluered,RdBu,Reds,Blues,Picnic,Rainbow,Portland,Jet,Hot,Blackbody,Earth,Electric,Viridis,Cividis.
- `customdata`: Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, *scatter* traces also appends customdata items in the markers DOM elements
- `customdatasrc`: Sets the source reference on Chart Studio Cloud for  customdata .
- `dx`: Sets the x coordinate step. See `x0` for more info.
- `dy`: Sets the y coordinate step. See `y0` for more info.
- `hoverinfo`: Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.
- `hoverinfosrc`: Sets the source reference on Chart Studio Cloud for  hoverinfo .
- `hoverlabel`: 
- `ids`: Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.
- `idssrc`: Sets the source reference on Chart Studio Cloud for  ids .
- `meta`: Assigns extra meta information associated with this trace that can be used in various text attributes. Attributes such as trace `name`, graph, axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues` and `sliders` `label` text all support `meta`. To access the trace `meta` values in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the index or key of the `meta` item in question. To access trace `meta` in layout attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta` and `n` is the trace index.
- `metasrc`: Sets the source reference on Chart Studio Cloud for  meta .
- `name`: Sets the trace name. The trace name appear as the legend item and on hover.
- `opacity`: Sets the opacity of the trace.
- `reversescale`: Reverses the color mapping if true. If true, `zmin` will correspond to the last color in the array and `zmax` will correspond to the first color.
- `showscale`: Determines whether or not a colorbar is displayed for this trace.
- `stream`: 
- `text`: Sets the text elements associated with each z value.
- `textsrc`: Sets the source reference on Chart Studio Cloud for  text .
- `transforms`: 
- `transpose`: Transposes the z data.
- `type`: heatmapgl
- `uid`: Assign an id to this trace, Use this to provide object constancy between traces during animations and transitions.
- `uirevision`: Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves.
- `visible`: Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).
- `x`: Sets the x coordinates.
- `x0`: Alternate to `x`. Builds a linear space of x coordinates. Use with `dx` where `x0` is the starting coordinate and `dx` the step.
- `xaxis`: Sets a reference between this trace's x coordinates and a 2D cartesian x axis. If *x* (the default value), the x coordinates refer to `layout.xaxis`. If *x2*, the x coordinates refer to `layout.xaxis2`, and so on.
- `xsrc`: Sets the source reference on Chart Studio Cloud for  x .
- `xtype`: If *array*, the heatmap's x coordinates are given by *x* (the default behavior when `x` is provided). If *scaled*, the heatmap's x coordinates are given by *x0* and *dx* (the default behavior when `x` is not provided).
- `y`: Sets the y coordinates.
- `y0`: Alternate to `y`. Builds a linear space of y coordinates. Use with `dy` where `y0` is the starting coordinate and `dy` the step.
- `yaxis`: Sets a reference between this trace's y coordinates and a 2D cartesian y axis. If *y* (the default value), the y coordinates refer to `layout.yaxis`. If *y2*, the y coordinates refer to `layout.yaxis2`, and so on.
- `ysrc`: Sets the source reference on Chart Studio Cloud for  y .
- `ytype`: If *array*, the heatmap's y coordinates are given by *y* (the default behavior when `y` is provided) If *scaled*, the heatmap's y coordinates are given by *y0* and *dy* (the default behavior when `y` is not provided)
- `z`: Sets the z data.
- `zauto`: Determines whether or not the color domain is computed with respect to the input data (here in `z`) or the bounds set in `zmin` and `zmax`  Defaults to `false` when `zmin` and `zmax` are set by the user.
- `zmax`: Sets the upper bound of the color domain. Value should have the same units as in `z` and if set, `zmin` must be set as well.
- `zmid`: Sets the mid-point of the color domain by scaling `zmin` and/or `zmax` to be equidistant to this point. Value should have the same units as in `z`. Has no effect when `zauto` is `false`.
- `zmin`: Sets the lower bound of the color domain. Value should have the same units as in `z` and if set, `zmax` must be set as well.
- `zsmooth`: Picks a smoothing algorithm use to smooth `z` data.
- `zsrc`: Sets the source reference on Chart Studio Cloud for  z .

"""
function heatmapgl(; kw...)
    for k in keys(kw)
        k in (:autocolorscale, :coloraxis, :colorbar, :colorscale, :customdata, :customdatasrc, :dx, :dy, :hoverinfo, :hoverinfosrc, :hoverlabel, :ids, :idssrc, :meta, :metasrc, :name, :opacity, :reversescale, :showscale, :stream, :text, :textsrc, :transforms, :transpose, :type, :uid, :uirevision, :visible, :x, :x0, :xaxis, :xsrc, :xtype, :y, :y0, :yaxis, :ysrc, :ytype, :z, :zauto, :zmax, :zmid, :zmin, :zsmooth, :zsrc) || @warn "Function `heatmapgl` does not have attribute `$k`"
    end
    Plot(; type=:heatmapgl, kw...)
end

#-----------------------------------------------------------------------------# histogram
export histogram
"""
    histogram(; kw...) --> Plot(type=:histogram, kw...)

Create a Plotly trace of type `histogram` with the given `kw` attributes.  Attributes will be
validated against the Plotly schema.  Available attributes for `histogram` are:

- `_deprecated`: 
- `alignmentgroup`: Set several traces linked to the same position axis or matching axes to the same alignmentgroup. This controls whether bars compute their positional range dependently or independently.
- `autobinx`: Obsolete: since v1.42 each bin attribute is auto-determined separately and `autobinx` is not needed. However, we accept `autobinx: true` or `false` and will update `xbins` accordingly before deleting `autobinx` from the trace.
- `autobiny`: Obsolete: since v1.42 each bin attribute is auto-determined separately and `autobiny` is not needed. However, we accept `autobiny: true` or `false` and will update `ybins` accordingly before deleting `autobiny` from the trace.
- `bingroup`: Set a group of histogram traces which will have compatible bin settings. Note that traces on the same subplot and with the same *orientation* under `barmode` *stack*, *relative* and *group* are forced into the same bingroup, Using `bingroup`, traces under `barmode` *overlay* and on different axes (of the same axis type) can have compatible bin settings. Note that histogram and histogram2d* trace can share the same `bingroup`
- `cumulative`: 
- `customdata`: Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, *scatter* traces also appends customdata items in the markers DOM elements
- `customdatasrc`: Sets the source reference on Chart Studio Cloud for  customdata .
- `error_x`: 
- `error_y`: 
- `histfunc`: Specifies the binning function used for this histogram trace. If *count*, the histogram values are computed by counting the number of values lying inside each bin. If *sum*, *avg*, *min*, *max*, the histogram values are computed using the sum, the average, the minimum or the maximum of the values lying inside each bin respectively.
- `histnorm`: Specifies the type of normalization used for this histogram trace. If **, the span of each bar corresponds to the number of occurrences (i.e. the number of data points lying inside the bins). If *percent* / *probability*, the span of each bar corresponds to the percentage / fraction of occurrences with respect to the total number of sample points (here, the sum of all bin HEIGHTS equals 100% / 1). If *density*, the span of each bar corresponds to the number of occurrences in a bin divided by the size of the bin interval (here, the sum of all bin AREAS equals the total number of sample points). If *probability density*, the area of each bar corresponds to the probability that an event will fall into the corresponding bin (here, the sum of all bin AREAS equals 1).
- `hoverinfo`: Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.
- `hoverinfosrc`: Sets the source reference on Chart Studio Cloud for  hoverinfo .
- `hoverlabel`: 
- `hovertemplate`: Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example "y: %{y}". Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example "Price: %{y:$.2f}". https://github.com/d3/d3-3.x-api-reference/blob/master/Formatting.md#d3_format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example "Day: %{2019-01-01|%A}". https://github.com/d3/d3-time-format#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. variable `binNumber` Anything contained in tag `<extra>` is displayed in the secondary box, for example "<extra>{fullData.name}</extra>". To hide the secondary box completely, use an empty tag `<extra></extra>`.
- `hovertemplatesrc`: Sets the source reference on Chart Studio Cloud for  hovertemplate .
- `hovertext`: Same as `text`.
- `hovertextsrc`: Sets the source reference on Chart Studio Cloud for  hovertext .
- `ids`: Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.
- `idssrc`: Sets the source reference on Chart Studio Cloud for  ids .
- `legendgroup`: Sets the legend group for this trace. Traces part of the same legend group hide/show at the same time when toggling legend items.
- `marker`: 
- `meta`: Assigns extra meta information associated with this trace that can be used in various text attributes. Attributes such as trace `name`, graph, axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues` and `sliders` `label` text all support `meta`. To access the trace `meta` values in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the index or key of the `meta` item in question. To access trace `meta` in layout attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta` and `n` is the trace index.
- `metasrc`: Sets the source reference on Chart Studio Cloud for  meta .
- `name`: Sets the trace name. The trace name appear as the legend item and on hover.
- `nbinsx`: Specifies the maximum number of desired bins. This value will be used in an algorithm that will decide the optimal bin size such that the histogram best visualizes the distribution of the data. Ignored if `xbins.size` is provided.
- `nbinsy`: Specifies the maximum number of desired bins. This value will be used in an algorithm that will decide the optimal bin size such that the histogram best visualizes the distribution of the data. Ignored if `ybins.size` is provided.
- `offsetgroup`: Set several traces linked to the same position axis or matching axes to the same offsetgroup where bars of the same position coordinate will line up.
- `opacity`: Sets the opacity of the trace.
- `orientation`: Sets the orientation of the bars. With *v* (*h*), the value of the each bar spans along the vertical (horizontal).
- `selected`: 
- `selectedpoints`: Array containing integer indices of selected points. Has an effect only for traces that support selections. Note that an empty array means an empty selection where the `unselected` are turned on for all points, whereas, any other non-array values means no selection all where the `selected` and `unselected` styles have no effect.
- `showlegend`: Determines whether or not an item corresponding to this trace is shown in the legend.
- `stream`: 
- `text`: Sets hover text elements associated with each bar. If a single string, the same string appears over all bars. If an array of string, the items are mapped in order to the this trace's coordinates.
- `textsrc`: Sets the source reference on Chart Studio Cloud for  text .
- `transforms`: 
- `type`: histogram
- `uid`: Assign an id to this trace, Use this to provide object constancy between traces during animations and transitions.
- `uirevision`: Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves.
- `unselected`: 
- `visible`: Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).
- `x`: Sets the sample data to be binned on the x axis.
- `xaxis`: Sets a reference between this trace's x coordinates and a 2D cartesian x axis. If *x* (the default value), the x coordinates refer to `layout.xaxis`. If *x2*, the x coordinates refer to `layout.xaxis2`, and so on.
- `xbins`: 
- `xcalendar`: Sets the calendar system to use with `x` date data.
- `xsrc`: Sets the source reference on Chart Studio Cloud for  x .
- `y`: Sets the sample data to be binned on the y axis.
- `yaxis`: Sets a reference between this trace's y coordinates and a 2D cartesian y axis. If *y* (the default value), the y coordinates refer to `layout.yaxis`. If *y2*, the y coordinates refer to `layout.yaxis2`, and so on.
- `ybins`: 
- `ycalendar`: Sets the calendar system to use with `y` date data.
- `ysrc`: Sets the source reference on Chart Studio Cloud for  y .

"""
function histogram(; kw...)
    for k in keys(kw)
        k in (:_deprecated, :alignmentgroup, :autobinx, :autobiny, :bingroup, :cumulative, :customdata, :customdatasrc, :error_x, :error_y, :histfunc, :histnorm, :hoverinfo, :hoverinfosrc, :hoverlabel, :hovertemplate, :hovertemplatesrc, :hovertext, :hovertextsrc, :ids, :idssrc, :legendgroup, :marker, :meta, :metasrc, :name, :nbinsx, :nbinsy, :offsetgroup, :opacity, :orientation, :selected, :selectedpoints, :showlegend, :stream, :text, :textsrc, :transforms, :type, :uid, :uirevision, :unselected, :visible, :x, :xaxis, :xbins, :xcalendar, :xsrc, :y, :yaxis, :ybins, :ycalendar, :ysrc) || @warn "Function `histogram` does not have attribute `$k`"
    end
    Plot(; type=:histogram, kw...)
end

#-----------------------------------------------------------------------------# histogram2d
export histogram2d
"""
    histogram2d(; kw...) --> Plot(type=:histogram2d, kw...)

Create a Plotly trace of type `histogram2d` with the given `kw` attributes.  Attributes will be
validated against the Plotly schema.  Available attributes for `histogram2d` are:

- `autobinx`: Obsolete: since v1.42 each bin attribute is auto-determined separately and `autobinx` is not needed. However, we accept `autobinx: true` or `false` and will update `xbins` accordingly before deleting `autobinx` from the trace.
- `autobiny`: Obsolete: since v1.42 each bin attribute is auto-determined separately and `autobiny` is not needed. However, we accept `autobiny: true` or `false` and will update `ybins` accordingly before deleting `autobiny` from the trace.
- `autocolorscale`: Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `colorscale`. In case `colorscale` is unspecified or `autocolorscale` is true, the default  palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.
- `bingroup`: Set the `xbingroup` and `ybingroup` default prefix For example, setting a `bingroup` of *1* on two histogram2d traces will make them their x-bins and y-bins match separately.
- `coloraxis`: Sets a reference to a shared color axis. References to these shared color axes are *coloraxis*, *coloraxis2*, *coloraxis3*, etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.
- `colorbar`: 
- `colorscale`: Sets the colorscale. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use`zmin` and `zmax`. Alternatively, `colorscale` may be a palette name string of the following list: Greys,YlGnBu,Greens,YlOrRd,Bluered,RdBu,Reds,Blues,Picnic,Rainbow,Portland,Jet,Hot,Blackbody,Earth,Electric,Viridis,Cividis.
- `customdata`: Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, *scatter* traces also appends customdata items in the markers DOM elements
- `customdatasrc`: Sets the source reference on Chart Studio Cloud for  customdata .
- `histfunc`: Specifies the binning function used for this histogram trace. If *count*, the histogram values are computed by counting the number of values lying inside each bin. If *sum*, *avg*, *min*, *max*, the histogram values are computed using the sum, the average, the minimum or the maximum of the values lying inside each bin respectively.
- `histnorm`: Specifies the type of normalization used for this histogram trace. If **, the span of each bar corresponds to the number of occurrences (i.e. the number of data points lying inside the bins). If *percent* / *probability*, the span of each bar corresponds to the percentage / fraction of occurrences with respect to the total number of sample points (here, the sum of all bin HEIGHTS equals 100% / 1). If *density*, the span of each bar corresponds to the number of occurrences in a bin divided by the size of the bin interval (here, the sum of all bin AREAS equals the total number of sample points). If *probability density*, the area of each bar corresponds to the probability that an event will fall into the corresponding bin (here, the sum of all bin AREAS equals 1).
- `hoverinfo`: Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.
- `hoverinfosrc`: Sets the source reference on Chart Studio Cloud for  hoverinfo .
- `hoverlabel`: 
- `hovertemplate`: Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example "y: %{y}". Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example "Price: %{y:$.2f}". https://github.com/d3/d3-3.x-api-reference/blob/master/Formatting.md#d3_format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example "Day: %{2019-01-01|%A}". https://github.com/d3/d3-time-format#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. variable `z` Anything contained in tag `<extra>` is displayed in the secondary box, for example "<extra>{fullData.name}</extra>". To hide the secondary box completely, use an empty tag `<extra></extra>`.
- `hovertemplatesrc`: Sets the source reference on Chart Studio Cloud for  hovertemplate .
- `ids`: Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.
- `idssrc`: Sets the source reference on Chart Studio Cloud for  ids .
- `legendgroup`: Sets the legend group for this trace. Traces part of the same legend group hide/show at the same time when toggling legend items.
- `marker`: 
- `meta`: Assigns extra meta information associated with this trace that can be used in various text attributes. Attributes such as trace `name`, graph, axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues` and `sliders` `label` text all support `meta`. To access the trace `meta` values in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the index or key of the `meta` item in question. To access trace `meta` in layout attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta` and `n` is the trace index.
- `metasrc`: Sets the source reference on Chart Studio Cloud for  meta .
- `name`: Sets the trace name. The trace name appear as the legend item and on hover.
- `nbinsx`: Specifies the maximum number of desired bins. This value will be used in an algorithm that will decide the optimal bin size such that the histogram best visualizes the distribution of the data. Ignored if `xbins.size` is provided.
- `nbinsy`: Specifies the maximum number of desired bins. This value will be used in an algorithm that will decide the optimal bin size such that the histogram best visualizes the distribution of the data. Ignored if `ybins.size` is provided.
- `opacity`: Sets the opacity of the trace.
- `reversescale`: Reverses the color mapping if true. If true, `zmin` will correspond to the last color in the array and `zmax` will correspond to the first color.
- `showlegend`: Determines whether or not an item corresponding to this trace is shown in the legend.
- `showscale`: Determines whether or not a colorbar is displayed for this trace.
- `stream`: 
- `transforms`: 
- `type`: histogram2d
- `uid`: Assign an id to this trace, Use this to provide object constancy between traces during animations and transitions.
- `uirevision`: Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves.
- `visible`: Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).
- `x`: Sets the sample data to be binned on the x axis.
- `xaxis`: Sets a reference between this trace's x coordinates and a 2D cartesian x axis. If *x* (the default value), the x coordinates refer to `layout.xaxis`. If *x2*, the x coordinates refer to `layout.xaxis2`, and so on.
- `xbingroup`: Set a group of histogram traces which will have compatible x-bin settings. Using `xbingroup`, histogram2d and histogram2dcontour traces  (on axes of the same axis type) can have compatible x-bin settings. Note that the same `xbingroup` value can be used to set (1D) histogram `bingroup`
- `xbins`: 
- `xcalendar`: Sets the calendar system to use with `x` date data.
- `xgap`: Sets the horizontal gap (in pixels) between bricks.
- `xsrc`: Sets the source reference on Chart Studio Cloud for  x .
- `y`: Sets the sample data to be binned on the y axis.
- `yaxis`: Sets a reference between this trace's y coordinates and a 2D cartesian y axis. If *y* (the default value), the y coordinates refer to `layout.yaxis`. If *y2*, the y coordinates refer to `layout.yaxis2`, and so on.
- `ybingroup`: Set a group of histogram traces which will have compatible y-bin settings. Using `ybingroup`, histogram2d and histogram2dcontour traces  (on axes of the same axis type) can have compatible y-bin settings. Note that the same `ybingroup` value can be used to set (1D) histogram `bingroup`
- `ybins`: 
- `ycalendar`: Sets the calendar system to use with `y` date data.
- `ygap`: Sets the vertical gap (in pixels) between bricks.
- `ysrc`: Sets the source reference on Chart Studio Cloud for  y .
- `z`: Sets the aggregation data.
- `zauto`: Determines whether or not the color domain is computed with respect to the input data (here in `z`) or the bounds set in `zmin` and `zmax`  Defaults to `false` when `zmin` and `zmax` are set by the user.
- `zhoverformat`: Sets the hover text formatting rule using d3 formatting mini-languages which are very similar to those in Python. See: https://github.com/d3/d3-3.x-api-reference/blob/master/Formatting.md#d3_format
- `zmax`: Sets the upper bound of the color domain. Value should have the same units as in `z` and if set, `zmin` must be set as well.
- `zmid`: Sets the mid-point of the color domain by scaling `zmin` and/or `zmax` to be equidistant to this point. Value should have the same units as in `z`. Has no effect when `zauto` is `false`.
- `zmin`: Sets the lower bound of the color domain. Value should have the same units as in `z` and if set, `zmax` must be set as well.
- `zsmooth`: Picks a smoothing algorithm use to smooth `z` data.
- `zsrc`: Sets the source reference on Chart Studio Cloud for  z .

"""
function histogram2d(; kw...)
    for k in keys(kw)
        k in (:autobinx, :autobiny, :autocolorscale, :bingroup, :coloraxis, :colorbar, :colorscale, :customdata, :customdatasrc, :histfunc, :histnorm, :hoverinfo, :hoverinfosrc, :hoverlabel, :hovertemplate, :hovertemplatesrc, :ids, :idssrc, :legendgroup, :marker, :meta, :metasrc, :name, :nbinsx, :nbinsy, :opacity, :reversescale, :showlegend, :showscale, :stream, :transforms, :type, :uid, :uirevision, :visible, :x, :xaxis, :xbingroup, :xbins, :xcalendar, :xgap, :xsrc, :y, :yaxis, :ybingroup, :ybins, :ycalendar, :ygap, :ysrc, :z, :zauto, :zhoverformat, :zmax, :zmid, :zmin, :zsmooth, :zsrc) || @warn "Function `histogram2d` does not have attribute `$k`"
    end
    Plot(; type=:histogram2d, kw...)
end

#-----------------------------------------------------------------------------# histogram2dcontour
export histogram2dcontour
"""
    histogram2dcontour(; kw...) --> Plot(type=:histogram2dcontour, kw...)

Create a Plotly trace of type `histogram2dcontour` with the given `kw` attributes.  Attributes will be
validated against the Plotly schema.  Available attributes for `histogram2dcontour` are:

- `autobinx`: Obsolete: since v1.42 each bin attribute is auto-determined separately and `autobinx` is not needed. However, we accept `autobinx: true` or `false` and will update `xbins` accordingly before deleting `autobinx` from the trace.
- `autobiny`: Obsolete: since v1.42 each bin attribute is auto-determined separately and `autobiny` is not needed. However, we accept `autobiny: true` or `false` and will update `ybins` accordingly before deleting `autobiny` from the trace.
- `autocolorscale`: Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `colorscale`. In case `colorscale` is unspecified or `autocolorscale` is true, the default  palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.
- `autocontour`: Determines whether or not the contour level attributes are picked by an algorithm. If *true*, the number of contour levels can be set in `ncontours`. If *false*, set the contour level attributes in `contours`.
- `bingroup`: Set the `xbingroup` and `ybingroup` default prefix For example, setting a `bingroup` of *1* on two histogram2d traces will make them their x-bins and y-bins match separately.
- `coloraxis`: Sets a reference to a shared color axis. References to these shared color axes are *coloraxis*, *coloraxis2*, *coloraxis3*, etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.
- `colorbar`: 
- `colorscale`: Sets the colorscale. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use`zmin` and `zmax`. Alternatively, `colorscale` may be a palette name string of the following list: Greys,YlGnBu,Greens,YlOrRd,Bluered,RdBu,Reds,Blues,Picnic,Rainbow,Portland,Jet,Hot,Blackbody,Earth,Electric,Viridis,Cividis.
- `contours`: 
- `customdata`: Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, *scatter* traces also appends customdata items in the markers DOM elements
- `customdatasrc`: Sets the source reference on Chart Studio Cloud for  customdata .
- `histfunc`: Specifies the binning function used for this histogram trace. If *count*, the histogram values are computed by counting the number of values lying inside each bin. If *sum*, *avg*, *min*, *max*, the histogram values are computed using the sum, the average, the minimum or the maximum of the values lying inside each bin respectively.
- `histnorm`: Specifies the type of normalization used for this histogram trace. If **, the span of each bar corresponds to the number of occurrences (i.e. the number of data points lying inside the bins). If *percent* / *probability*, the span of each bar corresponds to the percentage / fraction of occurrences with respect to the total number of sample points (here, the sum of all bin HEIGHTS equals 100% / 1). If *density*, the span of each bar corresponds to the number of occurrences in a bin divided by the size of the bin interval (here, the sum of all bin AREAS equals the total number of sample points). If *probability density*, the area of each bar corresponds to the probability that an event will fall into the corresponding bin (here, the sum of all bin AREAS equals 1).
- `hoverinfo`: Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.
- `hoverinfosrc`: Sets the source reference on Chart Studio Cloud for  hoverinfo .
- `hoverlabel`: 
- `hovertemplate`: Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example "y: %{y}". Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example "Price: %{y:$.2f}". https://github.com/d3/d3-3.x-api-reference/blob/master/Formatting.md#d3_format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example "Day: %{2019-01-01|%A}". https://github.com/d3/d3-time-format#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. variable `z` Anything contained in tag `<extra>` is displayed in the secondary box, for example "<extra>{fullData.name}</extra>". To hide the secondary box completely, use an empty tag `<extra></extra>`.
- `hovertemplatesrc`: Sets the source reference on Chart Studio Cloud for  hovertemplate .
- `ids`: Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.
- `idssrc`: Sets the source reference on Chart Studio Cloud for  ids .
- `legendgroup`: Sets the legend group for this trace. Traces part of the same legend group hide/show at the same time when toggling legend items.
- `line`: 
- `marker`: 
- `meta`: Assigns extra meta information associated with this trace that can be used in various text attributes. Attributes such as trace `name`, graph, axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues` and `sliders` `label` text all support `meta`. To access the trace `meta` values in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the index or key of the `meta` item in question. To access trace `meta` in layout attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta` and `n` is the trace index.
- `metasrc`: Sets the source reference on Chart Studio Cloud for  meta .
- `name`: Sets the trace name. The trace name appear as the legend item and on hover.
- `nbinsx`: Specifies the maximum number of desired bins. This value will be used in an algorithm that will decide the optimal bin size such that the histogram best visualizes the distribution of the data. Ignored if `xbins.size` is provided.
- `nbinsy`: Specifies the maximum number of desired bins. This value will be used in an algorithm that will decide the optimal bin size such that the histogram best visualizes the distribution of the data. Ignored if `ybins.size` is provided.
- `ncontours`: Sets the maximum number of contour levels. The actual number of contours will be chosen automatically to be less than or equal to the value of `ncontours`. Has an effect only if `autocontour` is *true* or if `contours.size` is missing.
- `opacity`: Sets the opacity of the trace.
- `reversescale`: Reverses the color mapping if true. If true, `zmin` will correspond to the last color in the array and `zmax` will correspond to the first color.
- `showlegend`: Determines whether or not an item corresponding to this trace is shown in the legend.
- `showscale`: Determines whether or not a colorbar is displayed for this trace.
- `stream`: 
- `transforms`: 
- `type`: histogram2dcontour
- `uid`: Assign an id to this trace, Use this to provide object constancy between traces during animations and transitions.
- `uirevision`: Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves.
- `visible`: Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).
- `x`: Sets the sample data to be binned on the x axis.
- `xaxis`: Sets a reference between this trace's x coordinates and a 2D cartesian x axis. If *x* (the default value), the x coordinates refer to `layout.xaxis`. If *x2*, the x coordinates refer to `layout.xaxis2`, and so on.
- `xbingroup`: Set a group of histogram traces which will have compatible x-bin settings. Using `xbingroup`, histogram2d and histogram2dcontour traces  (on axes of the same axis type) can have compatible x-bin settings. Note that the same `xbingroup` value can be used to set (1D) histogram `bingroup`
- `xbins`: 
- `xcalendar`: Sets the calendar system to use with `x` date data.
- `xsrc`: Sets the source reference on Chart Studio Cloud for  x .
- `y`: Sets the sample data to be binned on the y axis.
- `yaxis`: Sets a reference between this trace's y coordinates and a 2D cartesian y axis. If *y* (the default value), the y coordinates refer to `layout.yaxis`. If *y2*, the y coordinates refer to `layout.yaxis2`, and so on.
- `ybingroup`: Set a group of histogram traces which will have compatible y-bin settings. Using `ybingroup`, histogram2d and histogram2dcontour traces  (on axes of the same axis type) can have compatible y-bin settings. Note that the same `ybingroup` value can be used to set (1D) histogram `bingroup`
- `ybins`: 
- `ycalendar`: Sets the calendar system to use with `y` date data.
- `ysrc`: Sets the source reference on Chart Studio Cloud for  y .
- `z`: Sets the aggregation data.
- `zauto`: Determines whether or not the color domain is computed with respect to the input data (here in `z`) or the bounds set in `zmin` and `zmax`  Defaults to `false` when `zmin` and `zmax` are set by the user.
- `zhoverformat`: Sets the hover text formatting rule using d3 formatting mini-languages which are very similar to those in Python. See: https://github.com/d3/d3-3.x-api-reference/blob/master/Formatting.md#d3_format
- `zmax`: Sets the upper bound of the color domain. Value should have the same units as in `z` and if set, `zmin` must be set as well.
- `zmid`: Sets the mid-point of the color domain by scaling `zmin` and/or `zmax` to be equidistant to this point. Value should have the same units as in `z`. Has no effect when `zauto` is `false`.
- `zmin`: Sets the lower bound of the color domain. Value should have the same units as in `z` and if set, `zmax` must be set as well.
- `zsrc`: Sets the source reference on Chart Studio Cloud for  z .

"""
function histogram2dcontour(; kw...)
    for k in keys(kw)
        k in (:autobinx, :autobiny, :autocolorscale, :autocontour, :bingroup, :coloraxis, :colorbar, :colorscale, :contours, :customdata, :customdatasrc, :histfunc, :histnorm, :hoverinfo, :hoverinfosrc, :hoverlabel, :hovertemplate, :hovertemplatesrc, :ids, :idssrc, :legendgroup, :line, :marker, :meta, :metasrc, :name, :nbinsx, :nbinsy, :ncontours, :opacity, :reversescale, :showlegend, :showscale, :stream, :transforms, :type, :uid, :uirevision, :visible, :x, :xaxis, :xbingroup, :xbins, :xcalendar, :xsrc, :y, :yaxis, :ybingroup, :ybins, :ycalendar, :ysrc, :z, :zauto, :zhoverformat, :zmax, :zmid, :zmin, :zsrc) || @warn "Function `histogram2dcontour` does not have attribute `$k`"
    end
    Plot(; type=:histogram2dcontour, kw...)
end

#-----------------------------------------------------------------------------# image
export image
"""
    image(; kw...) --> Plot(type=:image, kw...)

Create a Plotly trace of type `image` with the given `kw` attributes.  Attributes will be
validated against the Plotly schema.  Available attributes for `image` are:

- `colormodel`: Color model used to map the numerical color components described in `z` into colors. If `source` is specified, this attribute will be set to `rgba256` otherwise it defaults to `rgb`.
- `customdata`: Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, *scatter* traces also appends customdata items in the markers DOM elements
- `customdatasrc`: Sets the source reference on Chart Studio Cloud for  customdata .
- `dx`: Set the pixel's horizontal size.
- `dy`: Set the pixel's vertical size
- `hoverinfo`: Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.
- `hoverinfosrc`: Sets the source reference on Chart Studio Cloud for  hoverinfo .
- `hoverlabel`: 
- `hovertemplate`: Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example "y: %{y}". Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example "Price: %{y:$.2f}". https://github.com/d3/d3-3.x-api-reference/blob/master/Formatting.md#d3_format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example "Day: %{2019-01-01|%A}". https://github.com/d3/d3-time-format#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. variables `z`, `color` and `colormodel`. Anything contained in tag `<extra>` is displayed in the secondary box, for example "<extra>{fullData.name}</extra>". To hide the secondary box completely, use an empty tag `<extra></extra>`.
- `hovertemplatesrc`: Sets the source reference on Chart Studio Cloud for  hovertemplate .
- `hovertext`: Same as `text`.
- `hovertextsrc`: Sets the source reference on Chart Studio Cloud for  hovertext .
- `ids`: Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.
- `idssrc`: Sets the source reference on Chart Studio Cloud for  ids .
- `meta`: Assigns extra meta information associated with this trace that can be used in various text attributes. Attributes such as trace `name`, graph, axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues` and `sliders` `label` text all support `meta`. To access the trace `meta` values in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the index or key of the `meta` item in question. To access trace `meta` in layout attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta` and `n` is the trace index.
- `metasrc`: Sets the source reference on Chart Studio Cloud for  meta .
- `name`: Sets the trace name. The trace name appear as the legend item and on hover.
- `opacity`: Sets the opacity of the trace.
- `source`: Specifies the data URI of the image to be visualized. The URI consists of "data:image/[<media subtype>][;base64],<data>"
- `stream`: 
- `text`: Sets the text elements associated with each z value.
- `textsrc`: Sets the source reference on Chart Studio Cloud for  text .
- `type`: image
- `uid`: Assign an id to this trace, Use this to provide object constancy between traces during animations and transitions.
- `uirevision`: Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves.
- `visible`: Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).
- `x0`: Set the image's x position.
- `xaxis`: Sets a reference between this trace's x coordinates and a 2D cartesian x axis. If *x* (the default value), the x coordinates refer to `layout.xaxis`. If *x2*, the x coordinates refer to `layout.xaxis2`, and so on.
- `y0`: Set the image's y position.
- `yaxis`: Sets a reference between this trace's y coordinates and a 2D cartesian y axis. If *y* (the default value), the y coordinates refer to `layout.yaxis`. If *y2*, the y coordinates refer to `layout.yaxis2`, and so on.
- `z`: A 2-dimensional array in which each element is an array of 3 or 4 numbers representing a color.
- `zmax`: Array defining the higher bound for each color component. Note that the default value will depend on the colormodel. For the `rgb` colormodel, it is [255, 255, 255]. For the `rgba` colormodel, it is [255, 255, 255, 1]. For the `rgba256` colormodel, it is [255, 255, 255, 255]. For the `hsl` colormodel, it is [360, 100, 100]. For the `hsla` colormodel, it is [360, 100, 100, 1].
- `zmin`: Array defining the lower bound for each color component. Note that the default value will depend on the colormodel. For the `rgb` colormodel, it is [0, 0, 0]. For the `rgba` colormodel, it is [0, 0, 0, 0]. For the `rgba256` colormodel, it is [0, 0, 0, 0]. For the `hsl` colormodel, it is [0, 0, 0]. For the `hsla` colormodel, it is [0, 0, 0, 0].
- `zsrc`: Sets the source reference on Chart Studio Cloud for  z .

"""
function image(; kw...)
    for k in keys(kw)
        k in (:colormodel, :customdata, :customdatasrc, :dx, :dy, :hoverinfo, :hoverinfosrc, :hoverlabel, :hovertemplate, :hovertemplatesrc, :hovertext, :hovertextsrc, :ids, :idssrc, :meta, :metasrc, :name, :opacity, :source, :stream, :text, :textsrc, :type, :uid, :uirevision, :visible, :x0, :xaxis, :y0, :yaxis, :z, :zmax, :zmin, :zsrc) || @warn "Function `image` does not have attribute `$k`"
    end
    Plot(; type=:image, kw...)
end

#-----------------------------------------------------------------------------# indicator
export indicator
"""
    indicator(; kw...) --> Plot(type=:indicator, kw...)

Create a Plotly trace of type `indicator` with the given `kw` attributes.  Attributes will be
validated against the Plotly schema.  Available attributes for `indicator` are:

- `align`: Sets the horizontal alignment of the `text` within the box. Note that this attribute has no effect if an angular gauge is displayed: in this case, it is always centered
- `customdata`: Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, *scatter* traces also appends customdata items in the markers DOM elements
- `customdatasrc`: Sets the source reference on Chart Studio Cloud for  customdata .
- `delta`: 
- `domain`: 
- `gauge`: The gauge of the Indicator plot.
- `ids`: Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.
- `idssrc`: Sets the source reference on Chart Studio Cloud for  ids .
- `meta`: Assigns extra meta information associated with this trace that can be used in various text attributes. Attributes such as trace `name`, graph, axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues` and `sliders` `label` text all support `meta`. To access the trace `meta` values in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the index or key of the `meta` item in question. To access trace `meta` in layout attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta` and `n` is the trace index.
- `metasrc`: Sets the source reference on Chart Studio Cloud for  meta .
- `mode`: Determines how the value is displayed on the graph. `number` displays the value numerically in text. `delta` displays the difference to a reference value in text. Finally, `gauge` displays the value graphically on an axis.
- `name`: Sets the trace name. The trace name appear as the legend item and on hover.
- `number`: 
- `stream`: 
- `title`: 
- `transforms`: 
- `type`: indicator
- `uid`: Assign an id to this trace, Use this to provide object constancy between traces during animations and transitions.
- `uirevision`: Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves.
- `value`: Sets the number to be displayed.
- `visible`: Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).

"""
function indicator(; kw...)
    for k in keys(kw)
        k in (:align, :customdata, :customdatasrc, :delta, :domain, :gauge, :ids, :idssrc, :meta, :metasrc, :mode, :name, :number, :stream, :title, :transforms, :type, :uid, :uirevision, :value, :visible) || @warn "Function `indicator` does not have attribute `$k`"
    end
    Plot(; type=:indicator, kw...)
end

#-----------------------------------------------------------------------------# isosurface
export isosurface
"""
    isosurface(; kw...) --> Plot(type=:isosurface, kw...)

Create a Plotly trace of type `isosurface` with the given `kw` attributes.  Attributes will be
validated against the Plotly schema.  Available attributes for `isosurface` are:

- `autocolorscale`: Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `colorscale`. In case `colorscale` is unspecified or `autocolorscale` is true, the default  palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.
- `caps`: 
- `cauto`: Determines whether or not the color domain is computed with respect to the input data (here `value`) or the bounds set in `cmin` and `cmax`  Defaults to `false` when `cmin` and `cmax` are set by the user.
- `cmax`: Sets the upper bound of the color domain. Value should have the same units as `value` and if set, `cmin` must be set as well.
- `cmid`: Sets the mid-point of the color domain by scaling `cmin` and/or `cmax` to be equidistant to this point. Value should have the same units as `value`. Has no effect when `cauto` is `false`.
- `cmin`: Sets the lower bound of the color domain. Value should have the same units as `value` and if set, `cmax` must be set as well.
- `coloraxis`: Sets a reference to a shared color axis. References to these shared color axes are *coloraxis*, *coloraxis2*, *coloraxis3*, etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.
- `colorbar`: 
- `colorscale`: Sets the colorscale. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use`cmin` and `cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Greys,YlGnBu,Greens,YlOrRd,Bluered,RdBu,Reds,Blues,Picnic,Rainbow,Portland,Jet,Hot,Blackbody,Earth,Electric,Viridis,Cividis.
- `contour`: 
- `customdata`: Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, *scatter* traces also appends customdata items in the markers DOM elements
- `customdatasrc`: Sets the source reference on Chart Studio Cloud for  customdata .
- `flatshading`: Determines whether or not normal smoothing is applied to the meshes, creating meshes with an angular, low-poly look via flat reflections.
- `hoverinfo`: Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.
- `hoverinfosrc`: Sets the source reference on Chart Studio Cloud for  hoverinfo .
- `hoverlabel`: 
- `hovertemplate`: Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example "y: %{y}". Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example "Price: %{y:$.2f}". https://github.com/d3/d3-3.x-api-reference/blob/master/Formatting.md#d3_format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example "Day: %{2019-01-01|%A}". https://github.com/d3/d3-time-format#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available.  Anything contained in tag `<extra>` is displayed in the secondary box, for example "<extra>{fullData.name}</extra>". To hide the secondary box completely, use an empty tag `<extra></extra>`.
- `hovertemplatesrc`: Sets the source reference on Chart Studio Cloud for  hovertemplate .
- `hovertext`: Same as `text`.
- `hovertextsrc`: Sets the source reference on Chart Studio Cloud for  hovertext .
- `ids`: Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.
- `idssrc`: Sets the source reference on Chart Studio Cloud for  ids .
- `isomax`: Sets the maximum boundary for iso-surface plot.
- `isomin`: Sets the minimum boundary for iso-surface plot.
- `legendgroup`: Sets the legend group for this trace. Traces part of the same legend group hide/show at the same time when toggling legend items.
- `lighting`: 
- `lightposition`: 
- `meta`: Assigns extra meta information associated with this trace that can be used in various text attributes. Attributes such as trace `name`, graph, axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues` and `sliders` `label` text all support `meta`. To access the trace `meta` values in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the index or key of the `meta` item in question. To access trace `meta` in layout attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta` and `n` is the trace index.
- `metasrc`: Sets the source reference on Chart Studio Cloud for  meta .
- `name`: Sets the trace name. The trace name appear as the legend item and on hover.
- `opacity`: Sets the opacity of the surface. Please note that in the case of using high `opacity` values for example a value greater than or equal to 0.5 on two surfaces (and 0.25 with four surfaces), an overlay of multiple transparent surfaces may not perfectly be sorted in depth by the webgl API. This behavior may be improved in the near future and is subject to change.
- `reversescale`: Reverses the color mapping if true. If true, `cmin` will correspond to the last color in the array and `cmax` will correspond to the first color.
- `scene`: Sets a reference between this trace's 3D coordinate system and a 3D scene. If *scene* (the default value), the (x,y,z) coordinates refer to `layout.scene`. If *scene2*, the (x,y,z) coordinates refer to `layout.scene2`, and so on.
- `showlegend`: Determines whether or not an item corresponding to this trace is shown in the legend.
- `showscale`: Determines whether or not a colorbar is displayed for this trace.
- `slices`: 
- `spaceframe`: 
- `stream`: 
- `surface`: 
- `text`: Sets the text elements associated with the vertices. If trace `hoverinfo` contains a *text* flag and *hovertext* is not set, these elements will be seen in the hover labels.
- `textsrc`: Sets the source reference on Chart Studio Cloud for  text .
- `type`: isosurface
- `uid`: Assign an id to this trace, Use this to provide object constancy between traces during animations and transitions.
- `uirevision`: Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves.
- `value`: Sets the 4th dimension (value) of the vertices.
- `valuesrc`: Sets the source reference on Chart Studio Cloud for  value .
- `visible`: Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).
- `x`: Sets the X coordinates of the vertices on X axis.
- `xsrc`: Sets the source reference on Chart Studio Cloud for  x .
- `y`: Sets the Y coordinates of the vertices on Y axis.
- `ysrc`: Sets the source reference on Chart Studio Cloud for  y .
- `z`: Sets the Z coordinates of the vertices on Z axis.
- `zsrc`: Sets the source reference on Chart Studio Cloud for  z .

"""
function isosurface(; kw...)
    for k in keys(kw)
        k in (:autocolorscale, :caps, :cauto, :cmax, :cmid, :cmin, :coloraxis, :colorbar, :colorscale, :contour, :customdata, :customdatasrc, :flatshading, :hoverinfo, :hoverinfosrc, :hoverlabel, :hovertemplate, :hovertemplatesrc, :hovertext, :hovertextsrc, :ids, :idssrc, :isomax, :isomin, :legendgroup, :lighting, :lightposition, :meta, :metasrc, :name, :opacity, :reversescale, :scene, :showlegend, :showscale, :slices, :spaceframe, :stream, :surface, :text, :textsrc, :type, :uid, :uirevision, :value, :valuesrc, :visible, :x, :xsrc, :y, :ysrc, :z, :zsrc) || @warn "Function `isosurface` does not have attribute `$k`"
    end
    Plot(; type=:isosurface, kw...)
end

#-----------------------------------------------------------------------------# mesh3d
export mesh3d
"""
    mesh3d(; kw...) --> Plot(type=:mesh3d, kw...)

Create a Plotly trace of type `mesh3d` with the given `kw` attributes.  Attributes will be
validated against the Plotly schema.  Available attributes for `mesh3d` are:

- `alphahull`: Determines how the mesh surface triangles are derived from the set of vertices (points) represented by the `x`, `y` and `z` arrays, if the `i`, `j`, `k` arrays are not supplied. For general use of `mesh3d` it is preferred that `i`, `j`, `k` are supplied. If *-1*, Delaunay triangulation is used, which is mainly suitable if the mesh is a single, more or less layer surface that is perpendicular to `delaunayaxis`. In case the `delaunayaxis` intersects the mesh surface at more than one point it will result triangles that are very long in the dimension of `delaunayaxis`. If *>0*, the alpha-shape algorithm is used. In this case, the positive `alphahull` value signals the use of the alpha-shape algorithm, _and_ its value acts as the parameter for the mesh fitting. If *0*,  the convex-hull algorithm is used. It is suitable for convex bodies or if the intention is to enclose the `x`, `y` and `z` point set into a convex hull.
- `autocolorscale`: Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `colorscale`. In case `colorscale` is unspecified or `autocolorscale` is true, the default  palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.
- `cauto`: Determines whether or not the color domain is computed with respect to the input data (here `intensity`) or the bounds set in `cmin` and `cmax`  Defaults to `false` when `cmin` and `cmax` are set by the user.
- `cmax`: Sets the upper bound of the color domain. Value should have the same units as `intensity` and if set, `cmin` must be set as well.
- `cmid`: Sets the mid-point of the color domain by scaling `cmin` and/or `cmax` to be equidistant to this point. Value should have the same units as `intensity`. Has no effect when `cauto` is `false`.
- `cmin`: Sets the lower bound of the color domain. Value should have the same units as `intensity` and if set, `cmax` must be set as well.
- `color`: Sets the color of the whole mesh
- `coloraxis`: Sets a reference to a shared color axis. References to these shared color axes are *coloraxis*, *coloraxis2*, *coloraxis3*, etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.
- `colorbar`: 
- `colorscale`: Sets the colorscale. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use`cmin` and `cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Greys,YlGnBu,Greens,YlOrRd,Bluered,RdBu,Reds,Blues,Picnic,Rainbow,Portland,Jet,Hot,Blackbody,Earth,Electric,Viridis,Cividis.
- `contour`: 
- `customdata`: Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, *scatter* traces also appends customdata items in the markers DOM elements
- `customdatasrc`: Sets the source reference on Chart Studio Cloud for  customdata .
- `delaunayaxis`: Sets the Delaunay axis, which is the axis that is perpendicular to the surface of the Delaunay triangulation. It has an effect if `i`, `j`, `k` are not provided and `alphahull` is set to indicate Delaunay triangulation.
- `facecolor`: Sets the color of each face Overrides *color* and *vertexcolor*.
- `facecolorsrc`: Sets the source reference on Chart Studio Cloud for  facecolor .
- `flatshading`: Determines whether or not normal smoothing is applied to the meshes, creating meshes with an angular, low-poly look via flat reflections.
- `hoverinfo`: Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.
- `hoverinfosrc`: Sets the source reference on Chart Studio Cloud for  hoverinfo .
- `hoverlabel`: 
- `hovertemplate`: Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example "y: %{y}". Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example "Price: %{y:$.2f}". https://github.com/d3/d3-3.x-api-reference/blob/master/Formatting.md#d3_format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example "Day: %{2019-01-01|%A}". https://github.com/d3/d3-time-format#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available.  Anything contained in tag `<extra>` is displayed in the secondary box, for example "<extra>{fullData.name}</extra>". To hide the secondary box completely, use an empty tag `<extra></extra>`.
- `hovertemplatesrc`: Sets the source reference on Chart Studio Cloud for  hovertemplate .
- `hovertext`: Same as `text`.
- `hovertextsrc`: Sets the source reference on Chart Studio Cloud for  hovertext .
- `i`: A vector of vertex indices, i.e. integer values between 0 and the length of the vertex vectors, representing the *first* vertex of a triangle. For example, `{i[m], j[m], k[m]}` together represent face m (triangle m) in the mesh, where `i[m] = n` points to the triplet `{x[n], y[n], z[n]}` in the vertex arrays. Therefore, each element in `i` represents a point in space, which is the first vertex of a triangle.
- `ids`: Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.
- `idssrc`: Sets the source reference on Chart Studio Cloud for  ids .
- `intensity`: Sets the intensity values for vertices or cells as defined by `intensitymode`. It can be used for plotting fields on meshes.
- `intensitymode`: Determines the source of `intensity` values.
- `intensitysrc`: Sets the source reference on Chart Studio Cloud for  intensity .
- `isrc`: Sets the source reference on Chart Studio Cloud for  i .
- `j`: A vector of vertex indices, i.e. integer values between 0 and the length of the vertex vectors, representing the *second* vertex of a triangle. For example, `{i[m], j[m], k[m]}`  together represent face m (triangle m) in the mesh, where `j[m] = n` points to the triplet `{x[n], y[n], z[n]}` in the vertex arrays. Therefore, each element in `j` represents a point in space, which is the second vertex of a triangle.
- `jsrc`: Sets the source reference on Chart Studio Cloud for  j .
- `k`: A vector of vertex indices, i.e. integer values between 0 and the length of the vertex vectors, representing the *third* vertex of a triangle. For example, `{i[m], j[m], k[m]}` together represent face m (triangle m) in the mesh, where `k[m] = n` points to the triplet  `{x[n], y[n], z[n]}` in the vertex arrays. Therefore, each element in `k` represents a point in space, which is the third vertex of a triangle.
- `ksrc`: Sets the source reference on Chart Studio Cloud for  k .
- `legendgroup`: Sets the legend group for this trace. Traces part of the same legend group hide/show at the same time when toggling legend items.
- `lighting`: 
- `lightposition`: 
- `meta`: Assigns extra meta information associated with this trace that can be used in various text attributes. Attributes such as trace `name`, graph, axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues` and `sliders` `label` text all support `meta`. To access the trace `meta` values in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the index or key of the `meta` item in question. To access trace `meta` in layout attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta` and `n` is the trace index.
- `metasrc`: Sets the source reference on Chart Studio Cloud for  meta .
- `name`: Sets the trace name. The trace name appear as the legend item and on hover.
- `opacity`: Sets the opacity of the surface. Please note that in the case of using high `opacity` values for example a value greater than or equal to 0.5 on two surfaces (and 0.25 with four surfaces), an overlay of multiple transparent surfaces may not perfectly be sorted in depth by the webgl API. This behavior may be improved in the near future and is subject to change.
- `reversescale`: Reverses the color mapping if true. If true, `cmin` will correspond to the last color in the array and `cmax` will correspond to the first color.
- `scene`: Sets a reference between this trace's 3D coordinate system and a 3D scene. If *scene* (the default value), the (x,y,z) coordinates refer to `layout.scene`. If *scene2*, the (x,y,z) coordinates refer to `layout.scene2`, and so on.
- `showlegend`: Determines whether or not an item corresponding to this trace is shown in the legend.
- `showscale`: Determines whether or not a colorbar is displayed for this trace.
- `stream`: 
- `text`: Sets the text elements associated with the vertices. If trace `hoverinfo` contains a *text* flag and *hovertext* is not set, these elements will be seen in the hover labels.
- `textsrc`: Sets the source reference on Chart Studio Cloud for  text .
- `type`: mesh3d
- `uid`: Assign an id to this trace, Use this to provide object constancy between traces during animations and transitions.
- `uirevision`: Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves.
- `vertexcolor`: Sets the color of each vertex Overrides *color*. While Red, green and blue colors are in the range of 0 and 255; in the case of having vertex color data in RGBA format, the alpha color should be normalized to be between 0 and 1.
- `vertexcolorsrc`: Sets the source reference on Chart Studio Cloud for  vertexcolor .
- `visible`: Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).
- `x`: Sets the X coordinates of the vertices. The nth element of vectors `x`, `y` and `z` jointly represent the X, Y and Z coordinates of the nth vertex.
- `xcalendar`: Sets the calendar system to use with `x` date data.
- `xsrc`: Sets the source reference on Chart Studio Cloud for  x .
- `y`: Sets the Y coordinates of the vertices. The nth element of vectors `x`, `y` and `z` jointly represent the X, Y and Z coordinates of the nth vertex.
- `ycalendar`: Sets the calendar system to use with `y` date data.
- `ysrc`: Sets the source reference on Chart Studio Cloud for  y .
- `z`: Sets the Z coordinates of the vertices. The nth element of vectors `x`, `y` and `z` jointly represent the X, Y and Z coordinates of the nth vertex.
- `zcalendar`: Sets the calendar system to use with `z` date data.
- `zsrc`: Sets the source reference on Chart Studio Cloud for  z .

"""
function mesh3d(; kw...)
    for k in keys(kw)
        k in (:alphahull, :autocolorscale, :cauto, :cmax, :cmid, :cmin, :color, :coloraxis, :colorbar, :colorscale, :contour, :customdata, :customdatasrc, :delaunayaxis, :facecolor, :facecolorsrc, :flatshading, :hoverinfo, :hoverinfosrc, :hoverlabel, :hovertemplate, :hovertemplatesrc, :hovertext, :hovertextsrc, :i, :ids, :idssrc, :intensity, :intensitymode, :intensitysrc, :isrc, :j, :jsrc, :k, :ksrc, :legendgroup, :lighting, :lightposition, :meta, :metasrc, :name, :opacity, :reversescale, :scene, :showlegend, :showscale, :stream, :text, :textsrc, :type, :uid, :uirevision, :vertexcolor, :vertexcolorsrc, :visible, :x, :xcalendar, :xsrc, :y, :ycalendar, :ysrc, :z, :zcalendar, :zsrc) || @warn "Function `mesh3d` does not have attribute `$k`"
    end
    Plot(; type=:mesh3d, kw...)
end

#-----------------------------------------------------------------------------# ohlc
export ohlc
"""
    ohlc(; kw...) --> Plot(type=:ohlc, kw...)

Create a Plotly trace of type `ohlc` with the given `kw` attributes.  Attributes will be
validated against the Plotly schema.  Available attributes for `ohlc` are:

- `close`: Sets the close values.
- `closesrc`: Sets the source reference on Chart Studio Cloud for  close .
- `customdata`: Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, *scatter* traces also appends customdata items in the markers DOM elements
- `customdatasrc`: Sets the source reference on Chart Studio Cloud for  customdata .
- `decreasing`: 
- `high`: Sets the high values.
- `highsrc`: Sets the source reference on Chart Studio Cloud for  high .
- `hoverinfo`: Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.
- `hoverinfosrc`: Sets the source reference on Chart Studio Cloud for  hoverinfo .
- `hoverlabel`: 
- `hovertext`: Same as `text`.
- `hovertextsrc`: Sets the source reference on Chart Studio Cloud for  hovertext .
- `ids`: Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.
- `idssrc`: Sets the source reference on Chart Studio Cloud for  ids .
- `increasing`: 
- `legendgroup`: Sets the legend group for this trace. Traces part of the same legend group hide/show at the same time when toggling legend items.
- `line`: 
- `low`: Sets the low values.
- `lowsrc`: Sets the source reference on Chart Studio Cloud for  low .
- `meta`: Assigns extra meta information associated with this trace that can be used in various text attributes. Attributes such as trace `name`, graph, axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues` and `sliders` `label` text all support `meta`. To access the trace `meta` values in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the index or key of the `meta` item in question. To access trace `meta` in layout attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta` and `n` is the trace index.
- `metasrc`: Sets the source reference on Chart Studio Cloud for  meta .
- `name`: Sets the trace name. The trace name appear as the legend item and on hover.
- `opacity`: Sets the opacity of the trace.
- `open`: Sets the open values.
- `opensrc`: Sets the source reference on Chart Studio Cloud for  open .
- `selectedpoints`: Array containing integer indices of selected points. Has an effect only for traces that support selections. Note that an empty array means an empty selection where the `unselected` are turned on for all points, whereas, any other non-array values means no selection all where the `selected` and `unselected` styles have no effect.
- `showlegend`: Determines whether or not an item corresponding to this trace is shown in the legend.
- `stream`: 
- `text`: Sets hover text elements associated with each sample point. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to this trace's sample points.
- `textsrc`: Sets the source reference on Chart Studio Cloud for  text .
- `tickwidth`: Sets the width of the open/close tick marks relative to the *x* minimal interval.
- `transforms`: 
- `type`: ohlc
- `uid`: Assign an id to this trace, Use this to provide object constancy between traces during animations and transitions.
- `uirevision`: Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves.
- `visible`: Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).
- `x`: Sets the x coordinates. If absent, linear coordinate will be generated.
- `xaxis`: Sets a reference between this trace's x coordinates and a 2D cartesian x axis. If *x* (the default value), the x coordinates refer to `layout.xaxis`. If *x2*, the x coordinates refer to `layout.xaxis2`, and so on.
- `xcalendar`: Sets the calendar system to use with `x` date data.
- `xperiod`: Only relevant when the axis `type` is *date*. Sets the period positioning in milliseconds or *M<n>* on the x axis. Special values in the form of *M<n>* could be used to declare the number of months. In this case `n` must be a positive integer.
- `xperiod0`: Only relevant when the axis `type` is *date*. Sets the base for period positioning in milliseconds or date string on the x0 axis. When `x0period` is round number of weeks, the `x0period0` by default would be on a Sunday i.e. 2000-01-02, otherwise it would be at 2000-01-01.
- `xperiodalignment`: Only relevant when the axis `type` is *date*. Sets the alignment of data points on the x axis.
- `xsrc`: Sets the source reference on Chart Studio Cloud for  x .
- `yaxis`: Sets a reference between this trace's y coordinates and a 2D cartesian y axis. If *y* (the default value), the y coordinates refer to `layout.yaxis`. If *y2*, the y coordinates refer to `layout.yaxis2`, and so on.

"""
function ohlc(; kw...)
    for k in keys(kw)
        k in (:close, :closesrc, :customdata, :customdatasrc, :decreasing, :high, :highsrc, :hoverinfo, :hoverinfosrc, :hoverlabel, :hovertext, :hovertextsrc, :ids, :idssrc, :increasing, :legendgroup, :line, :low, :lowsrc, :meta, :metasrc, :name, :opacity, :open, :opensrc, :selectedpoints, :showlegend, :stream, :text, :textsrc, :tickwidth, :transforms, :type, :uid, :uirevision, :visible, :x, :xaxis, :xcalendar, :xperiod, :xperiod0, :xperiodalignment, :xsrc, :yaxis) || @warn "Function `ohlc` does not have attribute `$k`"
    end
    Plot(; type=:ohlc, kw...)
end

#-----------------------------------------------------------------------------# parcats
export parcats
"""
    parcats(; kw...) --> Plot(type=:parcats, kw...)

Create a Plotly trace of type `parcats` with the given `kw` attributes.  Attributes will be
validated against the Plotly schema.  Available attributes for `parcats` are:

- `arrangement`: Sets the drag interaction mode for categories and dimensions. If `perpendicular`, the categories can only move along a line perpendicular to the paths. If `freeform`, the categories can freely move on the plane. If `fixed`, the categories and dimensions are stationary.
- `bundlecolors`: Sort paths so that like colors are bundled together within each category.
- `counts`: The number of observations represented by each state. Defaults to 1 so that each state represents one observation
- `countssrc`: Sets the source reference on Chart Studio Cloud for  counts .
- `dimensions`: 
- `domain`: 
- `hoverinfo`: Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.
- `hoveron`: Sets the hover interaction mode for the parcats diagram. If `category`, hover interaction take place per category. If `color`, hover interactions take place per color per category. If `dimension`, hover interactions take place across all categories per dimension.
- `hovertemplate`: Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example "y: %{y}". Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example "Price: %{y:$.2f}". https://github.com/d3/d3-3.x-api-reference/blob/master/Formatting.md#d3_format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example "Day: %{2019-01-01|%A}". https://github.com/d3/d3-time-format#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. variables `count`, `probability`, `category`, `categorycount`, `colorcount` and `bandcolorcount`. Anything contained in tag `<extra>` is displayed in the secondary box, for example "<extra>{fullData.name}</extra>". To hide the secondary box completely, use an empty tag `<extra></extra>`.
- `labelfont`: Sets the font for the `dimension` labels.
- `line`: 
- `meta`: Assigns extra meta information associated with this trace that can be used in various text attributes. Attributes such as trace `name`, graph, axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues` and `sliders` `label` text all support `meta`. To access the trace `meta` values in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the index or key of the `meta` item in question. To access trace `meta` in layout attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta` and `n` is the trace index.
- `metasrc`: Sets the source reference on Chart Studio Cloud for  meta .
- `name`: Sets the trace name. The trace name appear as the legend item and on hover.
- `sortpaths`: Sets the path sorting algorithm. If `forward`, sort paths based on dimension categories from left to right. If `backward`, sort paths based on dimensions categories from right to left.
- `stream`: 
- `tickfont`: Sets the font for the `category` labels.
- `transforms`: 
- `type`: parcats
- `uid`: Assign an id to this trace, Use this to provide object constancy between traces during animations and transitions.
- `uirevision`: Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves.
- `visible`: Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).

"""
function parcats(; kw...)
    for k in keys(kw)
        k in (:arrangement, :bundlecolors, :counts, :countssrc, :dimensions, :domain, :hoverinfo, :hoveron, :hovertemplate, :labelfont, :line, :meta, :metasrc, :name, :sortpaths, :stream, :tickfont, :transforms, :type, :uid, :uirevision, :visible) || @warn "Function `parcats` does not have attribute `$k`"
    end
    Plot(; type=:parcats, kw...)
end

#-----------------------------------------------------------------------------# parcoords
export parcoords
"""
    parcoords(; kw...) --> Plot(type=:parcoords, kw...)

Create a Plotly trace of type `parcoords` with the given `kw` attributes.  Attributes will be
validated against the Plotly schema.  Available attributes for `parcoords` are:

- `customdata`: Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, *scatter* traces also appends customdata items in the markers DOM elements
- `customdatasrc`: Sets the source reference on Chart Studio Cloud for  customdata .
- `dimensions`: 
- `domain`: 
- `ids`: Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.
- `idssrc`: Sets the source reference on Chart Studio Cloud for  ids .
- `labelangle`: Sets the angle of the labels with respect to the horizontal. For example, a `tickangle` of -90 draws the labels vertically. Tilted labels with *labelangle* may be positioned better inside margins when `labelposition` is set to *bottom*.
- `labelfont`: Sets the font for the `dimension` labels.
- `labelside`: Specifies the location of the `label`. *top* positions labels above, next to the title *bottom* positions labels below the graph Tilted labels with *labelangle* may be positioned better inside margins when `labelposition` is set to *bottom*.
- `line`: 
- `meta`: Assigns extra meta information associated with this trace that can be used in various text attributes. Attributes such as trace `name`, graph, axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues` and `sliders` `label` text all support `meta`. To access the trace `meta` values in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the index or key of the `meta` item in question. To access trace `meta` in layout attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta` and `n` is the trace index.
- `metasrc`: Sets the source reference on Chart Studio Cloud for  meta .
- `name`: Sets the trace name. The trace name appear as the legend item and on hover.
- `rangefont`: Sets the font for the `dimension` range values.
- `stream`: 
- `tickfont`: Sets the font for the `dimension` tick values.
- `transforms`: 
- `type`: parcoords
- `uid`: Assign an id to this trace, Use this to provide object constancy between traces during animations and transitions.
- `uirevision`: Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves.
- `visible`: Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).

"""
function parcoords(; kw...)
    for k in keys(kw)
        k in (:customdata, :customdatasrc, :dimensions, :domain, :ids, :idssrc, :labelangle, :labelfont, :labelside, :line, :meta, :metasrc, :name, :rangefont, :stream, :tickfont, :transforms, :type, :uid, :uirevision, :visible) || @warn "Function `parcoords` does not have attribute `$k`"
    end
    Plot(; type=:parcoords, kw...)
end

#-----------------------------------------------------------------------------# pie
export pie
"""
    pie(; kw...) --> Plot(type=:pie, kw...)

Create a Plotly trace of type `pie` with the given `kw` attributes.  Attributes will be
validated against the Plotly schema.  Available attributes for `pie` are:

- `_deprecated`: 
- `automargin`: Determines whether outside text labels can push the margins.
- `customdata`: Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, *scatter* traces also appends customdata items in the markers DOM elements
- `customdatasrc`: Sets the source reference on Chart Studio Cloud for  customdata .
- `direction`: Specifies the direction at which succeeding sectors follow one another.
- `dlabel`: Sets the label step. See `label0` for more info.
- `domain`: 
- `hole`: Sets the fraction of the radius to cut out of the pie. Use this to make a donut chart.
- `hoverinfo`: Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.
- `hoverinfosrc`: Sets the source reference on Chart Studio Cloud for  hoverinfo .
- `hoverlabel`: 
- `hovertemplate`: Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example "y: %{y}". Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example "Price: %{y:$.2f}". https://github.com/d3/d3-3.x-api-reference/blob/master/Formatting.md#d3_format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example "Day: %{2019-01-01|%A}". https://github.com/d3/d3-time-format#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. variables `label`, `color`, `value`, `percent` and `text`. Anything contained in tag `<extra>` is displayed in the secondary box, for example "<extra>{fullData.name}</extra>". To hide the secondary box completely, use an empty tag `<extra></extra>`.
- `hovertemplatesrc`: Sets the source reference on Chart Studio Cloud for  hovertemplate .
- `hovertext`: Sets hover text elements associated with each sector. If a single string, the same string appears for all data points. If an array of string, the items are mapped in order of this trace's sectors. To be seen, trace `hoverinfo` must contain a *text* flag.
- `hovertextsrc`: Sets the source reference on Chart Studio Cloud for  hovertext .
- `ids`: Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.
- `idssrc`: Sets the source reference on Chart Studio Cloud for  ids .
- `insidetextfont`: Sets the font used for `textinfo` lying inside the sector.
- `insidetextorientation`: Controls the orientation of the text inside chart sectors. When set to *auto*, text may be oriented in any direction in order to be as big as possible in the middle of a sector. The *horizontal* option orients text to be parallel with the bottom of the chart, and may make text smaller in order to achieve that goal. The *radial* option orients text along the radius of the sector. The *tangential* option orients text perpendicular to the radius of the sector.
- `label0`: Alternate to `labels`. Builds a numeric set of labels. Use with `dlabel` where `label0` is the starting label and `dlabel` the step.
- `labels`: Sets the sector labels. If `labels` entries are duplicated, we sum associated `values` or simply count occurrences if `values` is not provided. For other array attributes (including color) we use the first non-empty entry among all occurrences of the label.
- `labelssrc`: Sets the source reference on Chart Studio Cloud for  labels .
- `legendgroup`: Sets the legend group for this trace. Traces part of the same legend group hide/show at the same time when toggling legend items.
- `marker`: 
- `meta`: Assigns extra meta information associated with this trace that can be used in various text attributes. Attributes such as trace `name`, graph, axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues` and `sliders` `label` text all support `meta`. To access the trace `meta` values in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the index or key of the `meta` item in question. To access trace `meta` in layout attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta` and `n` is the trace index.
- `metasrc`: Sets the source reference on Chart Studio Cloud for  meta .
- `name`: Sets the trace name. The trace name appear as the legend item and on hover.
- `opacity`: Sets the opacity of the trace.
- `outsidetextfont`: Sets the font used for `textinfo` lying outside the sector.
- `pull`: Sets the fraction of larger radius to pull the sectors out from the center. This can be a constant to pull all slices apart from each other equally or an array to highlight one or more slices.
- `pullsrc`: Sets the source reference on Chart Studio Cloud for  pull .
- `rotation`: Instead of the first slice starting at 12 o'clock, rotate to some other angle.
- `scalegroup`: If there are multiple pie charts that should be sized according to their totals, link them by providing a non-empty group id here shared by every trace in the same group.
- `showlegend`: Determines whether or not an item corresponding to this trace is shown in the legend.
- `sort`: Determines whether or not the sectors are reordered from largest to smallest.
- `stream`: 
- `text`: Sets text elements associated with each sector. If trace `textinfo` contains a *text* flag, these elements will be seen on the chart. If trace `hoverinfo` contains a *text* flag and *hovertext* is not set, these elements will be seen in the hover labels.
- `textfont`: Sets the font used for `textinfo`.
- `textinfo`: Determines which trace information appear on the graph.
- `textposition`: Specifies the location of the `textinfo`.
- `textpositionsrc`: Sets the source reference on Chart Studio Cloud for  textposition .
- `textsrc`: Sets the source reference on Chart Studio Cloud for  text .
- `texttemplate`: Template string used for rendering the information text that appear on points. Note that this will override `textinfo`. Variables are inserted using %{variable}, for example "y: %{y}". Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example "Price: %{y:$.2f}". https://github.com/d3/d3-3.x-api-reference/blob/master/Formatting.md#d3_format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example "Day: %{2019-01-01|%A}". https://github.com/d3/d3-time-format#locale_format for details on the date formatting syntax. Every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. variables `label`, `color`, `value`, `percent` and `text`.
- `texttemplatesrc`: Sets the source reference on Chart Studio Cloud for  texttemplate .
- `title`: 
- `transforms`: 
- `type`: pie
- `uid`: Assign an id to this trace, Use this to provide object constancy between traces during animations and transitions.
- `uirevision`: Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves.
- `values`: Sets the values of the sectors. If omitted, we count occurrences of each label.
- `valuessrc`: Sets the source reference on Chart Studio Cloud for  values .
- `visible`: Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).

"""
function pie(; kw...)
    for k in keys(kw)
        k in (:_deprecated, :automargin, :customdata, :customdatasrc, :direction, :dlabel, :domain, :hole, :hoverinfo, :hoverinfosrc, :hoverlabel, :hovertemplate, :hovertemplatesrc, :hovertext, :hovertextsrc, :ids, :idssrc, :insidetextfont, :insidetextorientation, :label0, :labels, :labelssrc, :legendgroup, :marker, :meta, :metasrc, :name, :opacity, :outsidetextfont, :pull, :pullsrc, :rotation, :scalegroup, :showlegend, :sort, :stream, :text, :textfont, :textinfo, :textposition, :textpositionsrc, :textsrc, :texttemplate, :texttemplatesrc, :title, :transforms, :type, :uid, :uirevision, :values, :valuessrc, :visible) || @warn "Function `pie` does not have attribute `$k`"
    end
    Plot(; type=:pie, kw...)
end

#-----------------------------------------------------------------------------# pointcloud
export pointcloud
"""
    pointcloud(; kw...) --> Plot(type=:pointcloud, kw...)

Create a Plotly trace of type `pointcloud` with the given `kw` attributes.  Attributes will be
validated against the Plotly schema.  Available attributes for `pointcloud` are:

- `customdata`: Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, *scatter* traces also appends customdata items in the markers DOM elements
- `customdatasrc`: Sets the source reference on Chart Studio Cloud for  customdata .
- `hoverinfo`: Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.
- `hoverinfosrc`: Sets the source reference on Chart Studio Cloud for  hoverinfo .
- `hoverlabel`: 
- `ids`: Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.
- `idssrc`: Sets the source reference on Chart Studio Cloud for  ids .
- `indices`: A sequential value, 0..n, supply it to avoid creating this array inside plotting. If specified, it must be a typed `Int32Array` array. Its length must be equal to or greater than the number of points. For the best performance and memory use, create one large `indices` typed array that is guaranteed to be at least as long as the largest number of points during use, and reuse it on each `Plotly.restyle()` call.
- `indicessrc`: Sets the source reference on Chart Studio Cloud for  indices .
- `legendgroup`: Sets the legend group for this trace. Traces part of the same legend group hide/show at the same time when toggling legend items.
- `marker`: 
- `meta`: Assigns extra meta information associated with this trace that can be used in various text attributes. Attributes such as trace `name`, graph, axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues` and `sliders` `label` text all support `meta`. To access the trace `meta` values in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the index or key of the `meta` item in question. To access trace `meta` in layout attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta` and `n` is the trace index.
- `metasrc`: Sets the source reference on Chart Studio Cloud for  meta .
- `name`: Sets the trace name. The trace name appear as the legend item and on hover.
- `opacity`: Sets the opacity of the trace.
- `showlegend`: Determines whether or not an item corresponding to this trace is shown in the legend.
- `stream`: 
- `text`: Sets text elements associated with each (x,y) pair. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates. If trace `hoverinfo` contains a *text* flag and *hovertext* is not set, these elements will be seen in the hover labels.
- `textsrc`: Sets the source reference on Chart Studio Cloud for  text .
- `type`: pointcloud
- `uid`: Assign an id to this trace, Use this to provide object constancy between traces during animations and transitions.
- `uirevision`: Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves.
- `visible`: Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).
- `x`: Sets the x coordinates.
- `xaxis`: Sets a reference between this trace's x coordinates and a 2D cartesian x axis. If *x* (the default value), the x coordinates refer to `layout.xaxis`. If *x2*, the x coordinates refer to `layout.xaxis2`, and so on.
- `xbounds`: Specify `xbounds` in the shape of `[xMin, xMax] to avoid looping through the `xy` typed array. Use it in conjunction with `xy` and `ybounds` for the performance benefits.
- `xboundssrc`: Sets the source reference on Chart Studio Cloud for  xbounds .
- `xsrc`: Sets the source reference on Chart Studio Cloud for  x .
- `xy`: Faster alternative to specifying `x` and `y` separately. If supplied, it must be a typed `Float32Array` array that represents points such that `xy[i * 2] = x[i]` and `xy[i * 2 + 1] = y[i]`
- `xysrc`: Sets the source reference on Chart Studio Cloud for  xy .
- `y`: Sets the y coordinates.
- `yaxis`: Sets a reference between this trace's y coordinates and a 2D cartesian y axis. If *y* (the default value), the y coordinates refer to `layout.yaxis`. If *y2*, the y coordinates refer to `layout.yaxis2`, and so on.
- `ybounds`: Specify `ybounds` in the shape of `[yMin, yMax] to avoid looping through the `xy` typed array. Use it in conjunction with `xy` and `xbounds` for the performance benefits.
- `yboundssrc`: Sets the source reference on Chart Studio Cloud for  ybounds .
- `ysrc`: Sets the source reference on Chart Studio Cloud for  y .

"""
function pointcloud(; kw...)
    for k in keys(kw)
        k in (:customdata, :customdatasrc, :hoverinfo, :hoverinfosrc, :hoverlabel, :ids, :idssrc, :indices, :indicessrc, :legendgroup, :marker, :meta, :metasrc, :name, :opacity, :showlegend, :stream, :text, :textsrc, :type, :uid, :uirevision, :visible, :x, :xaxis, :xbounds, :xboundssrc, :xsrc, :xy, :xysrc, :y, :yaxis, :ybounds, :yboundssrc, :ysrc) || @warn "Function `pointcloud` does not have attribute `$k`"
    end
    Plot(; type=:pointcloud, kw...)
end

#-----------------------------------------------------------------------------# sankey
export sankey
"""
    sankey(; kw...) --> Plot(type=:sankey, kw...)

Create a Plotly trace of type `sankey` with the given `kw` attributes.  Attributes will be
validated against the Plotly schema.  Available attributes for `sankey` are:

- `arrangement`: If value is `snap` (the default), the node arrangement is assisted by automatic snapping of elements to preserve space between nodes specified via `nodepad`. If value is `perpendicular`, the nodes can only move along a line perpendicular to the flow. If value is `freeform`, the nodes can freely move on the plane. If value is `fixed`, the nodes are stationary.
- `customdata`: Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, *scatter* traces also appends customdata items in the markers DOM elements
- `customdatasrc`: Sets the source reference on Chart Studio Cloud for  customdata .
- `domain`: 
- `hoverinfo`: Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired. Note that this attribute is superseded by `node.hoverinfo` and `node.hoverinfo` for nodes and links respectively.
- `hoverlabel`: 
- `ids`: Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.
- `idssrc`: Sets the source reference on Chart Studio Cloud for  ids .
- `link`: The links of the Sankey plot.
- `meta`: Assigns extra meta information associated with this trace that can be used in various text attributes. Attributes such as trace `name`, graph, axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues` and `sliders` `label` text all support `meta`. To access the trace `meta` values in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the index or key of the `meta` item in question. To access trace `meta` in layout attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta` and `n` is the trace index.
- `metasrc`: Sets the source reference on Chart Studio Cloud for  meta .
- `name`: Sets the trace name. The trace name appear as the legend item and on hover.
- `node`: The nodes of the Sankey plot.
- `orientation`: Sets the orientation of the Sankey diagram.
- `selectedpoints`: Array containing integer indices of selected points. Has an effect only for traces that support selections. Note that an empty array means an empty selection where the `unselected` are turned on for all points, whereas, any other non-array values means no selection all where the `selected` and `unselected` styles have no effect.
- `stream`: 
- `textfont`: Sets the font for node labels
- `type`: sankey
- `uid`: Assign an id to this trace, Use this to provide object constancy between traces during animations and transitions.
- `uirevision`: Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves.
- `valueformat`: Sets the value formatting rule using d3 formatting mini-language which is similar to those of Python. See https://github.com/d3/d3-3.x-api-reference/blob/master/Formatting.md#d3_format
- `valuesuffix`: Adds a unit to follow the value in the hover tooltip. Add a space if a separation is necessary from the value.
- `visible`: Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).

"""
function sankey(; kw...)
    for k in keys(kw)
        k in (:arrangement, :customdata, :customdatasrc, :domain, :hoverinfo, :hoverlabel, :ids, :idssrc, :link, :meta, :metasrc, :name, :node, :orientation, :selectedpoints, :stream, :textfont, :type, :uid, :uirevision, :valueformat, :valuesuffix, :visible) || @warn "Function `sankey` does not have attribute `$k`"
    end
    Plot(; type=:sankey, kw...)
end

#-----------------------------------------------------------------------------# scatter
export scatter
"""
    scatter(; kw...) --> Plot(type=:scatter, kw...)

Create a Plotly trace of type `scatter` with the given `kw` attributes.  Attributes will be
validated against the Plotly schema.  Available attributes for `scatter` are:

- `cliponaxis`: Determines whether or not markers and text nodes are clipped about the subplot axes. To show markers and text nodes above axis lines and tick labels, make sure to set `xaxis.layer` and `yaxis.layer` to *below traces*.
- `connectgaps`: Determines whether or not gaps (i.e. {nan} or missing values) in the provided data arrays are connected.
- `customdata`: Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, *scatter* traces also appends customdata items in the markers DOM elements
- `customdatasrc`: Sets the source reference on Chart Studio Cloud for  customdata .
- `dx`: Sets the x coordinate step. See `x0` for more info.
- `dy`: Sets the y coordinate step. See `y0` for more info.
- `error_x`: 
- `error_y`: 
- `fill`: Sets the area to fill with a solid color. Defaults to *none* unless this trace is stacked, then it gets *tonexty* (*tonextx*) if `orientation` is *v* (*h*) Use with `fillcolor` if not *none*. *tozerox* and *tozeroy* fill to x=0 and y=0 respectively. *tonextx* and *tonexty* fill between the endpoints of this trace and the endpoints of the trace before it, connecting those endpoints with straight lines (to make a stacked area graph); if there is no trace before it, they behave like *tozerox* and *tozeroy*. *toself* connects the endpoints of the trace (or each segment of the trace if it has gaps) into a closed shape. *tonext* fills the space between two traces if one completely encloses the other (eg consecutive contour lines), and behaves like *toself* if there is no trace before it. *tonext* should not be used if one trace does not enclose the other. Traces in a `stackgroup` will only fill to (or be filled to) other traces in the same group. With multiple `stackgroup`s or some traces stacked and some not, if fill-linked traces are not already consecutive, the later ones will be pushed down in the drawing order.
- `fillcolor`: Sets the fill color. Defaults to a half-transparent variant of the line color, marker color, or marker line color, whichever is available.
- `groupnorm`: Only relevant when `stackgroup` is used, and only the first `groupnorm` found in the `stackgroup` will be used - including if `visible` is *legendonly* but not if it is `false`. Sets the normalization for the sum of this `stackgroup`. With *fraction*, the value of each trace at each location is divided by the sum of all trace values at that location. *percent* is the same but multiplied by 100 to show percentages. If there are multiple subplots, or multiple `stackgroup`s on one subplot, each will be normalized within its own set.
- `hoverinfo`: Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.
- `hoverinfosrc`: Sets the source reference on Chart Studio Cloud for  hoverinfo .
- `hoverlabel`: 
- `hoveron`: Do the hover effects highlight individual points (markers or line points) or do they highlight filled regions? If the fill is *toself* or *tonext* and there are no markers or text, then the default is *fills*, otherwise it is *points*.
- `hovertemplate`: Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example "y: %{y}". Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example "Price: %{y:$.2f}". https://github.com/d3/d3-3.x-api-reference/blob/master/Formatting.md#d3_format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example "Day: %{2019-01-01|%A}". https://github.com/d3/d3-time-format#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available.  Anything contained in tag `<extra>` is displayed in the secondary box, for example "<extra>{fullData.name}</extra>". To hide the secondary box completely, use an empty tag `<extra></extra>`.
- `hovertemplatesrc`: Sets the source reference on Chart Studio Cloud for  hovertemplate .
- `hovertext`: Sets hover text elements associated with each (x,y) pair. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates. To be seen, trace `hoverinfo` must contain a *text* flag.
- `hovertextsrc`: Sets the source reference on Chart Studio Cloud for  hovertext .
- `ids`: Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.
- `idssrc`: Sets the source reference on Chart Studio Cloud for  ids .
- `legendgroup`: Sets the legend group for this trace. Traces part of the same legend group hide/show at the same time when toggling legend items.
- `line`: 
- `marker`: 
- `meta`: Assigns extra meta information associated with this trace that can be used in various text attributes. Attributes such as trace `name`, graph, axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues` and `sliders` `label` text all support `meta`. To access the trace `meta` values in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the index or key of the `meta` item in question. To access trace `meta` in layout attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta` and `n` is the trace index.
- `metasrc`: Sets the source reference on Chart Studio Cloud for  meta .
- `mode`: Determines the drawing mode for this scatter trace. If the provided `mode` includes *text* then the `text` elements appear at the coordinates. Otherwise, the `text` elements appear on hover. If there are less than 20 points and the trace is not stacked then the default is *lines+markers*. Otherwise, *lines*.
- `name`: Sets the trace name. The trace name appear as the legend item and on hover.
- `opacity`: Sets the opacity of the trace.
- `orientation`: Only relevant when `stackgroup` is used, and only the first `orientation` found in the `stackgroup` will be used - including if `visible` is *legendonly* but not if it is `false`. Sets the stacking direction. With *v* (*h*), the y (x) values of subsequent traces are added. Also affects the default value of `fill`.
- `r`: r coordinates in scatter traces are deprecated!Please switch to the *scatterpolar* trace type.Sets the radial coordinatesfor legacy polar chart only.
- `rsrc`: Sets the source reference on Chart Studio Cloud for  r .
- `selected`: 
- `selectedpoints`: Array containing integer indices of selected points. Has an effect only for traces that support selections. Note that an empty array means an empty selection where the `unselected` are turned on for all points, whereas, any other non-array values means no selection all where the `selected` and `unselected` styles have no effect.
- `showlegend`: Determines whether or not an item corresponding to this trace is shown in the legend.
- `stackgaps`: Only relevant when `stackgroup` is used, and only the first `stackgaps` found in the `stackgroup` will be used - including if `visible` is *legendonly* but not if it is `false`. Determines how we handle locations at which other traces in this group have data but this one does not. With *infer zero* we insert a zero at these locations. With *interpolate* we linearly interpolate between existing values, and extrapolate a constant beyond the existing values.
- `stackgroup`: Set several scatter traces (on the same subplot) to the same stackgroup in order to add their y values (or their x values if `orientation` is *h*). If blank or omitted this trace will not be stacked. Stacking also turns `fill` on by default, using *tonexty* (*tonextx*) if `orientation` is *h* (*v*) and sets the default `mode` to *lines* irrespective of point count. You can only stack on a numeric (linear or log) axis. Traces in a `stackgroup` will only fill to (or be filled to) other traces in the same group. With multiple `stackgroup`s or some traces stacked and some not, if fill-linked traces are not already consecutive, the later ones will be pushed down in the drawing order.
- `stream`: 
- `t`: t coordinates in scatter traces are deprecated!Please switch to the *scatterpolar* trace type.Sets the angular coordinatesfor legacy polar chart only.
- `text`: Sets text elements associated with each (x,y) pair. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates. If trace `hoverinfo` contains a *text* flag and *hovertext* is not set, these elements will be seen in the hover labels.
- `textfont`: Sets the text font.
- `textposition`: Sets the positions of the `text` elements with respects to the (x,y) coordinates.
- `textpositionsrc`: Sets the source reference on Chart Studio Cloud for  textposition .
- `textsrc`: Sets the source reference on Chart Studio Cloud for  text .
- `texttemplate`: Template string used for rendering the information text that appear on points. Note that this will override `textinfo`. Variables are inserted using %{variable}, for example "y: %{y}". Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example "Price: %{y:$.2f}". https://github.com/d3/d3-3.x-api-reference/blob/master/Formatting.md#d3_format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example "Day: %{2019-01-01|%A}". https://github.com/d3/d3-time-format#locale_format for details on the date formatting syntax. Every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. 
- `texttemplatesrc`: Sets the source reference on Chart Studio Cloud for  texttemplate .
- `transforms`: 
- `tsrc`: Sets the source reference on Chart Studio Cloud for  t .
- `type`: scatter
- `uid`: Assign an id to this trace, Use this to provide object constancy between traces during animations and transitions.
- `uirevision`: Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves.
- `unselected`: 
- `visible`: Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).
- `x`: Sets the x coordinates.
- `x0`: Alternate to `x`. Builds a linear space of x coordinates. Use with `dx` where `x0` is the starting coordinate and `dx` the step.
- `xaxis`: Sets a reference between this trace's x coordinates and a 2D cartesian x axis. If *x* (the default value), the x coordinates refer to `layout.xaxis`. If *x2*, the x coordinates refer to `layout.xaxis2`, and so on.
- `xcalendar`: Sets the calendar system to use with `x` date data.
- `xperiod`: Only relevant when the axis `type` is *date*. Sets the period positioning in milliseconds or *M<n>* on the x axis. Special values in the form of *M<n>* could be used to declare the number of months. In this case `n` must be a positive integer.
- `xperiod0`: Only relevant when the axis `type` is *date*. Sets the base for period positioning in milliseconds or date string on the x0 axis. When `x0period` is round number of weeks, the `x0period0` by default would be on a Sunday i.e. 2000-01-02, otherwise it would be at 2000-01-01.
- `xperiodalignment`: Only relevant when the axis `type` is *date*. Sets the alignment of data points on the x axis.
- `xsrc`: Sets the source reference on Chart Studio Cloud for  x .
- `y`: Sets the y coordinates.
- `y0`: Alternate to `y`. Builds a linear space of y coordinates. Use with `dy` where `y0` is the starting coordinate and `dy` the step.
- `yaxis`: Sets a reference between this trace's y coordinates and a 2D cartesian y axis. If *y* (the default value), the y coordinates refer to `layout.yaxis`. If *y2*, the y coordinates refer to `layout.yaxis2`, and so on.
- `ycalendar`: Sets the calendar system to use with `y` date data.
- `yperiod`: Only relevant when the axis `type` is *date*. Sets the period positioning in milliseconds or *M<n>* on the y axis. Special values in the form of *M<n>* could be used to declare the number of months. In this case `n` must be a positive integer.
- `yperiod0`: Only relevant when the axis `type` is *date*. Sets the base for period positioning in milliseconds or date string on the y0 axis. When `y0period` is round number of weeks, the `y0period0` by default would be on a Sunday i.e. 2000-01-02, otherwise it would be at 2000-01-01.
- `yperiodalignment`: Only relevant when the axis `type` is *date*. Sets the alignment of data points on the y axis.
- `ysrc`: Sets the source reference on Chart Studio Cloud for  y .

"""
function scatter(; kw...)
    for k in keys(kw)
        k in (:cliponaxis, :connectgaps, :customdata, :customdatasrc, :dx, :dy, :error_x, :error_y, :fill, :fillcolor, :groupnorm, :hoverinfo, :hoverinfosrc, :hoverlabel, :hoveron, :hovertemplate, :hovertemplatesrc, :hovertext, :hovertextsrc, :ids, :idssrc, :legendgroup, :line, :marker, :meta, :metasrc, :mode, :name, :opacity, :orientation, :r, :rsrc, :selected, :selectedpoints, :showlegend, :stackgaps, :stackgroup, :stream, :t, :text, :textfont, :textposition, :textpositionsrc, :textsrc, :texttemplate, :texttemplatesrc, :transforms, :tsrc, :type, :uid, :uirevision, :unselected, :visible, :x, :x0, :xaxis, :xcalendar, :xperiod, :xperiod0, :xperiodalignment, :xsrc, :y, :y0, :yaxis, :ycalendar, :yperiod, :yperiod0, :yperiodalignment, :ysrc) || @warn "Function `scatter` does not have attribute `$k`"
    end
    Plot(; type=:scatter, kw...)
end

#-----------------------------------------------------------------------------# scatter3d
export scatter3d
"""
    scatter3d(; kw...) --> Plot(type=:scatter3d, kw...)

Create a Plotly trace of type `scatter3d` with the given `kw` attributes.  Attributes will be
validated against the Plotly schema.  Available attributes for `scatter3d` are:

- `connectgaps`: Determines whether or not gaps (i.e. {nan} or missing values) in the provided data arrays are connected.
- `customdata`: Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, *scatter* traces also appends customdata items in the markers DOM elements
- `customdatasrc`: Sets the source reference on Chart Studio Cloud for  customdata .
- `error_x`: 
- `error_y`: 
- `error_z`: 
- `hoverinfo`: Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.
- `hoverinfosrc`: Sets the source reference on Chart Studio Cloud for  hoverinfo .
- `hoverlabel`: 
- `hovertemplate`: Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example "y: %{y}". Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example "Price: %{y:$.2f}". https://github.com/d3/d3-3.x-api-reference/blob/master/Formatting.md#d3_format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example "Day: %{2019-01-01|%A}". https://github.com/d3/d3-time-format#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available.  Anything contained in tag `<extra>` is displayed in the secondary box, for example "<extra>{fullData.name}</extra>". To hide the secondary box completely, use an empty tag `<extra></extra>`.
- `hovertemplatesrc`: Sets the source reference on Chart Studio Cloud for  hovertemplate .
- `hovertext`: Sets text elements associated with each (x,y,z) triplet. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y,z) coordinates. To be seen, trace `hoverinfo` must contain a *text* flag.
- `hovertextsrc`: Sets the source reference on Chart Studio Cloud for  hovertext .
- `ids`: Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.
- `idssrc`: Sets the source reference on Chart Studio Cloud for  ids .
- `legendgroup`: Sets the legend group for this trace. Traces part of the same legend group hide/show at the same time when toggling legend items.
- `line`: 
- `marker`: 
- `meta`: Assigns extra meta information associated with this trace that can be used in various text attributes. Attributes such as trace `name`, graph, axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues` and `sliders` `label` text all support `meta`. To access the trace `meta` values in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the index or key of the `meta` item in question. To access trace `meta` in layout attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta` and `n` is the trace index.
- `metasrc`: Sets the source reference on Chart Studio Cloud for  meta .
- `mode`: Determines the drawing mode for this scatter trace. If the provided `mode` includes *text* then the `text` elements appear at the coordinates. Otherwise, the `text` elements appear on hover. If there are less than 20 points and the trace is not stacked then the default is *lines+markers*. Otherwise, *lines*.
- `name`: Sets the trace name. The trace name appear as the legend item and on hover.
- `opacity`: Sets the opacity of the trace.
- `projection`: 
- `scene`: Sets a reference between this trace's 3D coordinate system and a 3D scene. If *scene* (the default value), the (x,y,z) coordinates refer to `layout.scene`. If *scene2*, the (x,y,z) coordinates refer to `layout.scene2`, and so on.
- `showlegend`: Determines whether or not an item corresponding to this trace is shown in the legend.
- `stream`: 
- `surfaceaxis`: If *-1*, the scatter points are not fill with a surface If *0*, *1*, *2*, the scatter points are filled with a Delaunay surface about the x, y, z respectively.
- `surfacecolor`: Sets the surface fill color.
- `text`: Sets text elements associated with each (x,y,z) triplet. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y,z) coordinates. If trace `hoverinfo` contains a *text* flag and *hovertext* is not set, these elements will be seen in the hover labels.
- `textfont`: 
- `textposition`: Sets the positions of the `text` elements with respects to the (x,y) coordinates.
- `textpositionsrc`: Sets the source reference on Chart Studio Cloud for  textposition .
- `textsrc`: Sets the source reference on Chart Studio Cloud for  text .
- `texttemplate`: Template string used for rendering the information text that appear on points. Note that this will override `textinfo`. Variables are inserted using %{variable}, for example "y: %{y}". Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example "Price: %{y:$.2f}". https://github.com/d3/d3-3.x-api-reference/blob/master/Formatting.md#d3_format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example "Day: %{2019-01-01|%A}". https://github.com/d3/d3-time-format#locale_format for details on the date formatting syntax. Every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. 
- `texttemplatesrc`: Sets the source reference on Chart Studio Cloud for  texttemplate .
- `transforms`: 
- `type`: scatter3d
- `uid`: Assign an id to this trace, Use this to provide object constancy between traces during animations and transitions.
- `uirevision`: Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves.
- `visible`: Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).
- `x`: Sets the x coordinates.
- `xcalendar`: Sets the calendar system to use with `x` date data.
- `xsrc`: Sets the source reference on Chart Studio Cloud for  x .
- `y`: Sets the y coordinates.
- `ycalendar`: Sets the calendar system to use with `y` date data.
- `ysrc`: Sets the source reference on Chart Studio Cloud for  y .
- `z`: Sets the z coordinates.
- `zcalendar`: Sets the calendar system to use with `z` date data.
- `zsrc`: Sets the source reference on Chart Studio Cloud for  z .

"""
function scatter3d(; kw...)
    for k in keys(kw)
        k in (:connectgaps, :customdata, :customdatasrc, :error_x, :error_y, :error_z, :hoverinfo, :hoverinfosrc, :hoverlabel, :hovertemplate, :hovertemplatesrc, :hovertext, :hovertextsrc, :ids, :idssrc, :legendgroup, :line, :marker, :meta, :metasrc, :mode, :name, :opacity, :projection, :scene, :showlegend, :stream, :surfaceaxis, :surfacecolor, :text, :textfont, :textposition, :textpositionsrc, :textsrc, :texttemplate, :texttemplatesrc, :transforms, :type, :uid, :uirevision, :visible, :x, :xcalendar, :xsrc, :y, :ycalendar, :ysrc, :z, :zcalendar, :zsrc) || @warn "Function `scatter3d` does not have attribute `$k`"
    end
    Plot(; type=:scatter3d, kw...)
end

#-----------------------------------------------------------------------------# scattercarpet
export scattercarpet
"""
    scattercarpet(; kw...) --> Plot(type=:scattercarpet, kw...)

Create a Plotly trace of type `scattercarpet` with the given `kw` attributes.  Attributes will be
validated against the Plotly schema.  Available attributes for `scattercarpet` are:

- `a`: Sets the a-axis coordinates.
- `asrc`: Sets the source reference on Chart Studio Cloud for  a .
- `b`: Sets the b-axis coordinates.
- `bsrc`: Sets the source reference on Chart Studio Cloud for  b .
- `carpet`: An identifier for this carpet, so that `scattercarpet` and `contourcarpet` traces can specify a carpet plot on which they lie
- `connectgaps`: Determines whether or not gaps (i.e. {nan} or missing values) in the provided data arrays are connected.
- `customdata`: Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, *scatter* traces also appends customdata items in the markers DOM elements
- `customdatasrc`: Sets the source reference on Chart Studio Cloud for  customdata .
- `fill`: Sets the area to fill with a solid color. Use with `fillcolor` if not *none*. scatterternary has a subset of the options available to scatter. *toself* connects the endpoints of the trace (or each segment of the trace if it has gaps) into a closed shape. *tonext* fills the space between two traces if one completely encloses the other (eg consecutive contour lines), and behaves like *toself* if there is no trace before it. *tonext* should not be used if one trace does not enclose the other.
- `fillcolor`: Sets the fill color. Defaults to a half-transparent variant of the line color, marker color, or marker line color, whichever is available.
- `hoverinfo`: Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.
- `hoverinfosrc`: Sets the source reference on Chart Studio Cloud for  hoverinfo .
- `hoverlabel`: 
- `hoveron`: Do the hover effects highlight individual points (markers or line points) or do they highlight filled regions? If the fill is *toself* or *tonext* and there are no markers or text, then the default is *fills*, otherwise it is *points*.
- `hovertemplate`: Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example "y: %{y}". Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example "Price: %{y:$.2f}". https://github.com/d3/d3-3.x-api-reference/blob/master/Formatting.md#d3_format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example "Day: %{2019-01-01|%A}". https://github.com/d3/d3-time-format#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available.  Anything contained in tag `<extra>` is displayed in the secondary box, for example "<extra>{fullData.name}</extra>". To hide the secondary box completely, use an empty tag `<extra></extra>`.
- `hovertemplatesrc`: Sets the source reference on Chart Studio Cloud for  hovertemplate .
- `hovertext`: Sets hover text elements associated with each (a,b) point. If a single string, the same string appears over all the data points. If an array of strings, the items are mapped in order to the the data points in (a,b). To be seen, trace `hoverinfo` must contain a *text* flag.
- `hovertextsrc`: Sets the source reference on Chart Studio Cloud for  hovertext .
- `ids`: Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.
- `idssrc`: Sets the source reference on Chart Studio Cloud for  ids .
- `legendgroup`: Sets the legend group for this trace. Traces part of the same legend group hide/show at the same time when toggling legend items.
- `line`: 
- `marker`: 
- `meta`: Assigns extra meta information associated with this trace that can be used in various text attributes. Attributes such as trace `name`, graph, axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues` and `sliders` `label` text all support `meta`. To access the trace `meta` values in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the index or key of the `meta` item in question. To access trace `meta` in layout attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta` and `n` is the trace index.
- `metasrc`: Sets the source reference on Chart Studio Cloud for  meta .
- `mode`: Determines the drawing mode for this scatter trace. If the provided `mode` includes *text* then the `text` elements appear at the coordinates. Otherwise, the `text` elements appear on hover. If there are less than 20 points and the trace is not stacked then the default is *lines+markers*. Otherwise, *lines*.
- `name`: Sets the trace name. The trace name appear as the legend item and on hover.
- `opacity`: Sets the opacity of the trace.
- `selected`: 
- `selectedpoints`: Array containing integer indices of selected points. Has an effect only for traces that support selections. Note that an empty array means an empty selection where the `unselected` are turned on for all points, whereas, any other non-array values means no selection all where the `selected` and `unselected` styles have no effect.
- `showlegend`: Determines whether or not an item corresponding to this trace is shown in the legend.
- `stream`: 
- `text`: Sets text elements associated with each (a,b) point. If a single string, the same string appears over all the data points. If an array of strings, the items are mapped in order to the the data points in (a,b). If trace `hoverinfo` contains a *text* flag and *hovertext* is not set, these elements will be seen in the hover labels.
- `textfont`: Sets the text font.
- `textposition`: Sets the positions of the `text` elements with respects to the (x,y) coordinates.
- `textpositionsrc`: Sets the source reference on Chart Studio Cloud for  textposition .
- `textsrc`: Sets the source reference on Chart Studio Cloud for  text .
- `texttemplate`: Template string used for rendering the information text that appear on points. Note that this will override `textinfo`. Variables are inserted using %{variable}, for example "y: %{y}". Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example "Price: %{y:$.2f}". https://github.com/d3/d3-3.x-api-reference/blob/master/Formatting.md#d3_format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example "Day: %{2019-01-01|%A}". https://github.com/d3/d3-time-format#locale_format for details on the date formatting syntax. Every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. variables `a`, `b` and `text`.
- `texttemplatesrc`: Sets the source reference on Chart Studio Cloud for  texttemplate .
- `transforms`: 
- `type`: scattercarpet
- `uid`: Assign an id to this trace, Use this to provide object constancy between traces during animations and transitions.
- `uirevision`: Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves.
- `unselected`: 
- `visible`: Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).
- `xaxis`: Sets a reference between this trace's x coordinates and a 2D cartesian x axis. If *x* (the default value), the x coordinates refer to `layout.xaxis`. If *x2*, the x coordinates refer to `layout.xaxis2`, and so on.
- `yaxis`: Sets a reference between this trace's y coordinates and a 2D cartesian y axis. If *y* (the default value), the y coordinates refer to `layout.yaxis`. If *y2*, the y coordinates refer to `layout.yaxis2`, and so on.

"""
function scattercarpet(; kw...)
    for k in keys(kw)
        k in (:a, :asrc, :b, :bsrc, :carpet, :connectgaps, :customdata, :customdatasrc, :fill, :fillcolor, :hoverinfo, :hoverinfosrc, :hoverlabel, :hoveron, :hovertemplate, :hovertemplatesrc, :hovertext, :hovertextsrc, :ids, :idssrc, :legendgroup, :line, :marker, :meta, :metasrc, :mode, :name, :opacity, :selected, :selectedpoints, :showlegend, :stream, :text, :textfont, :textposition, :textpositionsrc, :textsrc, :texttemplate, :texttemplatesrc, :transforms, :type, :uid, :uirevision, :unselected, :visible, :xaxis, :yaxis) || @warn "Function `scattercarpet` does not have attribute `$k`"
    end
    Plot(; type=:scattercarpet, kw...)
end

#-----------------------------------------------------------------------------# scattergeo
export scattergeo
"""
    scattergeo(; kw...) --> Plot(type=:scattergeo, kw...)

Create a Plotly trace of type `scattergeo` with the given `kw` attributes.  Attributes will be
validated against the Plotly schema.  Available attributes for `scattergeo` are:

- `connectgaps`: Determines whether or not gaps (i.e. {nan} or missing values) in the provided data arrays are connected.
- `customdata`: Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, *scatter* traces also appends customdata items in the markers DOM elements
- `customdatasrc`: Sets the source reference on Chart Studio Cloud for  customdata .
- `featureidkey`: Sets the key in GeoJSON features which is used as id to match the items included in the `locations` array. Only has an effect when `geojson` is set. Support nested property, for example *properties.name*.
- `fill`: Sets the area to fill with a solid color. Use with `fillcolor` if not *none*. *toself* connects the endpoints of the trace (or each segment of the trace if it has gaps) into a closed shape.
- `fillcolor`: Sets the fill color. Defaults to a half-transparent variant of the line color, marker color, or marker line color, whichever is available.
- `geo`: Sets a reference between this trace's geospatial coordinates and a geographic map. If *geo* (the default value), the geospatial coordinates refer to `layout.geo`. If *geo2*, the geospatial coordinates refer to `layout.geo2`, and so on.
- `geojson`: Sets optional GeoJSON data associated with this trace. If not given, the features on the base map are used when `locations` is set. It can be set as a valid GeoJSON object or as a URL string. Note that we only accept GeoJSONs of type *FeatureCollection* or *Feature* with geometries of type *Polygon* or *MultiPolygon*.
- `hoverinfo`: Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.
- `hoverinfosrc`: Sets the source reference on Chart Studio Cloud for  hoverinfo .
- `hoverlabel`: 
- `hovertemplate`: Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example "y: %{y}". Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example "Price: %{y:$.2f}". https://github.com/d3/d3-3.x-api-reference/blob/master/Formatting.md#d3_format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example "Day: %{2019-01-01|%A}". https://github.com/d3/d3-time-format#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available.  Anything contained in tag `<extra>` is displayed in the secondary box, for example "<extra>{fullData.name}</extra>". To hide the secondary box completely, use an empty tag `<extra></extra>`.
- `hovertemplatesrc`: Sets the source reference on Chart Studio Cloud for  hovertemplate .
- `hovertext`: Sets hover text elements associated with each (lon,lat) pair or item in `locations`. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (lon,lat) or `locations` coordinates. To be seen, trace `hoverinfo` must contain a *text* flag.
- `hovertextsrc`: Sets the source reference on Chart Studio Cloud for  hovertext .
- `ids`: Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.
- `idssrc`: Sets the source reference on Chart Studio Cloud for  ids .
- `lat`: Sets the latitude coordinates (in degrees North).
- `latsrc`: Sets the source reference on Chart Studio Cloud for  lat .
- `legendgroup`: Sets the legend group for this trace. Traces part of the same legend group hide/show at the same time when toggling legend items.
- `line`: 
- `locationmode`: Determines the set of locations used to match entries in `locations` to regions on the map. Values *ISO-3*, *USA-states*, *country names* correspond to features on the base map and value *geojson-id* corresponds to features from a custom GeoJSON linked to the `geojson` attribute.
- `locations`: Sets the coordinates via location IDs or names. Coordinates correspond to the centroid of each location given. See `locationmode` for more info.
- `locationssrc`: Sets the source reference on Chart Studio Cloud for  locations .
- `lon`: Sets the longitude coordinates (in degrees East).
- `lonsrc`: Sets the source reference on Chart Studio Cloud for  lon .
- `marker`: 
- `meta`: Assigns extra meta information associated with this trace that can be used in various text attributes. Attributes such as trace `name`, graph, axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues` and `sliders` `label` text all support `meta`. To access the trace `meta` values in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the index or key of the `meta` item in question. To access trace `meta` in layout attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta` and `n` is the trace index.
- `metasrc`: Sets the source reference on Chart Studio Cloud for  meta .
- `mode`: Determines the drawing mode for this scatter trace. If the provided `mode` includes *text* then the `text` elements appear at the coordinates. Otherwise, the `text` elements appear on hover. If there are less than 20 points and the trace is not stacked then the default is *lines+markers*. Otherwise, *lines*.
- `name`: Sets the trace name. The trace name appear as the legend item and on hover.
- `opacity`: Sets the opacity of the trace.
- `selected`: 
- `selectedpoints`: Array containing integer indices of selected points. Has an effect only for traces that support selections. Note that an empty array means an empty selection where the `unselected` are turned on for all points, whereas, any other non-array values means no selection all where the `selected` and `unselected` styles have no effect.
- `showlegend`: Determines whether or not an item corresponding to this trace is shown in the legend.
- `stream`: 
- `text`: Sets text elements associated with each (lon,lat) pair or item in `locations`. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (lon,lat) or `locations` coordinates. If trace `hoverinfo` contains a *text* flag and *hovertext* is not set, these elements will be seen in the hover labels.
- `textfont`: Sets the text font.
- `textposition`: Sets the positions of the `text` elements with respects to the (x,y) coordinates.
- `textpositionsrc`: Sets the source reference on Chart Studio Cloud for  textposition .
- `textsrc`: Sets the source reference on Chart Studio Cloud for  text .
- `texttemplate`: Template string used for rendering the information text that appear on points. Note that this will override `textinfo`. Variables are inserted using %{variable}, for example "y: %{y}". Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example "Price: %{y:$.2f}". https://github.com/d3/d3-3.x-api-reference/blob/master/Formatting.md#d3_format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example "Day: %{2019-01-01|%A}". https://github.com/d3/d3-time-format#locale_format for details on the date formatting syntax. Every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. variables `lat`, `lon`, `location` and `text`.
- `texttemplatesrc`: Sets the source reference on Chart Studio Cloud for  texttemplate .
- `transforms`: 
- `type`: scattergeo
- `uid`: Assign an id to this trace, Use this to provide object constancy between traces during animations and transitions.
- `uirevision`: Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves.
- `unselected`: 
- `visible`: Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).

"""
function scattergeo(; kw...)
    for k in keys(kw)
        k in (:connectgaps, :customdata, :customdatasrc, :featureidkey, :fill, :fillcolor, :geo, :geojson, :hoverinfo, :hoverinfosrc, :hoverlabel, :hovertemplate, :hovertemplatesrc, :hovertext, :hovertextsrc, :ids, :idssrc, :lat, :latsrc, :legendgroup, :line, :locationmode, :locations, :locationssrc, :lon, :lonsrc, :marker, :meta, :metasrc, :mode, :name, :opacity, :selected, :selectedpoints, :showlegend, :stream, :text, :textfont, :textposition, :textpositionsrc, :textsrc, :texttemplate, :texttemplatesrc, :transforms, :type, :uid, :uirevision, :unselected, :visible) || @warn "Function `scattergeo` does not have attribute `$k`"
    end
    Plot(; type=:scattergeo, kw...)
end

#-----------------------------------------------------------------------------# scattergl
export scattergl
"""
    scattergl(; kw...) --> Plot(type=:scattergl, kw...)

Create a Plotly trace of type `scattergl` with the given `kw` attributes.  Attributes will be
validated against the Plotly schema.  Available attributes for `scattergl` are:

- `connectgaps`: Determines whether or not gaps (i.e. {nan} or missing values) in the provided data arrays are connected.
- `customdata`: Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, *scatter* traces also appends customdata items in the markers DOM elements
- `customdatasrc`: Sets the source reference on Chart Studio Cloud for  customdata .
- `dx`: Sets the x coordinate step. See `x0` for more info.
- `dy`: Sets the y coordinate step. See `y0` for more info.
- `error_x`: 
- `error_y`: 
- `fill`: Sets the area to fill with a solid color. Defaults to *none* unless this trace is stacked, then it gets *tonexty* (*tonextx*) if `orientation` is *v* (*h*) Use with `fillcolor` if not *none*. *tozerox* and *tozeroy* fill to x=0 and y=0 respectively. *tonextx* and *tonexty* fill between the endpoints of this trace and the endpoints of the trace before it, connecting those endpoints with straight lines (to make a stacked area graph); if there is no trace before it, they behave like *tozerox* and *tozeroy*. *toself* connects the endpoints of the trace (or each segment of the trace if it has gaps) into a closed shape. *tonext* fills the space between two traces if one completely encloses the other (eg consecutive contour lines), and behaves like *toself* if there is no trace before it. *tonext* should not be used if one trace does not enclose the other. Traces in a `stackgroup` will only fill to (or be filled to) other traces in the same group. With multiple `stackgroup`s or some traces stacked and some not, if fill-linked traces are not already consecutive, the later ones will be pushed down in the drawing order.
- `fillcolor`: Sets the fill color. Defaults to a half-transparent variant of the line color, marker color, or marker line color, whichever is available.
- `hoverinfo`: Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.
- `hoverinfosrc`: Sets the source reference on Chart Studio Cloud for  hoverinfo .
- `hoverlabel`: 
- `hovertemplate`: Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example "y: %{y}". Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example "Price: %{y:$.2f}". https://github.com/d3/d3-3.x-api-reference/blob/master/Formatting.md#d3_format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example "Day: %{2019-01-01|%A}". https://github.com/d3/d3-time-format#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available.  Anything contained in tag `<extra>` is displayed in the secondary box, for example "<extra>{fullData.name}</extra>". To hide the secondary box completely, use an empty tag `<extra></extra>`.
- `hovertemplatesrc`: Sets the source reference on Chart Studio Cloud for  hovertemplate .
- `hovertext`: Sets hover text elements associated with each (x,y) pair. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates. To be seen, trace `hoverinfo` must contain a *text* flag.
- `hovertextsrc`: Sets the source reference on Chart Studio Cloud for  hovertext .
- `ids`: Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.
- `idssrc`: Sets the source reference on Chart Studio Cloud for  ids .
- `legendgroup`: Sets the legend group for this trace. Traces part of the same legend group hide/show at the same time when toggling legend items.
- `line`: 
- `marker`: 
- `meta`: Assigns extra meta information associated with this trace that can be used in various text attributes. Attributes such as trace `name`, graph, axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues` and `sliders` `label` text all support `meta`. To access the trace `meta` values in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the index or key of the `meta` item in question. To access trace `meta` in layout attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta` and `n` is the trace index.
- `metasrc`: Sets the source reference on Chart Studio Cloud for  meta .
- `mode`: Determines the drawing mode for this scatter trace.
- `name`: Sets the trace name. The trace name appear as the legend item and on hover.
- `opacity`: Sets the opacity of the trace.
- `selected`: 
- `selectedpoints`: Array containing integer indices of selected points. Has an effect only for traces that support selections. Note that an empty array means an empty selection where the `unselected` are turned on for all points, whereas, any other non-array values means no selection all where the `selected` and `unselected` styles have no effect.
- `showlegend`: Determines whether or not an item corresponding to this trace is shown in the legend.
- `stream`: 
- `text`: Sets text elements associated with each (x,y) pair. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates. If trace `hoverinfo` contains a *text* flag and *hovertext* is not set, these elements will be seen in the hover labels.
- `textfont`: Sets the text font.
- `textposition`: Sets the positions of the `text` elements with respects to the (x,y) coordinates.
- `textpositionsrc`: Sets the source reference on Chart Studio Cloud for  textposition .
- `textsrc`: Sets the source reference on Chart Studio Cloud for  text .
- `texttemplate`: Template string used for rendering the information text that appear on points. Note that this will override `textinfo`. Variables are inserted using %{variable}, for example "y: %{y}". Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example "Price: %{y:$.2f}". https://github.com/d3/d3-3.x-api-reference/blob/master/Formatting.md#d3_format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example "Day: %{2019-01-01|%A}". https://github.com/d3/d3-time-format#locale_format for details on the date formatting syntax. Every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. 
- `texttemplatesrc`: Sets the source reference on Chart Studio Cloud for  texttemplate .
- `transforms`: 
- `type`: scattergl
- `uid`: Assign an id to this trace, Use this to provide object constancy between traces during animations and transitions.
- `uirevision`: Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves.
- `unselected`: 
- `visible`: Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).
- `x`: Sets the x coordinates.
- `x0`: Alternate to `x`. Builds a linear space of x coordinates. Use with `dx` where `x0` is the starting coordinate and `dx` the step.
- `xaxis`: Sets a reference between this trace's x coordinates and a 2D cartesian x axis. If *x* (the default value), the x coordinates refer to `layout.xaxis`. If *x2*, the x coordinates refer to `layout.xaxis2`, and so on.
- `xcalendar`: Sets the calendar system to use with `x` date data.
- `xperiod`: Only relevant when the axis `type` is *date*. Sets the period positioning in milliseconds or *M<n>* on the x axis. Special values in the form of *M<n>* could be used to declare the number of months. In this case `n` must be a positive integer.
- `xperiod0`: Only relevant when the axis `type` is *date*. Sets the base for period positioning in milliseconds or date string on the x0 axis. When `x0period` is round number of weeks, the `x0period0` by default would be on a Sunday i.e. 2000-01-02, otherwise it would be at 2000-01-01.
- `xperiodalignment`: Only relevant when the axis `type` is *date*. Sets the alignment of data points on the x axis.
- `xsrc`: Sets the source reference on Chart Studio Cloud for  x .
- `y`: Sets the y coordinates.
- `y0`: Alternate to `y`. Builds a linear space of y coordinates. Use with `dy` where `y0` is the starting coordinate and `dy` the step.
- `yaxis`: Sets a reference between this trace's y coordinates and a 2D cartesian y axis. If *y* (the default value), the y coordinates refer to `layout.yaxis`. If *y2*, the y coordinates refer to `layout.yaxis2`, and so on.
- `ycalendar`: Sets the calendar system to use with `y` date data.
- `yperiod`: Only relevant when the axis `type` is *date*. Sets the period positioning in milliseconds or *M<n>* on the y axis. Special values in the form of *M<n>* could be used to declare the number of months. In this case `n` must be a positive integer.
- `yperiod0`: Only relevant when the axis `type` is *date*. Sets the base for period positioning in milliseconds or date string on the y0 axis. When `y0period` is round number of weeks, the `y0period0` by default would be on a Sunday i.e. 2000-01-02, otherwise it would be at 2000-01-01.
- `yperiodalignment`: Only relevant when the axis `type` is *date*. Sets the alignment of data points on the y axis.
- `ysrc`: Sets the source reference on Chart Studio Cloud for  y .

"""
function scattergl(; kw...)
    for k in keys(kw)
        k in (:connectgaps, :customdata, :customdatasrc, :dx, :dy, :error_x, :error_y, :fill, :fillcolor, :hoverinfo, :hoverinfosrc, :hoverlabel, :hovertemplate, :hovertemplatesrc, :hovertext, :hovertextsrc, :ids, :idssrc, :legendgroup, :line, :marker, :meta, :metasrc, :mode, :name, :opacity, :selected, :selectedpoints, :showlegend, :stream, :text, :textfont, :textposition, :textpositionsrc, :textsrc, :texttemplate, :texttemplatesrc, :transforms, :type, :uid, :uirevision, :unselected, :visible, :x, :x0, :xaxis, :xcalendar, :xperiod, :xperiod0, :xperiodalignment, :xsrc, :y, :y0, :yaxis, :ycalendar, :yperiod, :yperiod0, :yperiodalignment, :ysrc) || @warn "Function `scattergl` does not have attribute `$k`"
    end
    Plot(; type=:scattergl, kw...)
end

#-----------------------------------------------------------------------------# scattermapbox
export scattermapbox
"""
    scattermapbox(; kw...) --> Plot(type=:scattermapbox, kw...)

Create a Plotly trace of type `scattermapbox` with the given `kw` attributes.  Attributes will be
validated against the Plotly schema.  Available attributes for `scattermapbox` are:

- `below`: Determines if this scattermapbox trace's layers are to be inserted before the layer with the specified ID. By default, scattermapbox layers are inserted above all the base layers. To place the scattermapbox layers above every other layer, set `below` to *''*.
- `connectgaps`: Determines whether or not gaps (i.e. {nan} or missing values) in the provided data arrays are connected.
- `customdata`: Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, *scatter* traces also appends customdata items in the markers DOM elements
- `customdatasrc`: Sets the source reference on Chart Studio Cloud for  customdata .
- `fill`: Sets the area to fill with a solid color. Use with `fillcolor` if not *none*. *toself* connects the endpoints of the trace (or each segment of the trace if it has gaps) into a closed shape.
- `fillcolor`: Sets the fill color. Defaults to a half-transparent variant of the line color, marker color, or marker line color, whichever is available.
- `hoverinfo`: Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.
- `hoverinfosrc`: Sets the source reference on Chart Studio Cloud for  hoverinfo .
- `hoverlabel`: 
- `hovertemplate`: Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example "y: %{y}". Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example "Price: %{y:$.2f}". https://github.com/d3/d3-3.x-api-reference/blob/master/Formatting.md#d3_format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example "Day: %{2019-01-01|%A}". https://github.com/d3/d3-time-format#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available.  Anything contained in tag `<extra>` is displayed in the secondary box, for example "<extra>{fullData.name}</extra>". To hide the secondary box completely, use an empty tag `<extra></extra>`.
- `hovertemplatesrc`: Sets the source reference on Chart Studio Cloud for  hovertemplate .
- `hovertext`: Sets hover text elements associated with each (lon,lat) pair If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (lon,lat) coordinates. To be seen, trace `hoverinfo` must contain a *text* flag.
- `hovertextsrc`: Sets the source reference on Chart Studio Cloud for  hovertext .
- `ids`: Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.
- `idssrc`: Sets the source reference on Chart Studio Cloud for  ids .
- `lat`: Sets the latitude coordinates (in degrees North).
- `latsrc`: Sets the source reference on Chart Studio Cloud for  lat .
- `legendgroup`: Sets the legend group for this trace. Traces part of the same legend group hide/show at the same time when toggling legend items.
- `line`: 
- `lon`: Sets the longitude coordinates (in degrees East).
- `lonsrc`: Sets the source reference on Chart Studio Cloud for  lon .
- `marker`: 
- `meta`: Assigns extra meta information associated with this trace that can be used in various text attributes. Attributes such as trace `name`, graph, axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues` and `sliders` `label` text all support `meta`. To access the trace `meta` values in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the index or key of the `meta` item in question. To access trace `meta` in layout attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta` and `n` is the trace index.
- `metasrc`: Sets the source reference on Chart Studio Cloud for  meta .
- `mode`: Determines the drawing mode for this scatter trace. If the provided `mode` includes *text* then the `text` elements appear at the coordinates. Otherwise, the `text` elements appear on hover.
- `name`: Sets the trace name. The trace name appear as the legend item and on hover.
- `opacity`: Sets the opacity of the trace.
- `selected`: 
- `selectedpoints`: Array containing integer indices of selected points. Has an effect only for traces that support selections. Note that an empty array means an empty selection where the `unselected` are turned on for all points, whereas, any other non-array values means no selection all where the `selected` and `unselected` styles have no effect.
- `showlegend`: Determines whether or not an item corresponding to this trace is shown in the legend.
- `stream`: 
- `subplot`: Sets a reference between this trace's data coordinates and a mapbox subplot. If *mapbox* (the default value), the data refer to `layout.mapbox`. If *mapbox2*, the data refer to `layout.mapbox2`, and so on.
- `text`: Sets text elements associated with each (lon,lat) pair If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (lon,lat) coordinates. If trace `hoverinfo` contains a *text* flag and *hovertext* is not set, these elements will be seen in the hover labels.
- `textfont`: Sets the icon text font (color=mapbox.layer.paint.text-color, size=mapbox.layer.layout.text-size). Has an effect only when `type` is set to *symbol*.
- `textposition`: Sets the positions of the `text` elements with respects to the (x,y) coordinates.
- `textsrc`: Sets the source reference on Chart Studio Cloud for  text .
- `texttemplate`: Template string used for rendering the information text that appear on points. Note that this will override `textinfo`. Variables are inserted using %{variable}, for example "y: %{y}". Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example "Price: %{y:$.2f}". https://github.com/d3/d3-3.x-api-reference/blob/master/Formatting.md#d3_format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example "Day: %{2019-01-01|%A}". https://github.com/d3/d3-time-format#locale_format for details on the date formatting syntax. Every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. variables `lat`, `lon` and `text`.
- `texttemplatesrc`: Sets the source reference on Chart Studio Cloud for  texttemplate .
- `transforms`: 
- `type`: scattermapbox
- `uid`: Assign an id to this trace, Use this to provide object constancy between traces during animations and transitions.
- `uirevision`: Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves.
- `unselected`: 
- `visible`: Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).

"""
function scattermapbox(; kw...)
    for k in keys(kw)
        k in (:below, :connectgaps, :customdata, :customdatasrc, :fill, :fillcolor, :hoverinfo, :hoverinfosrc, :hoverlabel, :hovertemplate, :hovertemplatesrc, :hovertext, :hovertextsrc, :ids, :idssrc, :lat, :latsrc, :legendgroup, :line, :lon, :lonsrc, :marker, :meta, :metasrc, :mode, :name, :opacity, :selected, :selectedpoints, :showlegend, :stream, :subplot, :text, :textfont, :textposition, :textsrc, :texttemplate, :texttemplatesrc, :transforms, :type, :uid, :uirevision, :unselected, :visible) || @warn "Function `scattermapbox` does not have attribute `$k`"
    end
    Plot(; type=:scattermapbox, kw...)
end

#-----------------------------------------------------------------------------# scatterpolar
export scatterpolar
"""
    scatterpolar(; kw...) --> Plot(type=:scatterpolar, kw...)

Create a Plotly trace of type `scatterpolar` with the given `kw` attributes.  Attributes will be
validated against the Plotly schema.  Available attributes for `scatterpolar` are:

- `cliponaxis`: Determines whether or not markers and text nodes are clipped about the subplot axes. To show markers and text nodes above axis lines and tick labels, make sure to set `xaxis.layer` and `yaxis.layer` to *below traces*.
- `connectgaps`: Determines whether or not gaps (i.e. {nan} or missing values) in the provided data arrays are connected.
- `customdata`: Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, *scatter* traces also appends customdata items in the markers DOM elements
- `customdatasrc`: Sets the source reference on Chart Studio Cloud for  customdata .
- `dr`: Sets the r coordinate step.
- `dtheta`: Sets the theta coordinate step. By default, the `dtheta` step equals the subplot's period divided by the length of the `r` coordinates.
- `fill`: Sets the area to fill with a solid color. Use with `fillcolor` if not *none*. scatterpolar has a subset of the options available to scatter. *toself* connects the endpoints of the trace (or each segment of the trace if it has gaps) into a closed shape. *tonext* fills the space between two traces if one completely encloses the other (eg consecutive contour lines), and behaves like *toself* if there is no trace before it. *tonext* should not be used if one trace does not enclose the other.
- `fillcolor`: Sets the fill color. Defaults to a half-transparent variant of the line color, marker color, or marker line color, whichever is available.
- `hoverinfo`: Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.
- `hoverinfosrc`: Sets the source reference on Chart Studio Cloud for  hoverinfo .
- `hoverlabel`: 
- `hoveron`: Do the hover effects highlight individual points (markers or line points) or do they highlight filled regions? If the fill is *toself* or *tonext* and there are no markers or text, then the default is *fills*, otherwise it is *points*.
- `hovertemplate`: Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example "y: %{y}". Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example "Price: %{y:$.2f}". https://github.com/d3/d3-3.x-api-reference/blob/master/Formatting.md#d3_format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example "Day: %{2019-01-01|%A}". https://github.com/d3/d3-time-format#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available.  Anything contained in tag `<extra>` is displayed in the secondary box, for example "<extra>{fullData.name}</extra>". To hide the secondary box completely, use an empty tag `<extra></extra>`.
- `hovertemplatesrc`: Sets the source reference on Chart Studio Cloud for  hovertemplate .
- `hovertext`: Sets hover text elements associated with each (x,y) pair. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates. To be seen, trace `hoverinfo` must contain a *text* flag.
- `hovertextsrc`: Sets the source reference on Chart Studio Cloud for  hovertext .
- `ids`: Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.
- `idssrc`: Sets the source reference on Chart Studio Cloud for  ids .
- `legendgroup`: Sets the legend group for this trace. Traces part of the same legend group hide/show at the same time when toggling legend items.
- `line`: 
- `marker`: 
- `meta`: Assigns extra meta information associated with this trace that can be used in various text attributes. Attributes such as trace `name`, graph, axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues` and `sliders` `label` text all support `meta`. To access the trace `meta` values in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the index or key of the `meta` item in question. To access trace `meta` in layout attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta` and `n` is the trace index.
- `metasrc`: Sets the source reference on Chart Studio Cloud for  meta .
- `mode`: Determines the drawing mode for this scatter trace. If the provided `mode` includes *text* then the `text` elements appear at the coordinates. Otherwise, the `text` elements appear on hover. If there are less than 20 points and the trace is not stacked then the default is *lines+markers*. Otherwise, *lines*.
- `name`: Sets the trace name. The trace name appear as the legend item and on hover.
- `opacity`: Sets the opacity of the trace.
- `r`: Sets the radial coordinates
- `r0`: Alternate to `r`. Builds a linear space of r coordinates. Use with `dr` where `r0` is the starting coordinate and `dr` the step.
- `rsrc`: Sets the source reference on Chart Studio Cloud for  r .
- `selected`: 
- `selectedpoints`: Array containing integer indices of selected points. Has an effect only for traces that support selections. Note that an empty array means an empty selection where the `unselected` are turned on for all points, whereas, any other non-array values means no selection all where the `selected` and `unselected` styles have no effect.
- `showlegend`: Determines whether or not an item corresponding to this trace is shown in the legend.
- `stream`: 
- `subplot`: Sets a reference between this trace's data coordinates and a polar subplot. If *polar* (the default value), the data refer to `layout.polar`. If *polar2*, the data refer to `layout.polar2`, and so on.
- `text`: Sets text elements associated with each (x,y) pair. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates. If trace `hoverinfo` contains a *text* flag and *hovertext* is not set, these elements will be seen in the hover labels.
- `textfont`: Sets the text font.
- `textposition`: Sets the positions of the `text` elements with respects to the (x,y) coordinates.
- `textpositionsrc`: Sets the source reference on Chart Studio Cloud for  textposition .
- `textsrc`: Sets the source reference on Chart Studio Cloud for  text .
- `texttemplate`: Template string used for rendering the information text that appear on points. Note that this will override `textinfo`. Variables are inserted using %{variable}, for example "y: %{y}". Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example "Price: %{y:$.2f}". https://github.com/d3/d3-3.x-api-reference/blob/master/Formatting.md#d3_format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example "Day: %{2019-01-01|%A}". https://github.com/d3/d3-time-format#locale_format for details on the date formatting syntax. Every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. variables `r`, `theta` and `text`.
- `texttemplatesrc`: Sets the source reference on Chart Studio Cloud for  texttemplate .
- `theta`: Sets the angular coordinates
- `theta0`: Alternate to `theta`. Builds a linear space of theta coordinates. Use with `dtheta` where `theta0` is the starting coordinate and `dtheta` the step.
- `thetasrc`: Sets the source reference on Chart Studio Cloud for  theta .
- `thetaunit`: Sets the unit of input *theta* values. Has an effect only when on *linear* angular axes.
- `transforms`: 
- `type`: scatterpolar
- `uid`: Assign an id to this trace, Use this to provide object constancy between traces during animations and transitions.
- `uirevision`: Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves.
- `unselected`: 
- `visible`: Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).

"""
function scatterpolar(; kw...)
    for k in keys(kw)
        k in (:cliponaxis, :connectgaps, :customdata, :customdatasrc, :dr, :dtheta, :fill, :fillcolor, :hoverinfo, :hoverinfosrc, :hoverlabel, :hoveron, :hovertemplate, :hovertemplatesrc, :hovertext, :hovertextsrc, :ids, :idssrc, :legendgroup, :line, :marker, :meta, :metasrc, :mode, :name, :opacity, :r, :r0, :rsrc, :selected, :selectedpoints, :showlegend, :stream, :subplot, :text, :textfont, :textposition, :textpositionsrc, :textsrc, :texttemplate, :texttemplatesrc, :theta, :theta0, :thetasrc, :thetaunit, :transforms, :type, :uid, :uirevision, :unselected, :visible) || @warn "Function `scatterpolar` does not have attribute `$k`"
    end
    Plot(; type=:scatterpolar, kw...)
end

#-----------------------------------------------------------------------------# scatterpolargl
export scatterpolargl
"""
    scatterpolargl(; kw...) --> Plot(type=:scatterpolargl, kw...)

Create a Plotly trace of type `scatterpolargl` with the given `kw` attributes.  Attributes will be
validated against the Plotly schema.  Available attributes for `scatterpolargl` are:

- `connectgaps`: Determines whether or not gaps (i.e. {nan} or missing values) in the provided data arrays are connected.
- `customdata`: Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, *scatter* traces also appends customdata items in the markers DOM elements
- `customdatasrc`: Sets the source reference on Chart Studio Cloud for  customdata .
- `dr`: Sets the r coordinate step.
- `dtheta`: Sets the theta coordinate step. By default, the `dtheta` step equals the subplot's period divided by the length of the `r` coordinates.
- `fill`: Sets the area to fill with a solid color. Defaults to *none* unless this trace is stacked, then it gets *tonexty* (*tonextx*) if `orientation` is *v* (*h*) Use with `fillcolor` if not *none*. *tozerox* and *tozeroy* fill to x=0 and y=0 respectively. *tonextx* and *tonexty* fill between the endpoints of this trace and the endpoints of the trace before it, connecting those endpoints with straight lines (to make a stacked area graph); if there is no trace before it, they behave like *tozerox* and *tozeroy*. *toself* connects the endpoints of the trace (or each segment of the trace if it has gaps) into a closed shape. *tonext* fills the space between two traces if one completely encloses the other (eg consecutive contour lines), and behaves like *toself* if there is no trace before it. *tonext* should not be used if one trace does not enclose the other. Traces in a `stackgroup` will only fill to (or be filled to) other traces in the same group. With multiple `stackgroup`s or some traces stacked and some not, if fill-linked traces are not already consecutive, the later ones will be pushed down in the drawing order.
- `fillcolor`: Sets the fill color. Defaults to a half-transparent variant of the line color, marker color, or marker line color, whichever is available.
- `hoverinfo`: Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.
- `hoverinfosrc`: Sets the source reference on Chart Studio Cloud for  hoverinfo .
- `hoverlabel`: 
- `hovertemplate`: Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example "y: %{y}". Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example "Price: %{y:$.2f}". https://github.com/d3/d3-3.x-api-reference/blob/master/Formatting.md#d3_format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example "Day: %{2019-01-01|%A}". https://github.com/d3/d3-time-format#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available.  Anything contained in tag `<extra>` is displayed in the secondary box, for example "<extra>{fullData.name}</extra>". To hide the secondary box completely, use an empty tag `<extra></extra>`.
- `hovertemplatesrc`: Sets the source reference on Chart Studio Cloud for  hovertemplate .
- `hovertext`: Sets hover text elements associated with each (x,y) pair. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates. To be seen, trace `hoverinfo` must contain a *text* flag.
- `hovertextsrc`: Sets the source reference on Chart Studio Cloud for  hovertext .
- `ids`: Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.
- `idssrc`: Sets the source reference on Chart Studio Cloud for  ids .
- `legendgroup`: Sets the legend group for this trace. Traces part of the same legend group hide/show at the same time when toggling legend items.
- `line`: 
- `marker`: 
- `meta`: Assigns extra meta information associated with this trace that can be used in various text attributes. Attributes such as trace `name`, graph, axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues` and `sliders` `label` text all support `meta`. To access the trace `meta` values in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the index or key of the `meta` item in question. To access trace `meta` in layout attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta` and `n` is the trace index.
- `metasrc`: Sets the source reference on Chart Studio Cloud for  meta .
- `mode`: Determines the drawing mode for this scatter trace. If the provided `mode` includes *text* then the `text` elements appear at the coordinates. Otherwise, the `text` elements appear on hover. If there are less than 20 points and the trace is not stacked then the default is *lines+markers*. Otherwise, *lines*.
- `name`: Sets the trace name. The trace name appear as the legend item and on hover.
- `opacity`: Sets the opacity of the trace.
- `r`: Sets the radial coordinates
- `r0`: Alternate to `r`. Builds a linear space of r coordinates. Use with `dr` where `r0` is the starting coordinate and `dr` the step.
- `rsrc`: Sets the source reference on Chart Studio Cloud for  r .
- `selected`: 
- `selectedpoints`: Array containing integer indices of selected points. Has an effect only for traces that support selections. Note that an empty array means an empty selection where the `unselected` are turned on for all points, whereas, any other non-array values means no selection all where the `selected` and `unselected` styles have no effect.
- `showlegend`: Determines whether or not an item corresponding to this trace is shown in the legend.
- `stream`: 
- `subplot`: Sets a reference between this trace's data coordinates and a polar subplot. If *polar* (the default value), the data refer to `layout.polar`. If *polar2*, the data refer to `layout.polar2`, and so on.
- `text`: Sets text elements associated with each (x,y) pair. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates. If trace `hoverinfo` contains a *text* flag and *hovertext* is not set, these elements will be seen in the hover labels.
- `textfont`: Sets the text font.
- `textposition`: Sets the positions of the `text` elements with respects to the (x,y) coordinates.
- `textpositionsrc`: Sets the source reference on Chart Studio Cloud for  textposition .
- `textsrc`: Sets the source reference on Chart Studio Cloud for  text .
- `texttemplate`: Template string used for rendering the information text that appear on points. Note that this will override `textinfo`. Variables are inserted using %{variable}, for example "y: %{y}". Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example "Price: %{y:$.2f}". https://github.com/d3/d3-3.x-api-reference/blob/master/Formatting.md#d3_format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example "Day: %{2019-01-01|%A}". https://github.com/d3/d3-time-format#locale_format for details on the date formatting syntax. Every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. variables `r`, `theta` and `text`.
- `texttemplatesrc`: Sets the source reference on Chart Studio Cloud for  texttemplate .
- `theta`: Sets the angular coordinates
- `theta0`: Alternate to `theta`. Builds a linear space of theta coordinates. Use with `dtheta` where `theta0` is the starting coordinate and `dtheta` the step.
- `thetasrc`: Sets the source reference on Chart Studio Cloud for  theta .
- `thetaunit`: Sets the unit of input *theta* values. Has an effect only when on *linear* angular axes.
- `transforms`: 
- `type`: scatterpolargl
- `uid`: Assign an id to this trace, Use this to provide object constancy between traces during animations and transitions.
- `uirevision`: Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves.
- `unselected`: 
- `visible`: Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).

"""
function scatterpolargl(; kw...)
    for k in keys(kw)
        k in (:connectgaps, :customdata, :customdatasrc, :dr, :dtheta, :fill, :fillcolor, :hoverinfo, :hoverinfosrc, :hoverlabel, :hovertemplate, :hovertemplatesrc, :hovertext, :hovertextsrc, :ids, :idssrc, :legendgroup, :line, :marker, :meta, :metasrc, :mode, :name, :opacity, :r, :r0, :rsrc, :selected, :selectedpoints, :showlegend, :stream, :subplot, :text, :textfont, :textposition, :textpositionsrc, :textsrc, :texttemplate, :texttemplatesrc, :theta, :theta0, :thetasrc, :thetaunit, :transforms, :type, :uid, :uirevision, :unselected, :visible) || @warn "Function `scatterpolargl` does not have attribute `$k`"
    end
    Plot(; type=:scatterpolargl, kw...)
end

#-----------------------------------------------------------------------------# scatterternary
export scatterternary
"""
    scatterternary(; kw...) --> Plot(type=:scatterternary, kw...)

Create a Plotly trace of type `scatterternary` with the given `kw` attributes.  Attributes will be
validated against the Plotly schema.  Available attributes for `scatterternary` are:

- `a`: Sets the quantity of component `a` in each data point. If `a`, `b`, and `c` are all provided, they need not be normalized, only the relative values matter. If only two arrays are provided they must be normalized to match `ternary<i>.sum`.
- `asrc`: Sets the source reference on Chart Studio Cloud for  a .
- `b`: Sets the quantity of component `a` in each data point. If `a`, `b`, and `c` are all provided, they need not be normalized, only the relative values matter. If only two arrays are provided they must be normalized to match `ternary<i>.sum`.
- `bsrc`: Sets the source reference on Chart Studio Cloud for  b .
- `c`: Sets the quantity of component `a` in each data point. If `a`, `b`, and `c` are all provided, they need not be normalized, only the relative values matter. If only two arrays are provided they must be normalized to match `ternary<i>.sum`.
- `cliponaxis`: Determines whether or not markers and text nodes are clipped about the subplot axes. To show markers and text nodes above axis lines and tick labels, make sure to set `xaxis.layer` and `yaxis.layer` to *below traces*.
- `connectgaps`: Determines whether or not gaps (i.e. {nan} or missing values) in the provided data arrays are connected.
- `csrc`: Sets the source reference on Chart Studio Cloud for  c .
- `customdata`: Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, *scatter* traces also appends customdata items in the markers DOM elements
- `customdatasrc`: Sets the source reference on Chart Studio Cloud for  customdata .
- `fill`: Sets the area to fill with a solid color. Use with `fillcolor` if not *none*. scatterternary has a subset of the options available to scatter. *toself* connects the endpoints of the trace (or each segment of the trace if it has gaps) into a closed shape. *tonext* fills the space between two traces if one completely encloses the other (eg consecutive contour lines), and behaves like *toself* if there is no trace before it. *tonext* should not be used if one trace does not enclose the other.
- `fillcolor`: Sets the fill color. Defaults to a half-transparent variant of the line color, marker color, or marker line color, whichever is available.
- `hoverinfo`: Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.
- `hoverinfosrc`: Sets the source reference on Chart Studio Cloud for  hoverinfo .
- `hoverlabel`: 
- `hoveron`: Do the hover effects highlight individual points (markers or line points) or do they highlight filled regions? If the fill is *toself* or *tonext* and there are no markers or text, then the default is *fills*, otherwise it is *points*.
- `hovertemplate`: Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example "y: %{y}". Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example "Price: %{y:$.2f}". https://github.com/d3/d3-3.x-api-reference/blob/master/Formatting.md#d3_format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example "Day: %{2019-01-01|%A}". https://github.com/d3/d3-time-format#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available.  Anything contained in tag `<extra>` is displayed in the secondary box, for example "<extra>{fullData.name}</extra>". To hide the secondary box completely, use an empty tag `<extra></extra>`.
- `hovertemplatesrc`: Sets the source reference on Chart Studio Cloud for  hovertemplate .
- `hovertext`: Sets hover text elements associated with each (a,b,c) point. If a single string, the same string appears over all the data points. If an array of strings, the items are mapped in order to the the data points in (a,b,c). To be seen, trace `hoverinfo` must contain a *text* flag.
- `hovertextsrc`: Sets the source reference on Chart Studio Cloud for  hovertext .
- `ids`: Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.
- `idssrc`: Sets the source reference on Chart Studio Cloud for  ids .
- `legendgroup`: Sets the legend group for this trace. Traces part of the same legend group hide/show at the same time when toggling legend items.
- `line`: 
- `marker`: 
- `meta`: Assigns extra meta information associated with this trace that can be used in various text attributes. Attributes such as trace `name`, graph, axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues` and `sliders` `label` text all support `meta`. To access the trace `meta` values in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the index or key of the `meta` item in question. To access trace `meta` in layout attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta` and `n` is the trace index.
- `metasrc`: Sets the source reference on Chart Studio Cloud for  meta .
- `mode`: Determines the drawing mode for this scatter trace. If the provided `mode` includes *text* then the `text` elements appear at the coordinates. Otherwise, the `text` elements appear on hover. If there are less than 20 points and the trace is not stacked then the default is *lines+markers*. Otherwise, *lines*.
- `name`: Sets the trace name. The trace name appear as the legend item and on hover.
- `opacity`: Sets the opacity of the trace.
- `selected`: 
- `selectedpoints`: Array containing integer indices of selected points. Has an effect only for traces that support selections. Note that an empty array means an empty selection where the `unselected` are turned on for all points, whereas, any other non-array values means no selection all where the `selected` and `unselected` styles have no effect.
- `showlegend`: Determines whether or not an item corresponding to this trace is shown in the legend.
- `stream`: 
- `subplot`: Sets a reference between this trace's data coordinates and a ternary subplot. If *ternary* (the default value), the data refer to `layout.ternary`. If *ternary2*, the data refer to `layout.ternary2`, and so on.
- `sum`: The number each triplet should sum to, if only two of `a`, `b`, and `c` are provided. This overrides `ternary<i>.sum` to normalize this specific trace, but does not affect the values displayed on the axes. 0 (or missing) means to use ternary<i>.sum
- `text`: Sets text elements associated with each (a,b,c) point. If a single string, the same string appears over all the data points. If an array of strings, the items are mapped in order to the the data points in (a,b,c). If trace `hoverinfo` contains a *text* flag and *hovertext* is not set, these elements will be seen in the hover labels.
- `textfont`: Sets the text font.
- `textposition`: Sets the positions of the `text` elements with respects to the (x,y) coordinates.
- `textpositionsrc`: Sets the source reference on Chart Studio Cloud for  textposition .
- `textsrc`: Sets the source reference on Chart Studio Cloud for  text .
- `texttemplate`: Template string used for rendering the information text that appear on points. Note that this will override `textinfo`. Variables are inserted using %{variable}, for example "y: %{y}". Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example "Price: %{y:$.2f}". https://github.com/d3/d3-3.x-api-reference/blob/master/Formatting.md#d3_format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example "Day: %{2019-01-01|%A}". https://github.com/d3/d3-time-format#locale_format for details on the date formatting syntax. Every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. variables `a`, `b`, `c` and `text`.
- `texttemplatesrc`: Sets the source reference on Chart Studio Cloud for  texttemplate .
- `transforms`: 
- `type`: scatterternary
- `uid`: Assign an id to this trace, Use this to provide object constancy between traces during animations and transitions.
- `uirevision`: Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves.
- `unselected`: 
- `visible`: Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).

"""
function scatterternary(; kw...)
    for k in keys(kw)
        k in (:a, :asrc, :b, :bsrc, :c, :cliponaxis, :connectgaps, :csrc, :customdata, :customdatasrc, :fill, :fillcolor, :hoverinfo, :hoverinfosrc, :hoverlabel, :hoveron, :hovertemplate, :hovertemplatesrc, :hovertext, :hovertextsrc, :ids, :idssrc, :legendgroup, :line, :marker, :meta, :metasrc, :mode, :name, :opacity, :selected, :selectedpoints, :showlegend, :stream, :subplot, :sum, :text, :textfont, :textposition, :textpositionsrc, :textsrc, :texttemplate, :texttemplatesrc, :transforms, :type, :uid, :uirevision, :unselected, :visible) || @warn "Function `scatterternary` does not have attribute `$k`"
    end
    Plot(; type=:scatterternary, kw...)
end

#-----------------------------------------------------------------------------# splom
export splom
"""
    splom(; kw...) --> Plot(type=:splom, kw...)

Create a Plotly trace of type `splom` with the given `kw` attributes.  Attributes will be
validated against the Plotly schema.  Available attributes for `splom` are:

- `customdata`: Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, *scatter* traces also appends customdata items in the markers DOM elements
- `customdatasrc`: Sets the source reference on Chart Studio Cloud for  customdata .
- `diagonal`: 
- `dimensions`: 
- `hoverinfo`: Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.
- `hoverinfosrc`: Sets the source reference on Chart Studio Cloud for  hoverinfo .
- `hoverlabel`: 
- `hovertemplate`: Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example "y: %{y}". Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example "Price: %{y:$.2f}". https://github.com/d3/d3-3.x-api-reference/blob/master/Formatting.md#d3_format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example "Day: %{2019-01-01|%A}". https://github.com/d3/d3-time-format#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available.  Anything contained in tag `<extra>` is displayed in the secondary box, for example "<extra>{fullData.name}</extra>". To hide the secondary box completely, use an empty tag `<extra></extra>`.
- `hovertemplatesrc`: Sets the source reference on Chart Studio Cloud for  hovertemplate .
- `hovertext`: Same as `text`.
- `hovertextsrc`: Sets the source reference on Chart Studio Cloud for  hovertext .
- `ids`: Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.
- `idssrc`: Sets the source reference on Chart Studio Cloud for  ids .
- `legendgroup`: Sets the legend group for this trace. Traces part of the same legend group hide/show at the same time when toggling legend items.
- `marker`: 
- `meta`: Assigns extra meta information associated with this trace that can be used in various text attributes. Attributes such as trace `name`, graph, axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues` and `sliders` `label` text all support `meta`. To access the trace `meta` values in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the index or key of the `meta` item in question. To access trace `meta` in layout attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta` and `n` is the trace index.
- `metasrc`: Sets the source reference on Chart Studio Cloud for  meta .
- `name`: Sets the trace name. The trace name appear as the legend item and on hover.
- `opacity`: Sets the opacity of the trace.
- `selected`: 
- `selectedpoints`: Array containing integer indices of selected points. Has an effect only for traces that support selections. Note that an empty array means an empty selection where the `unselected` are turned on for all points, whereas, any other non-array values means no selection all where the `selected` and `unselected` styles have no effect.
- `showlegend`: Determines whether or not an item corresponding to this trace is shown in the legend.
- `showlowerhalf`: Determines whether or not subplots on the lower half from the diagonal are displayed.
- `showupperhalf`: Determines whether or not subplots on the upper half from the diagonal are displayed.
- `stream`: 
- `text`: Sets text elements associated with each (x,y) pair to appear on hover. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates.
- `textsrc`: Sets the source reference on Chart Studio Cloud for  text .
- `transforms`: 
- `type`: splom
- `uid`: Assign an id to this trace, Use this to provide object constancy between traces during animations and transitions.
- `uirevision`: Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves.
- `unselected`: 
- `visible`: Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).
- `xaxes`: Sets the list of x axes corresponding to dimensions of this splom trace. By default, a splom will match the first N xaxes where N is the number of input dimensions. Note that, in case where `diagonal.visible` is false and `showupperhalf` or `showlowerhalf` is false, this splom trace will generate one less x-axis and one less y-axis.
- `yaxes`: Sets the list of y axes corresponding to dimensions of this splom trace. By default, a splom will match the first N yaxes where N is the number of input dimensions. Note that, in case where `diagonal.visible` is false and `showupperhalf` or `showlowerhalf` is false, this splom trace will generate one less x-axis and one less y-axis.

"""
function splom(; kw...)
    for k in keys(kw)
        k in (:customdata, :customdatasrc, :diagonal, :dimensions, :hoverinfo, :hoverinfosrc, :hoverlabel, :hovertemplate, :hovertemplatesrc, :hovertext, :hovertextsrc, :ids, :idssrc, :legendgroup, :marker, :meta, :metasrc, :name, :opacity, :selected, :selectedpoints, :showlegend, :showlowerhalf, :showupperhalf, :stream, :text, :textsrc, :transforms, :type, :uid, :uirevision, :unselected, :visible, :xaxes, :yaxes) || @warn "Function `splom` does not have attribute `$k`"
    end
    Plot(; type=:splom, kw...)
end

#-----------------------------------------------------------------------------# streamtube
export streamtube
"""
    streamtube(; kw...) --> Plot(type=:streamtube, kw...)

Create a Plotly trace of type `streamtube` with the given `kw` attributes.  Attributes will be
validated against the Plotly schema.  Available attributes for `streamtube` are:

- `autocolorscale`: Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `colorscale`. In case `colorscale` is unspecified or `autocolorscale` is true, the default  palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.
- `cauto`: Determines whether or not the color domain is computed with respect to the input data (here u/v/w norm) or the bounds set in `cmin` and `cmax`  Defaults to `false` when `cmin` and `cmax` are set by the user.
- `cmax`: Sets the upper bound of the color domain. Value should have the same units as u/v/w norm and if set, `cmin` must be set as well.
- `cmid`: Sets the mid-point of the color domain by scaling `cmin` and/or `cmax` to be equidistant to this point. Value should have the same units as u/v/w norm. Has no effect when `cauto` is `false`.
- `cmin`: Sets the lower bound of the color domain. Value should have the same units as u/v/w norm and if set, `cmax` must be set as well.
- `coloraxis`: Sets a reference to a shared color axis. References to these shared color axes are *coloraxis*, *coloraxis2*, *coloraxis3*, etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.
- `colorbar`: 
- `colorscale`: Sets the colorscale. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use`cmin` and `cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Greys,YlGnBu,Greens,YlOrRd,Bluered,RdBu,Reds,Blues,Picnic,Rainbow,Portland,Jet,Hot,Blackbody,Earth,Electric,Viridis,Cividis.
- `customdata`: Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, *scatter* traces also appends customdata items in the markers DOM elements
- `customdatasrc`: Sets the source reference on Chart Studio Cloud for  customdata .
- `hoverinfo`: Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.
- `hoverinfosrc`: Sets the source reference on Chart Studio Cloud for  hoverinfo .
- `hoverlabel`: 
- `hovertemplate`: Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example "y: %{y}". Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example "Price: %{y:$.2f}". https://github.com/d3/d3-3.x-api-reference/blob/master/Formatting.md#d3_format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example "Day: %{2019-01-01|%A}". https://github.com/d3/d3-time-format#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. variables `tubex`, `tubey`, `tubez`, `tubeu`, `tubev`, `tubew`, `norm` and `divergence`. Anything contained in tag `<extra>` is displayed in the secondary box, for example "<extra>{fullData.name}</extra>". To hide the secondary box completely, use an empty tag `<extra></extra>`.
- `hovertemplatesrc`: Sets the source reference on Chart Studio Cloud for  hovertemplate .
- `hovertext`: Same as `text`.
- `ids`: Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.
- `idssrc`: Sets the source reference on Chart Studio Cloud for  ids .
- `legendgroup`: Sets the legend group for this trace. Traces part of the same legend group hide/show at the same time when toggling legend items.
- `lighting`: 
- `lightposition`: 
- `maxdisplayed`: The maximum number of displayed segments in a streamtube.
- `meta`: Assigns extra meta information associated with this trace that can be used in various text attributes. Attributes such as trace `name`, graph, axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues` and `sliders` `label` text all support `meta`. To access the trace `meta` values in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the index or key of the `meta` item in question. To access trace `meta` in layout attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta` and `n` is the trace index.
- `metasrc`: Sets the source reference on Chart Studio Cloud for  meta .
- `name`: Sets the trace name. The trace name appear as the legend item and on hover.
- `opacity`: Sets the opacity of the surface. Please note that in the case of using high `opacity` values for example a value greater than or equal to 0.5 on two surfaces (and 0.25 with four surfaces), an overlay of multiple transparent surfaces may not perfectly be sorted in depth by the webgl API. This behavior may be improved in the near future and is subject to change.
- `reversescale`: Reverses the color mapping if true. If true, `cmin` will correspond to the last color in the array and `cmax` will correspond to the first color.
- `scene`: Sets a reference between this trace's 3D coordinate system and a 3D scene. If *scene* (the default value), the (x,y,z) coordinates refer to `layout.scene`. If *scene2*, the (x,y,z) coordinates refer to `layout.scene2`, and so on.
- `showlegend`: Determines whether or not an item corresponding to this trace is shown in the legend.
- `showscale`: Determines whether or not a colorbar is displayed for this trace.
- `sizeref`: The scaling factor for the streamtubes. The default is 1, which avoids two max divergence tubes from touching at adjacent starting positions.
- `starts`: 
- `stream`: 
- `text`: Sets a text element associated with this trace. If trace `hoverinfo` contains a *text* flag, this text element will be seen in all hover labels. Note that streamtube traces do not support array `text` values.
- `type`: streamtube
- `u`: Sets the x components of the vector field.
- `uid`: Assign an id to this trace, Use this to provide object constancy between traces during animations and transitions.
- `uirevision`: Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves.
- `usrc`: Sets the source reference on Chart Studio Cloud for  u .
- `v`: Sets the y components of the vector field.
- `visible`: Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).
- `vsrc`: Sets the source reference on Chart Studio Cloud for  v .
- `w`: Sets the z components of the vector field.
- `wsrc`: Sets the source reference on Chart Studio Cloud for  w .
- `x`: Sets the x coordinates of the vector field.
- `xsrc`: Sets the source reference on Chart Studio Cloud for  x .
- `y`: Sets the y coordinates of the vector field.
- `ysrc`: Sets the source reference on Chart Studio Cloud for  y .
- `z`: Sets the z coordinates of the vector field.
- `zsrc`: Sets the source reference on Chart Studio Cloud for  z .

"""
function streamtube(; kw...)
    for k in keys(kw)
        k in (:autocolorscale, :cauto, :cmax, :cmid, :cmin, :coloraxis, :colorbar, :colorscale, :customdata, :customdatasrc, :hoverinfo, :hoverinfosrc, :hoverlabel, :hovertemplate, :hovertemplatesrc, :hovertext, :ids, :idssrc, :legendgroup, :lighting, :lightposition, :maxdisplayed, :meta, :metasrc, :name, :opacity, :reversescale, :scene, :showlegend, :showscale, :sizeref, :starts, :stream, :text, :type, :u, :uid, :uirevision, :usrc, :v, :visible, :vsrc, :w, :wsrc, :x, :xsrc, :y, :ysrc, :z, :zsrc) || @warn "Function `streamtube` does not have attribute `$k`"
    end
    Plot(; type=:streamtube, kw...)
end

#-----------------------------------------------------------------------------# sunburst
export sunburst
"""
    sunburst(; kw...) --> Plot(type=:sunburst, kw...)

Create a Plotly trace of type `sunburst` with the given `kw` attributes.  Attributes will be
validated against the Plotly schema.  Available attributes for `sunburst` are:

- `branchvalues`: Determines how the items in `values` are summed. When set to *total*, items in `values` are taken to be value of all its descendants. When set to *remainder*, items in `values` corresponding to the root and the branches sectors are taken to be the extra part not part of the sum of the values at their leaves.
- `count`: Determines default for `values` when it is not provided, by inferring a 1 for each of the *leaves* and/or *branches*, otherwise 0.
- `customdata`: Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, *scatter* traces also appends customdata items in the markers DOM elements
- `customdatasrc`: Sets the source reference on Chart Studio Cloud for  customdata .
- `domain`: 
- `hoverinfo`: Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.
- `hoverinfosrc`: Sets the source reference on Chart Studio Cloud for  hoverinfo .
- `hoverlabel`: 
- `hovertemplate`: Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example "y: %{y}". Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example "Price: %{y:$.2f}". https://github.com/d3/d3-3.x-api-reference/blob/master/Formatting.md#d3_format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example "Day: %{2019-01-01|%A}". https://github.com/d3/d3-time-format#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. variables `currentPath`, `root`, `entry`, `percentRoot`, `percentEntry` and `percentParent`. Anything contained in tag `<extra>` is displayed in the secondary box, for example "<extra>{fullData.name}</extra>". To hide the secondary box completely, use an empty tag `<extra></extra>`.
- `hovertemplatesrc`: Sets the source reference on Chart Studio Cloud for  hovertemplate .
- `hovertext`: Sets hover text elements associated with each sector. If a single string, the same string appears for all data points. If an array of string, the items are mapped in order of this trace's sectors. To be seen, trace `hoverinfo` must contain a *text* flag.
- `hovertextsrc`: Sets the source reference on Chart Studio Cloud for  hovertext .
- `ids`: Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.
- `idssrc`: Sets the source reference on Chart Studio Cloud for  ids .
- `insidetextfont`: Sets the font used for `textinfo` lying inside the sector.
- `insidetextorientation`: Controls the orientation of the text inside chart sectors. When set to *auto*, text may be oriented in any direction in order to be as big as possible in the middle of a sector. The *horizontal* option orients text to be parallel with the bottom of the chart, and may make text smaller in order to achieve that goal. The *radial* option orients text along the radius of the sector. The *tangential* option orients text perpendicular to the radius of the sector.
- `labels`: Sets the labels of each of the sectors.
- `labelssrc`: Sets the source reference on Chart Studio Cloud for  labels .
- `leaf`: 
- `level`: Sets the level from which this trace hierarchy is rendered. Set `level` to `''` to start from the root node in the hierarchy. Must be an "id" if `ids` is filled in, otherwise plotly attempts to find a matching item in `labels`.
- `marker`: 
- `maxdepth`: Sets the number of rendered sectors from any given `level`. Set `maxdepth` to *-1* to render all the levels in the hierarchy.
- `meta`: Assigns extra meta information associated with this trace that can be used in various text attributes. Attributes such as trace `name`, graph, axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues` and `sliders` `label` text all support `meta`. To access the trace `meta` values in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the index or key of the `meta` item in question. To access trace `meta` in layout attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta` and `n` is the trace index.
- `metasrc`: Sets the source reference on Chart Studio Cloud for  meta .
- `name`: Sets the trace name. The trace name appear as the legend item and on hover.
- `opacity`: Sets the opacity of the trace.
- `outsidetextfont`: Sets the font used for `textinfo` lying outside the sector. This option refers to the root of the hierarchy presented at the center of a sunburst graph. Please note that if a hierarchy has multiple root nodes, this option won't have any effect and `insidetextfont` would be used.
- `parents`: Sets the parent sectors for each of the sectors. Empty string items '' are understood to reference the root node in the hierarchy. If `ids` is filled, `parents` items are understood to be "ids" themselves. When `ids` is not set, plotly attempts to find matching items in `labels`, but beware they must be unique.
- `parentssrc`: Sets the source reference on Chart Studio Cloud for  parents .
- `root`: 
- `rotation`: Rotates the whole diagram counterclockwise by some angle. By default the first slice starts at 3 o'clock.
- `sort`: Determines whether or not the sectors are reordered from largest to smallest.
- `stream`: 
- `text`: Sets text elements associated with each sector. If trace `textinfo` contains a *text* flag, these elements will be seen on the chart. If trace `hoverinfo` contains a *text* flag and *hovertext* is not set, these elements will be seen in the hover labels.
- `textfont`: Sets the font used for `textinfo`.
- `textinfo`: Determines which trace information appear on the graph.
- `textsrc`: Sets the source reference on Chart Studio Cloud for  text .
- `texttemplate`: Template string used for rendering the information text that appear on points. Note that this will override `textinfo`. Variables are inserted using %{variable}, for example "y: %{y}". Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example "Price: %{y:$.2f}". https://github.com/d3/d3-3.x-api-reference/blob/master/Formatting.md#d3_format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example "Day: %{2019-01-01|%A}". https://github.com/d3/d3-time-format#locale_format for details on the date formatting syntax. Every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. variables `currentPath`, `root`, `entry`, `percentRoot`, `percentEntry`, `percentParent`, `label` and `value`.
- `texttemplatesrc`: Sets the source reference on Chart Studio Cloud for  texttemplate .
- `transforms`: 
- `type`: sunburst
- `uid`: Assign an id to this trace, Use this to provide object constancy between traces during animations and transitions.
- `uirevision`: Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves.
- `values`: Sets the values associated with each of the sectors. Use with `branchvalues` to determine how the values are summed.
- `valuessrc`: Sets the source reference on Chart Studio Cloud for  values .
- `visible`: Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).

"""
function sunburst(; kw...)
    for k in keys(kw)
        k in (:branchvalues, :count, :customdata, :customdatasrc, :domain, :hoverinfo, :hoverinfosrc, :hoverlabel, :hovertemplate, :hovertemplatesrc, :hovertext, :hovertextsrc, :ids, :idssrc, :insidetextfont, :insidetextorientation, :labels, :labelssrc, :leaf, :level, :marker, :maxdepth, :meta, :metasrc, :name, :opacity, :outsidetextfont, :parents, :parentssrc, :root, :rotation, :sort, :stream, :text, :textfont, :textinfo, :textsrc, :texttemplate, :texttemplatesrc, :transforms, :type, :uid, :uirevision, :values, :valuessrc, :visible) || @warn "Function `sunburst` does not have attribute `$k`"
    end
    Plot(; type=:sunburst, kw...)
end

#-----------------------------------------------------------------------------# surface
export surface
"""
    surface(; kw...) --> Plot(type=:surface, kw...)

Create a Plotly trace of type `surface` with the given `kw` attributes.  Attributes will be
validated against the Plotly schema.  Available attributes for `surface` are:

- `_deprecated`: 
- `autocolorscale`: Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `colorscale`. In case `colorscale` is unspecified or `autocolorscale` is true, the default  palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.
- `cauto`: Determines whether or not the color domain is computed with respect to the input data (here z or surfacecolor) or the bounds set in `cmin` and `cmax`  Defaults to `false` when `cmin` and `cmax` are set by the user.
- `cmax`: Sets the upper bound of the color domain. Value should have the same units as z or surfacecolor and if set, `cmin` must be set as well.
- `cmid`: Sets the mid-point of the color domain by scaling `cmin` and/or `cmax` to be equidistant to this point. Value should have the same units as z or surfacecolor. Has no effect when `cauto` is `false`.
- `cmin`: Sets the lower bound of the color domain. Value should have the same units as z or surfacecolor and if set, `cmax` must be set as well.
- `coloraxis`: Sets a reference to a shared color axis. References to these shared color axes are *coloraxis*, *coloraxis2*, *coloraxis3*, etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.
- `colorbar`: 
- `colorscale`: Sets the colorscale. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use`cmin` and `cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Greys,YlGnBu,Greens,YlOrRd,Bluered,RdBu,Reds,Blues,Picnic,Rainbow,Portland,Jet,Hot,Blackbody,Earth,Electric,Viridis,Cividis.
- `connectgaps`: Determines whether or not gaps (i.e. {nan} or missing values) in the `z` data are filled in.
- `contours`: 
- `customdata`: Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, *scatter* traces also appends customdata items in the markers DOM elements
- `customdatasrc`: Sets the source reference on Chart Studio Cloud for  customdata .
- `hidesurface`: Determines whether or not a surface is drawn. For example, set `hidesurface` to *false* `contours.x.show` to *true* and `contours.y.show` to *true* to draw a wire frame plot.
- `hoverinfo`: Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.
- `hoverinfosrc`: Sets the source reference on Chart Studio Cloud for  hoverinfo .
- `hoverlabel`: 
- `hovertemplate`: Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example "y: %{y}". Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example "Price: %{y:$.2f}". https://github.com/d3/d3-3.x-api-reference/blob/master/Formatting.md#d3_format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example "Day: %{2019-01-01|%A}". https://github.com/d3/d3-time-format#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available.  Anything contained in tag `<extra>` is displayed in the secondary box, for example "<extra>{fullData.name}</extra>". To hide the secondary box completely, use an empty tag `<extra></extra>`.
- `hovertemplatesrc`: Sets the source reference on Chart Studio Cloud for  hovertemplate .
- `hovertext`: Same as `text`.
- `hovertextsrc`: Sets the source reference on Chart Studio Cloud for  hovertext .
- `ids`: Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.
- `idssrc`: Sets the source reference on Chart Studio Cloud for  ids .
- `legendgroup`: Sets the legend group for this trace. Traces part of the same legend group hide/show at the same time when toggling legend items.
- `lighting`: 
- `lightposition`: 
- `meta`: Assigns extra meta information associated with this trace that can be used in various text attributes. Attributes such as trace `name`, graph, axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues` and `sliders` `label` text all support `meta`. To access the trace `meta` values in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the index or key of the `meta` item in question. To access trace `meta` in layout attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta` and `n` is the trace index.
- `metasrc`: Sets the source reference on Chart Studio Cloud for  meta .
- `name`: Sets the trace name. The trace name appear as the legend item and on hover.
- `opacity`: Sets the opacity of the surface. Please note that in the case of using high `opacity` values for example a value greater than or equal to 0.5 on two surfaces (and 0.25 with four surfaces), an overlay of multiple transparent surfaces may not perfectly be sorted in depth by the webgl API. This behavior may be improved in the near future and is subject to change.
- `opacityscale`: Sets the opacityscale. The opacityscale must be an array containing arrays mapping a normalized value to an opacity value. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 1], [0.5, 0.2], [1, 1]]` means that higher/lower values would have higher opacity values and those in the middle would be more transparent Alternatively, `opacityscale` may be a palette name string of the following list: 'min', 'max', 'extremes' and 'uniform'. The default is 'uniform'.
- `reversescale`: Reverses the color mapping if true. If true, `cmin` will correspond to the last color in the array and `cmax` will correspond to the first color.
- `scene`: Sets a reference between this trace's 3D coordinate system and a 3D scene. If *scene* (the default value), the (x,y,z) coordinates refer to `layout.scene`. If *scene2*, the (x,y,z) coordinates refer to `layout.scene2`, and so on.
- `showlegend`: Determines whether or not an item corresponding to this trace is shown in the legend.
- `showscale`: Determines whether or not a colorbar is displayed for this trace.
- `stream`: 
- `surfacecolor`: Sets the surface color values, used for setting a color scale independent of `z`.
- `surfacecolorsrc`: Sets the source reference on Chart Studio Cloud for  surfacecolor .
- `text`: Sets the text elements associated with each z value. If trace `hoverinfo` contains a *text* flag and *hovertext* is not set, these elements will be seen in the hover labels.
- `textsrc`: Sets the source reference on Chart Studio Cloud for  text .
- `type`: surface
- `uid`: Assign an id to this trace, Use this to provide object constancy between traces during animations and transitions.
- `uirevision`: Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves.
- `visible`: Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).
- `x`: Sets the x coordinates.
- `xcalendar`: Sets the calendar system to use with `x` date data.
- `xsrc`: Sets the source reference on Chart Studio Cloud for  x .
- `y`: Sets the y coordinates.
- `ycalendar`: Sets the calendar system to use with `y` date data.
- `ysrc`: Sets the source reference on Chart Studio Cloud for  y .
- `z`: Sets the z coordinates.
- `zcalendar`: Sets the calendar system to use with `z` date data.
- `zsrc`: Sets the source reference on Chart Studio Cloud for  z .

"""
function surface(; kw...)
    for k in keys(kw)
        k in (:_deprecated, :autocolorscale, :cauto, :cmax, :cmid, :cmin, :coloraxis, :colorbar, :colorscale, :connectgaps, :contours, :customdata, :customdatasrc, :hidesurface, :hoverinfo, :hoverinfosrc, :hoverlabel, :hovertemplate, :hovertemplatesrc, :hovertext, :hovertextsrc, :ids, :idssrc, :legendgroup, :lighting, :lightposition, :meta, :metasrc, :name, :opacity, :opacityscale, :reversescale, :scene, :showlegend, :showscale, :stream, :surfacecolor, :surfacecolorsrc, :text, :textsrc, :type, :uid, :uirevision, :visible, :x, :xcalendar, :xsrc, :y, :ycalendar, :ysrc, :z, :zcalendar, :zsrc) || @warn "Function `surface` does not have attribute `$k`"
    end
    Plot(; type=:surface, kw...)
end

#-----------------------------------------------------------------------------# table
export table
"""
    table(; kw...) --> Plot(type=:table, kw...)

Create a Plotly trace of type `table` with the given `kw` attributes.  Attributes will be
validated against the Plotly schema.  Available attributes for `table` are:

- `cells`: 
- `columnorder`: Specifies the rendered order of the data columns; for example, a value `2` at position `0` means that column index `0` in the data will be rendered as the third column, as columns have an index base of zero.
- `columnordersrc`: Sets the source reference on Chart Studio Cloud for  columnorder .
- `columnwidth`: The width of columns expressed as a ratio. Columns fill the available width in proportion of their specified column widths.
- `columnwidthsrc`: Sets the source reference on Chart Studio Cloud for  columnwidth .
- `customdata`: Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, *scatter* traces also appends customdata items in the markers DOM elements
- `customdatasrc`: Sets the source reference on Chart Studio Cloud for  customdata .
- `domain`: 
- `editType`: calc
- `header`: 
- `hoverinfo`: Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.
- `hoverinfosrc`: Sets the source reference on Chart Studio Cloud for  hoverinfo .
- `hoverlabel`: 
- `ids`: Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.
- `idssrc`: Sets the source reference on Chart Studio Cloud for  ids .
- `meta`: Assigns extra meta information associated with this trace that can be used in various text attributes. Attributes such as trace `name`, graph, axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues` and `sliders` `label` text all support `meta`. To access the trace `meta` values in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the index or key of the `meta` item in question. To access trace `meta` in layout attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta` and `n` is the trace index.
- `metasrc`: Sets the source reference on Chart Studio Cloud for  meta .
- `name`: Sets the trace name. The trace name appear as the legend item and on hover.
- `stream`: 
- `type`: table
- `uid`: Assign an id to this trace, Use this to provide object constancy between traces during animations and transitions.
- `uirevision`: Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves.
- `visible`: Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).

"""
function table(; kw...)
    for k in keys(kw)
        k in (:cells, :columnorder, :columnordersrc, :columnwidth, :columnwidthsrc, :customdata, :customdatasrc, :domain, :editType, :header, :hoverinfo, :hoverinfosrc, :hoverlabel, :ids, :idssrc, :meta, :metasrc, :name, :stream, :type, :uid, :uirevision, :visible) || @warn "Function `table` does not have attribute `$k`"
    end
    Plot(; type=:table, kw...)
end

#-----------------------------------------------------------------------------# treemap
export treemap
"""
    treemap(; kw...) --> Plot(type=:treemap, kw...)

Create a Plotly trace of type `treemap` with the given `kw` attributes.  Attributes will be
validated against the Plotly schema.  Available attributes for `treemap` are:

- `branchvalues`: Determines how the items in `values` are summed. When set to *total*, items in `values` are taken to be value of all its descendants. When set to *remainder*, items in `values` corresponding to the root and the branches sectors are taken to be the extra part not part of the sum of the values at their leaves.
- `count`: Determines default for `values` when it is not provided, by inferring a 1 for each of the *leaves* and/or *branches*, otherwise 0.
- `customdata`: Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, *scatter* traces also appends customdata items in the markers DOM elements
- `customdatasrc`: Sets the source reference on Chart Studio Cloud for  customdata .
- `domain`: 
- `hoverinfo`: Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.
- `hoverinfosrc`: Sets the source reference on Chart Studio Cloud for  hoverinfo .
- `hoverlabel`: 
- `hovertemplate`: Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example "y: %{y}". Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example "Price: %{y:$.2f}". https://github.com/d3/d3-3.x-api-reference/blob/master/Formatting.md#d3_format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example "Day: %{2019-01-01|%A}". https://github.com/d3/d3-time-format#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. variables `currentPath`, `root`, `entry`, `percentRoot`, `percentEntry` and `percentParent`. Anything contained in tag `<extra>` is displayed in the secondary box, for example "<extra>{fullData.name}</extra>". To hide the secondary box completely, use an empty tag `<extra></extra>`.
- `hovertemplatesrc`: Sets the source reference on Chart Studio Cloud for  hovertemplate .
- `hovertext`: Sets hover text elements associated with each sector. If a single string, the same string appears for all data points. If an array of string, the items are mapped in order of this trace's sectors. To be seen, trace `hoverinfo` must contain a *text* flag.
- `hovertextsrc`: Sets the source reference on Chart Studio Cloud for  hovertext .
- `ids`: Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.
- `idssrc`: Sets the source reference on Chart Studio Cloud for  ids .
- `insidetextfont`: Sets the font used for `textinfo` lying inside the sector.
- `labels`: Sets the labels of each of the sectors.
- `labelssrc`: Sets the source reference on Chart Studio Cloud for  labels .
- `level`: Sets the level from which this trace hierarchy is rendered. Set `level` to `''` to start from the root node in the hierarchy. Must be an "id" if `ids` is filled in, otherwise plotly attempts to find a matching item in `labels`.
- `marker`: 
- `maxdepth`: Sets the number of rendered sectors from any given `level`. Set `maxdepth` to *-1* to render all the levels in the hierarchy.
- `meta`: Assigns extra meta information associated with this trace that can be used in various text attributes. Attributes such as trace `name`, graph, axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues` and `sliders` `label` text all support `meta`. To access the trace `meta` values in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the index or key of the `meta` item in question. To access trace `meta` in layout attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta` and `n` is the trace index.
- `metasrc`: Sets the source reference on Chart Studio Cloud for  meta .
- `name`: Sets the trace name. The trace name appear as the legend item and on hover.
- `opacity`: Sets the opacity of the trace.
- `outsidetextfont`: Sets the font used for `textinfo` lying outside the sector. This option refers to the root of the hierarchy presented on top left corner of a treemap graph. Please note that if a hierarchy has multiple root nodes, this option won't have any effect and `insidetextfont` would be used.
- `parents`: Sets the parent sectors for each of the sectors. Empty string items '' are understood to reference the root node in the hierarchy. If `ids` is filled, `parents` items are understood to be "ids" themselves. When `ids` is not set, plotly attempts to find matching items in `labels`, but beware they must be unique.
- `parentssrc`: Sets the source reference on Chart Studio Cloud for  parents .
- `pathbar`: 
- `root`: 
- `sort`: Determines whether or not the sectors are reordered from largest to smallest.
- `stream`: 
- `text`: Sets text elements associated with each sector. If trace `textinfo` contains a *text* flag, these elements will be seen on the chart. If trace `hoverinfo` contains a *text* flag and *hovertext* is not set, these elements will be seen in the hover labels.
- `textfont`: Sets the font used for `textinfo`.
- `textinfo`: Determines which trace information appear on the graph.
- `textposition`: Sets the positions of the `text` elements.
- `textsrc`: Sets the source reference on Chart Studio Cloud for  text .
- `texttemplate`: Template string used for rendering the information text that appear on points. Note that this will override `textinfo`. Variables are inserted using %{variable}, for example "y: %{y}". Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example "Price: %{y:$.2f}". https://github.com/d3/d3-3.x-api-reference/blob/master/Formatting.md#d3_format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example "Day: %{2019-01-01|%A}". https://github.com/d3/d3-time-format#locale_format for details on the date formatting syntax. Every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. variables `currentPath`, `root`, `entry`, `percentRoot`, `percentEntry`, `percentParent`, `label` and `value`.
- `texttemplatesrc`: Sets the source reference on Chart Studio Cloud for  texttemplate .
- `tiling`: 
- `transforms`: 
- `type`: treemap
- `uid`: Assign an id to this trace, Use this to provide object constancy between traces during animations and transitions.
- `uirevision`: Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves.
- `values`: Sets the values associated with each of the sectors. Use with `branchvalues` to determine how the values are summed.
- `valuessrc`: Sets the source reference on Chart Studio Cloud for  values .
- `visible`: Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).

"""
function treemap(; kw...)
    for k in keys(kw)
        k in (:branchvalues, :count, :customdata, :customdatasrc, :domain, :hoverinfo, :hoverinfosrc, :hoverlabel, :hovertemplate, :hovertemplatesrc, :hovertext, :hovertextsrc, :ids, :idssrc, :insidetextfont, :labels, :labelssrc, :level, :marker, :maxdepth, :meta, :metasrc, :name, :opacity, :outsidetextfont, :parents, :parentssrc, :pathbar, :root, :sort, :stream, :text, :textfont, :textinfo, :textposition, :textsrc, :texttemplate, :texttemplatesrc, :tiling, :transforms, :type, :uid, :uirevision, :values, :valuessrc, :visible) || @warn "Function `treemap` does not have attribute `$k`"
    end
    Plot(; type=:treemap, kw...)
end

#-----------------------------------------------------------------------------# violin
export violin
"""
    violin(; kw...) --> Plot(type=:violin, kw...)

Create a Plotly trace of type `violin` with the given `kw` attributes.  Attributes will be
validated against the Plotly schema.  Available attributes for `violin` are:

- `alignmentgroup`: Set several traces linked to the same position axis or matching axes to the same alignmentgroup. This controls whether bars compute their positional range dependently or independently.
- `bandwidth`: Sets the bandwidth used to compute the kernel density estimate. By default, the bandwidth is determined by Silverman's rule of thumb.
- `box`: 
- `customdata`: Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, *scatter* traces also appends customdata items in the markers DOM elements
- `customdatasrc`: Sets the source reference on Chart Studio Cloud for  customdata .
- `fillcolor`: Sets the fill color. Defaults to a half-transparent variant of the line color, marker color, or marker line color, whichever is available.
- `hoverinfo`: Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.
- `hoverinfosrc`: Sets the source reference on Chart Studio Cloud for  hoverinfo .
- `hoverlabel`: 
- `hoveron`: Do the hover effects highlight individual violins or sample points or the kernel density estimate or any combination of them?
- `hovertemplate`: Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example "y: %{y}". Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example "Price: %{y:$.2f}". https://github.com/d3/d3-3.x-api-reference/blob/master/Formatting.md#d3_format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example "Day: %{2019-01-01|%A}". https://github.com/d3/d3-time-format#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available.  Anything contained in tag `<extra>` is displayed in the secondary box, for example "<extra>{fullData.name}</extra>". To hide the secondary box completely, use an empty tag `<extra></extra>`.
- `hovertemplatesrc`: Sets the source reference on Chart Studio Cloud for  hovertemplate .
- `hovertext`: Same as `text`.
- `hovertextsrc`: Sets the source reference on Chart Studio Cloud for  hovertext .
- `ids`: Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.
- `idssrc`: Sets the source reference on Chart Studio Cloud for  ids .
- `jitter`: Sets the amount of jitter in the sample points drawn. If *0*, the sample points align along the distribution axis. If *1*, the sample points are drawn in a random jitter of width equal to the width of the violins.
- `legendgroup`: Sets the legend group for this trace. Traces part of the same legend group hide/show at the same time when toggling legend items.
- `line`: 
- `marker`: 
- `meanline`: 
- `meta`: Assigns extra meta information associated with this trace that can be used in various text attributes. Attributes such as trace `name`, graph, axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues` and `sliders` `label` text all support `meta`. To access the trace `meta` values in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the index or key of the `meta` item in question. To access trace `meta` in layout attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta` and `n` is the trace index.
- `metasrc`: Sets the source reference on Chart Studio Cloud for  meta .
- `name`: Sets the trace name. The trace name appear as the legend item and on hover. For violin traces, the name will also be used for the position coordinate, if `x` and `x0` (`y` and `y0` if horizontal) are missing and the position axis is categorical. Note that the trace name is also used as a default value for attribute `scalegroup` (please see its description for details).
- `offsetgroup`: Set several traces linked to the same position axis or matching axes to the same offsetgroup where bars of the same position coordinate will line up.
- `opacity`: Sets the opacity of the trace.
- `orientation`: Sets the orientation of the violin(s). If *v* (*h*), the distribution is visualized along the vertical (horizontal).
- `pointpos`: Sets the position of the sample points in relation to the violins. If *0*, the sample points are places over the center of the violins. Positive (negative) values correspond to positions to the right (left) for vertical violins and above (below) for horizontal violins.
- `points`: If *outliers*, only the sample points lying outside the whiskers are shown If *suspectedoutliers*, the outlier points are shown and points either less than 4*Q1-3*Q3 or greater than 4*Q3-3*Q1 are highlighted (see `outliercolor`) If *all*, all sample points are shown If *false*, only the violins are shown with no sample points. Defaults to *suspectedoutliers* when `marker.outliercolor` or `marker.line.outliercolor` is set, otherwise defaults to *outliers*.
- `scalegroup`: If there are multiple violins that should be sized according to to some metric (see `scalemode`), link them by providing a non-empty group id here shared by every trace in the same group. If a violin's `width` is undefined, `scalegroup` will default to the trace's name. In this case, violins with the same names will be linked together
- `scalemode`: Sets the metric by which the width of each violin is determined.*width* means each violin has the same (max) width*count* means the violins are scaled by the number of sample points makingup each violin.
- `selected`: 
- `selectedpoints`: Array containing integer indices of selected points. Has an effect only for traces that support selections. Note that an empty array means an empty selection where the `unselected` are turned on for all points, whereas, any other non-array values means no selection all where the `selected` and `unselected` styles have no effect.
- `showlegend`: Determines whether or not an item corresponding to this trace is shown in the legend.
- `side`: Determines on which side of the position value the density function making up one half of a violin is plotted. Useful when comparing two violin traces under *overlay* mode, where one trace has `side` set to *positive* and the other to *negative*.
- `span`: Sets the span in data space for which the density function will be computed. Has an effect only when `spanmode` is set to *manual*.
- `spanmode`: Sets the method by which the span in data space where the density function will be computed. *soft* means the span goes from the sample's minimum value minus two bandwidths to the sample's maximum value plus two bandwidths. *hard* means the span goes from the sample's minimum to its maximum value. For custom span settings, use mode *manual* and fill in the `span` attribute.
- `stream`: 
- `text`: Sets the text elements associated with each sample value. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates. To be seen, trace `hoverinfo` must contain a *text* flag.
- `textsrc`: Sets the source reference on Chart Studio Cloud for  text .
- `transforms`: 
- `type`: violin
- `uid`: Assign an id to this trace, Use this to provide object constancy between traces during animations and transitions.
- `uirevision`: Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves.
- `unselected`: 
- `visible`: Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).
- `width`: Sets the width of the violin in data coordinates. If *0* (default value) the width is automatically selected based on the positions of other violin traces in the same subplot.
- `x`: Sets the x sample data or coordinates. See overview for more info.
- `x0`: Sets the x coordinate for single-box traces or the starting coordinate for multi-box traces set using q1/median/q3. See overview for more info.
- `xaxis`: Sets a reference between this trace's x coordinates and a 2D cartesian x axis. If *x* (the default value), the x coordinates refer to `layout.xaxis`. If *x2*, the x coordinates refer to `layout.xaxis2`, and so on.
- `xsrc`: Sets the source reference on Chart Studio Cloud for  x .
- `y`: Sets the y sample data or coordinates. See overview for more info.
- `y0`: Sets the y coordinate for single-box traces or the starting coordinate for multi-box traces set using q1/median/q3. See overview for more info.
- `yaxis`: Sets a reference between this trace's y coordinates and a 2D cartesian y axis. If *y* (the default value), the y coordinates refer to `layout.yaxis`. If *y2*, the y coordinates refer to `layout.yaxis2`, and so on.
- `ysrc`: Sets the source reference on Chart Studio Cloud for  y .

"""
function violin(; kw...)
    for k in keys(kw)
        k in (:alignmentgroup, :bandwidth, :box, :customdata, :customdatasrc, :fillcolor, :hoverinfo, :hoverinfosrc, :hoverlabel, :hoveron, :hovertemplate, :hovertemplatesrc, :hovertext, :hovertextsrc, :ids, :idssrc, :jitter, :legendgroup, :line, :marker, :meanline, :meta, :metasrc, :name, :offsetgroup, :opacity, :orientation, :pointpos, :points, :scalegroup, :scalemode, :selected, :selectedpoints, :showlegend, :side, :span, :spanmode, :stream, :text, :textsrc, :transforms, :type, :uid, :uirevision, :unselected, :visible, :width, :x, :x0, :xaxis, :xsrc, :y, :y0, :yaxis, :ysrc) || @warn "Function `violin` does not have attribute `$k`"
    end
    Plot(; type=:violin, kw...)
end

#-----------------------------------------------------------------------------# volume
export volume
"""
    volume(; kw...) --> Plot(type=:volume, kw...)

Create a Plotly trace of type `volume` with the given `kw` attributes.  Attributes will be
validated against the Plotly schema.  Available attributes for `volume` are:

- `autocolorscale`: Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `colorscale`. In case `colorscale` is unspecified or `autocolorscale` is true, the default  palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.
- `caps`: 
- `cauto`: Determines whether or not the color domain is computed with respect to the input data (here `value`) or the bounds set in `cmin` and `cmax`  Defaults to `false` when `cmin` and `cmax` are set by the user.
- `cmax`: Sets the upper bound of the color domain. Value should have the same units as `value` and if set, `cmin` must be set as well.
- `cmid`: Sets the mid-point of the color domain by scaling `cmin` and/or `cmax` to be equidistant to this point. Value should have the same units as `value`. Has no effect when `cauto` is `false`.
- `cmin`: Sets the lower bound of the color domain. Value should have the same units as `value` and if set, `cmax` must be set as well.
- `coloraxis`: Sets a reference to a shared color axis. References to these shared color axes are *coloraxis*, *coloraxis2*, *coloraxis3*, etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.
- `colorbar`: 
- `colorscale`: Sets the colorscale. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use`cmin` and `cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Greys,YlGnBu,Greens,YlOrRd,Bluered,RdBu,Reds,Blues,Picnic,Rainbow,Portland,Jet,Hot,Blackbody,Earth,Electric,Viridis,Cividis.
- `contour`: 
- `customdata`: Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, *scatter* traces also appends customdata items in the markers DOM elements
- `customdatasrc`: Sets the source reference on Chart Studio Cloud for  customdata .
- `flatshading`: Determines whether or not normal smoothing is applied to the meshes, creating meshes with an angular, low-poly look via flat reflections.
- `hoverinfo`: Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.
- `hoverinfosrc`: Sets the source reference on Chart Studio Cloud for  hoverinfo .
- `hoverlabel`: 
- `hovertemplate`: Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example "y: %{y}". Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example "Price: %{y:$.2f}". https://github.com/d3/d3-3.x-api-reference/blob/master/Formatting.md#d3_format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example "Day: %{2019-01-01|%A}". https://github.com/d3/d3-time-format#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available.  Anything contained in tag `<extra>` is displayed in the secondary box, for example "<extra>{fullData.name}</extra>". To hide the secondary box completely, use an empty tag `<extra></extra>`.
- `hovertemplatesrc`: Sets the source reference on Chart Studio Cloud for  hovertemplate .
- `hovertext`: Same as `text`.
- `hovertextsrc`: Sets the source reference on Chart Studio Cloud for  hovertext .
- `ids`: Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.
- `idssrc`: Sets the source reference on Chart Studio Cloud for  ids .
- `isomax`: Sets the maximum boundary for iso-surface plot.
- `isomin`: Sets the minimum boundary for iso-surface plot.
- `legendgroup`: Sets the legend group for this trace. Traces part of the same legend group hide/show at the same time when toggling legend items.
- `lighting`: 
- `lightposition`: 
- `meta`: Assigns extra meta information associated with this trace that can be used in various text attributes. Attributes such as trace `name`, graph, axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues` and `sliders` `label` text all support `meta`. To access the trace `meta` values in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the index or key of the `meta` item in question. To access trace `meta` in layout attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta` and `n` is the trace index.
- `metasrc`: Sets the source reference on Chart Studio Cloud for  meta .
- `name`: Sets the trace name. The trace name appear as the legend item and on hover.
- `opacity`: Sets the opacity of the surface. Please note that in the case of using high `opacity` values for example a value greater than or equal to 0.5 on two surfaces (and 0.25 with four surfaces), an overlay of multiple transparent surfaces may not perfectly be sorted in depth by the webgl API. This behavior may be improved in the near future and is subject to change.
- `opacityscale`: Sets the opacityscale. The opacityscale must be an array containing arrays mapping a normalized value to an opacity value. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 1], [0.5, 0.2], [1, 1]]` means that higher/lower values would have higher opacity values and those in the middle would be more transparent Alternatively, `opacityscale` may be a palette name string of the following list: 'min', 'max', 'extremes' and 'uniform'. The default is 'uniform'.
- `reversescale`: Reverses the color mapping if true. If true, `cmin` will correspond to the last color in the array and `cmax` will correspond to the first color.
- `scene`: Sets a reference between this trace's 3D coordinate system and a 3D scene. If *scene* (the default value), the (x,y,z) coordinates refer to `layout.scene`. If *scene2*, the (x,y,z) coordinates refer to `layout.scene2`, and so on.
- `showlegend`: Determines whether or not an item corresponding to this trace is shown in the legend.
- `showscale`: Determines whether or not a colorbar is displayed for this trace.
- `slices`: 
- `spaceframe`: 
- `stream`: 
- `surface`: 
- `text`: Sets the text elements associated with the vertices. If trace `hoverinfo` contains a *text* flag and *hovertext* is not set, these elements will be seen in the hover labels.
- `textsrc`: Sets the source reference on Chart Studio Cloud for  text .
- `type`: volume
- `uid`: Assign an id to this trace, Use this to provide object constancy between traces during animations and transitions.
- `uirevision`: Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves.
- `value`: Sets the 4th dimension (value) of the vertices.
- `valuesrc`: Sets the source reference on Chart Studio Cloud for  value .
- `visible`: Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).
- `x`: Sets the X coordinates of the vertices on X axis.
- `xsrc`: Sets the source reference on Chart Studio Cloud for  x .
- `y`: Sets the Y coordinates of the vertices on Y axis.
- `ysrc`: Sets the source reference on Chart Studio Cloud for  y .
- `z`: Sets the Z coordinates of the vertices on Z axis.
- `zsrc`: Sets the source reference on Chart Studio Cloud for  z .

"""
function volume(; kw...)
    for k in keys(kw)
        k in (:autocolorscale, :caps, :cauto, :cmax, :cmid, :cmin, :coloraxis, :colorbar, :colorscale, :contour, :customdata, :customdatasrc, :flatshading, :hoverinfo, :hoverinfosrc, :hoverlabel, :hovertemplate, :hovertemplatesrc, :hovertext, :hovertextsrc, :ids, :idssrc, :isomax, :isomin, :legendgroup, :lighting, :lightposition, :meta, :metasrc, :name, :opacity, :opacityscale, :reversescale, :scene, :showlegend, :showscale, :slices, :spaceframe, :stream, :surface, :text, :textsrc, :type, :uid, :uirevision, :value, :valuesrc, :visible, :x, :xsrc, :y, :ysrc, :z, :zsrc) || @warn "Function `volume` does not have attribute `$k`"
    end
    Plot(; type=:volume, kw...)
end

#-----------------------------------------------------------------------------# waterfall
export waterfall
"""
    waterfall(; kw...) --> Plot(type=:waterfall, kw...)

Create a Plotly trace of type `waterfall` with the given `kw` attributes.  Attributes will be
validated against the Plotly schema.  Available attributes for `waterfall` are:

- `alignmentgroup`: Set several traces linked to the same position axis or matching axes to the same alignmentgroup. This controls whether bars compute their positional range dependently or independently.
- `base`: Sets where the bar base is drawn (in position axis units).
- `cliponaxis`: Determines whether the text nodes are clipped about the subplot axes. To show the text nodes above axis lines and tick labels, make sure to set `xaxis.layer` and `yaxis.layer` to *below traces*.
- `connector`: 
- `constraintext`: Constrain the size of text inside or outside a bar to be no larger than the bar itself.
- `customdata`: Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, *scatter* traces also appends customdata items in the markers DOM elements
- `customdatasrc`: Sets the source reference on Chart Studio Cloud for  customdata .
- `decreasing`: 
- `dx`: Sets the x coordinate step. See `x0` for more info.
- `dy`: Sets the y coordinate step. See `y0` for more info.
- `hoverinfo`: Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.
- `hoverinfosrc`: Sets the source reference on Chart Studio Cloud for  hoverinfo .
- `hoverlabel`: 
- `hovertemplate`: Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example "y: %{y}". Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example "Price: %{y:$.2f}". https://github.com/d3/d3-3.x-api-reference/blob/master/Formatting.md#d3_format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example "Day: %{2019-01-01|%A}". https://github.com/d3/d3-time-format#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. variables `initial`, `delta` and `final`. Anything contained in tag `<extra>` is displayed in the secondary box, for example "<extra>{fullData.name}</extra>". To hide the secondary box completely, use an empty tag `<extra></extra>`.
- `hovertemplatesrc`: Sets the source reference on Chart Studio Cloud for  hovertemplate .
- `hovertext`: Sets hover text elements associated with each (x,y) pair. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates. To be seen, trace `hoverinfo` must contain a *text* flag.
- `hovertextsrc`: Sets the source reference on Chart Studio Cloud for  hovertext .
- `ids`: Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.
- `idssrc`: Sets the source reference on Chart Studio Cloud for  ids .
- `increasing`: 
- `insidetextanchor`: Determines if texts are kept at center or start/end points in `textposition` *inside* mode.
- `insidetextfont`: Sets the font used for `text` lying inside the bar.
- `legendgroup`: Sets the legend group for this trace. Traces part of the same legend group hide/show at the same time when toggling legend items.
- `measure`: An array containing types of values. By default the values are considered as 'relative'. However; it is possible to use 'total' to compute the sums. Also 'absolute' could be applied to reset the computed total or to declare an initial value where needed.
- `measuresrc`: Sets the source reference on Chart Studio Cloud for  measure .
- `meta`: Assigns extra meta information associated with this trace that can be used in various text attributes. Attributes such as trace `name`, graph, axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues` and `sliders` `label` text all support `meta`. To access the trace `meta` values in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the index or key of the `meta` item in question. To access trace `meta` in layout attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta` and `n` is the trace index.
- `metasrc`: Sets the source reference on Chart Studio Cloud for  meta .
- `name`: Sets the trace name. The trace name appear as the legend item and on hover.
- `offset`: Shifts the position where the bar is drawn (in position axis units). In *group* barmode, traces that set *offset* will be excluded and drawn in *overlay* mode instead.
- `offsetgroup`: Set several traces linked to the same position axis or matching axes to the same offsetgroup where bars of the same position coordinate will line up.
- `offsetsrc`: Sets the source reference on Chart Studio Cloud for  offset .
- `opacity`: Sets the opacity of the trace.
- `orientation`: Sets the orientation of the bars. With *v* (*h*), the value of the each bar spans along the vertical (horizontal).
- `outsidetextfont`: Sets the font used for `text` lying outside the bar.
- `selectedpoints`: Array containing integer indices of selected points. Has an effect only for traces that support selections. Note that an empty array means an empty selection where the `unselected` are turned on for all points, whereas, any other non-array values means no selection all where the `selected` and `unselected` styles have no effect.
- `showlegend`: Determines whether or not an item corresponding to this trace is shown in the legend.
- `stream`: 
- `text`: Sets text elements associated with each (x,y) pair. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates. If trace `hoverinfo` contains a *text* flag and *hovertext* is not set, these elements will be seen in the hover labels.
- `textangle`: Sets the angle of the tick labels with respect to the bar. For example, a `tickangle` of -90 draws the tick labels vertically. With *auto* the texts may automatically be rotated to fit with the maximum size in bars.
- `textfont`: Sets the font used for `text`.
- `textinfo`: Determines which trace information appear on the graph. In the case of having multiple waterfalls, totals are computed separately (per trace).
- `textposition`: Specifies the location of the `text`. *inside* positions `text` inside, next to the bar end (rotated and scaled if needed). *outside* positions `text` outside, next to the bar end (scaled if needed), unless there is another bar stacked on this one, then the text gets pushed inside. *auto* tries to position `text` inside the bar, but if the bar is too small and no bar is stacked on this one the text is moved outside.
- `textpositionsrc`: Sets the source reference on Chart Studio Cloud for  textposition .
- `textsrc`: Sets the source reference on Chart Studio Cloud for  text .
- `texttemplate`: Template string used for rendering the information text that appear on points. Note that this will override `textinfo`. Variables are inserted using %{variable}, for example "y: %{y}". Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example "Price: %{y:$.2f}". https://github.com/d3/d3-3.x-api-reference/blob/master/Formatting.md#d3_format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example "Day: %{2019-01-01|%A}". https://github.com/d3/d3-time-format#locale_format for details on the date formatting syntax. Every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. variables `initial`, `delta`, `final` and `label`.
- `texttemplatesrc`: Sets the source reference on Chart Studio Cloud for  texttemplate .
- `totals`: 
- `transforms`: 
- `type`: waterfall
- `uid`: Assign an id to this trace, Use this to provide object constancy between traces during animations and transitions.
- `uirevision`: Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves.
- `visible`: Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).
- `width`: Sets the bar width (in position axis units).
- `widthsrc`: Sets the source reference on Chart Studio Cloud for  width .
- `x`: Sets the x coordinates.
- `x0`: Alternate to `x`. Builds a linear space of x coordinates. Use with `dx` where `x0` is the starting coordinate and `dx` the step.
- `xaxis`: Sets a reference between this trace's x coordinates and a 2D cartesian x axis. If *x* (the default value), the x coordinates refer to `layout.xaxis`. If *x2*, the x coordinates refer to `layout.xaxis2`, and so on.
- `xperiod`: Only relevant when the axis `type` is *date*. Sets the period positioning in milliseconds or *M<n>* on the x axis. Special values in the form of *M<n>* could be used to declare the number of months. In this case `n` must be a positive integer.
- `xperiod0`: Only relevant when the axis `type` is *date*. Sets the base for period positioning in milliseconds or date string on the x0 axis. When `x0period` is round number of weeks, the `x0period0` by default would be on a Sunday i.e. 2000-01-02, otherwise it would be at 2000-01-01.
- `xperiodalignment`: Only relevant when the axis `type` is *date*. Sets the alignment of data points on the x axis.
- `xsrc`: Sets the source reference on Chart Studio Cloud for  x .
- `y`: Sets the y coordinates.
- `y0`: Alternate to `y`. Builds a linear space of y coordinates. Use with `dy` where `y0` is the starting coordinate and `dy` the step.
- `yaxis`: Sets a reference between this trace's y coordinates and a 2D cartesian y axis. If *y* (the default value), the y coordinates refer to `layout.yaxis`. If *y2*, the y coordinates refer to `layout.yaxis2`, and so on.
- `yperiod`: Only relevant when the axis `type` is *date*. Sets the period positioning in milliseconds or *M<n>* on the y axis. Special values in the form of *M<n>* could be used to declare the number of months. In this case `n` must be a positive integer.
- `yperiod0`: Only relevant when the axis `type` is *date*. Sets the base for period positioning in milliseconds or date string on the y0 axis. When `y0period` is round number of weeks, the `y0period0` by default would be on a Sunday i.e. 2000-01-02, otherwise it would be at 2000-01-01.
- `yperiodalignment`: Only relevant when the axis `type` is *date*. Sets the alignment of data points on the y axis.
- `ysrc`: Sets the source reference on Chart Studio Cloud for  y .

"""
function waterfall(; kw...)
    for k in keys(kw)
        k in (:alignmentgroup, :base, :cliponaxis, :connector, :constraintext, :customdata, :customdatasrc, :decreasing, :dx, :dy, :hoverinfo, :hoverinfosrc, :hoverlabel, :hovertemplate, :hovertemplatesrc, :hovertext, :hovertextsrc, :ids, :idssrc, :increasing, :insidetextanchor, :insidetextfont, :legendgroup, :measure, :measuresrc, :meta, :metasrc, :name, :offset, :offsetgroup, :offsetsrc, :opacity, :orientation, :outsidetextfont, :selectedpoints, :showlegend, :stream, :text, :textangle, :textfont, :textinfo, :textposition, :textpositionsrc, :textsrc, :texttemplate, :texttemplatesrc, :totals, :transforms, :type, :uid, :uirevision, :visible, :width, :widthsrc, :x, :x0, :xaxis, :xperiod, :xperiod0, :xperiodalignment, :xsrc, :y, :y0, :yaxis, :yperiod, :yperiod0, :yperiodalignment, :ysrc) || @warn "Function `waterfall` does not have attribute `$k`"
    end
    Plot(; type=:waterfall, kw...)
end

end  # module Traces
