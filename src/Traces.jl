# This file is automatically generated.  Do not edit this file directly.
# Last update: 2024-02-01T16:29:48.872 ET

module Traces

using ..PlotlyLight: Plot

#-----------------------------------------------------------------------------# area
export area
function area(; kw...)
    for k in keys(kw)
        k in (:customdata, :customdatasrc, :hoverinfo, :hoverinfosrc, :hoverlabel, :ids, :idssrc, :legendgroup, :marker, :meta, :metasrc, :name, :opacity, :r, :rsrc, :showlegend, :stream, :t, :transforms, :tsrc, :type, :uid, :uirevision, :visible) || @warn "Function `area` does not have attribute `$k`"
    end
    Plot(; type=:area, kw...)
end
Base.propertynames(::typeof(area)) = (:customdata, :customdatasrc, :hoverinfo, :hoverinfosrc, :hoverlabel, :ids, :idssrc, :legendgroup, :marker, :meta, :metasrc, :name, :opacity, :r, :rsrc, :showlegend, :stream, :t, :transforms, :tsrc, :type, :uid, :uirevision, :visible)


#-----------------------------------------------------------------------------# bar
export bar
function bar(; kw...)
    for k in keys(kw)
        k in (:_deprecated, :alignmentgroup, :base, :basesrc, :cliponaxis, :constraintext, :customdata, :customdatasrc, :dx, :dy, :error_x, :error_y, :hoverinfo, :hoverinfosrc, :hoverlabel, :hovertemplate, :hovertemplatesrc, :hovertext, :hovertextsrc, :ids, :idssrc, :insidetextanchor, :insidetextfont, :legendgroup, :marker, :meta, :metasrc, :name, :offset, :offsetgroup, :offsetsrc, :opacity, :orientation, :outsidetextfont, :r, :rsrc, :selected, :selectedpoints, :showlegend, :stream, :t, :text, :textangle, :textfont, :textposition, :textpositionsrc, :textsrc, :texttemplate, :texttemplatesrc, :transforms, :tsrc, :type, :uid, :uirevision, :unselected, :visible, :width, :widthsrc, :x, :x0, :xaxis, :xcalendar, :xperiod, :xperiod0, :xperiodalignment, :xsrc, :y, :y0, :yaxis, :ycalendar, :yperiod, :yperiod0, :yperiodalignment, :ysrc) || @warn "Function `bar` does not have attribute `$k`"
    end
    Plot(; type=:bar, kw...)
end
Base.propertynames(::typeof(bar)) = (:_deprecated, :alignmentgroup, :base, :basesrc, :cliponaxis, :constraintext, :customdata, :customdatasrc, :dx, :dy, :error_x, :error_y, :hoverinfo, :hoverinfosrc, :hoverlabel, :hovertemplate, :hovertemplatesrc, :hovertext, :hovertextsrc, :ids, :idssrc, :insidetextanchor, :insidetextfont, :legendgroup, :marker, :meta, :metasrc, :name, :offset, :offsetgroup, :offsetsrc, :opacity, :orientation, :outsidetextfont, :r, :rsrc, :selected, :selectedpoints, :showlegend, :stream, :t, :text, :textangle, :textfont, :textposition, :textpositionsrc, :textsrc, :texttemplate, :texttemplatesrc, :transforms, :tsrc, :type, :uid, :uirevision, :unselected, :visible, :width, :widthsrc, :x, :x0, :xaxis, :xcalendar, :xperiod, :xperiod0, :xperiodalignment, :xsrc, :y, :y0, :yaxis, :ycalendar, :yperiod, :yperiod0, :yperiodalignment, :ysrc)


#-----------------------------------------------------------------------------# barpolar
export barpolar
function barpolar(; kw...)
    for k in keys(kw)
        k in (:base, :basesrc, :customdata, :customdatasrc, :dr, :dtheta, :hoverinfo, :hoverinfosrc, :hoverlabel, :hovertemplate, :hovertemplatesrc, :hovertext, :hovertextsrc, :ids, :idssrc, :legendgroup, :marker, :meta, :metasrc, :name, :offset, :offsetsrc, :opacity, :r, :r0, :rsrc, :selected, :selectedpoints, :showlegend, :stream, :subplot, :text, :textsrc, :theta, :theta0, :thetasrc, :thetaunit, :transforms, :type, :uid, :uirevision, :unselected, :visible, :width, :widthsrc) || @warn "Function `barpolar` does not have attribute `$k`"
    end
    Plot(; type=:barpolar, kw...)
end
Base.propertynames(::typeof(barpolar)) = (:base, :basesrc, :customdata, :customdatasrc, :dr, :dtheta, :hoverinfo, :hoverinfosrc, :hoverlabel, :hovertemplate, :hovertemplatesrc, :hovertext, :hovertextsrc, :ids, :idssrc, :legendgroup, :marker, :meta, :metasrc, :name, :offset, :offsetsrc, :opacity, :r, :r0, :rsrc, :selected, :selectedpoints, :showlegend, :stream, :subplot, :text, :textsrc, :theta, :theta0, :thetasrc, :thetaunit, :transforms, :type, :uid, :uirevision, :unselected, :visible, :width, :widthsrc)


#-----------------------------------------------------------------------------# box
export box
function box(; kw...)
    for k in keys(kw)
        k in (:alignmentgroup, :boxmean, :boxpoints, :customdata, :customdatasrc, :dx, :dy, :fillcolor, :hoverinfo, :hoverinfosrc, :hoverlabel, :hoveron, :hovertemplate, :hovertemplatesrc, :hovertext, :hovertextsrc, :ids, :idssrc, :jitter, :legendgroup, :line, :lowerfence, :lowerfencesrc, :marker, :mean, :meansrc, :median, :mediansrc, :meta, :metasrc, :name, :notched, :notchspan, :notchspansrc, :notchwidth, :offsetgroup, :opacity, :orientation, :pointpos, :q1, :q1src, :q3, :q3src, :quartilemethod, :sd, :sdsrc, :selected, :selectedpoints, :showlegend, :stream, :text, :textsrc, :transforms, :type, :uid, :uirevision, :unselected, :upperfence, :upperfencesrc, :visible, :whiskerwidth, :width, :x, :x0, :xaxis, :xcalendar, :xperiod, :xperiod0, :xperiodalignment, :xsrc, :y, :y0, :yaxis, :ycalendar, :yperiod, :yperiod0, :yperiodalignment, :ysrc) || @warn "Function `box` does not have attribute `$k`"
    end
    Plot(; type=:box, kw...)
end
Base.propertynames(::typeof(box)) = (:alignmentgroup, :boxmean, :boxpoints, :customdata, :customdatasrc, :dx, :dy, :fillcolor, :hoverinfo, :hoverinfosrc, :hoverlabel, :hoveron, :hovertemplate, :hovertemplatesrc, :hovertext, :hovertextsrc, :ids, :idssrc, :jitter, :legendgroup, :line, :lowerfence, :lowerfencesrc, :marker, :mean, :meansrc, :median, :mediansrc, :meta, :metasrc, :name, :notched, :notchspan, :notchspansrc, :notchwidth, :offsetgroup, :opacity, :orientation, :pointpos, :q1, :q1src, :q3, :q3src, :quartilemethod, :sd, :sdsrc, :selected, :selectedpoints, :showlegend, :stream, :text, :textsrc, :transforms, :type, :uid, :uirevision, :unselected, :upperfence, :upperfencesrc, :visible, :whiskerwidth, :width, :x, :x0, :xaxis, :xcalendar, :xperiod, :xperiod0, :xperiodalignment, :xsrc, :y, :y0, :yaxis, :ycalendar, :yperiod, :yperiod0, :yperiodalignment, :ysrc)


#-----------------------------------------------------------------------------# candlestick
export candlestick
function candlestick(; kw...)
    for k in keys(kw)
        k in (:close, :closesrc, :customdata, :customdatasrc, :decreasing, :high, :highsrc, :hoverinfo, :hoverinfosrc, :hoverlabel, :hovertext, :hovertextsrc, :ids, :idssrc, :increasing, :legendgroup, :line, :low, :lowsrc, :meta, :metasrc, :name, :opacity, :open, :opensrc, :selectedpoints, :showlegend, :stream, :text, :textsrc, :transforms, :type, :uid, :uirevision, :visible, :whiskerwidth, :x, :xaxis, :xcalendar, :xperiod, :xperiod0, :xperiodalignment, :xsrc, :yaxis) || @warn "Function `candlestick` does not have attribute `$k`"
    end
    Plot(; type=:candlestick, kw...)
end
Base.propertynames(::typeof(candlestick)) = (:close, :closesrc, :customdata, :customdatasrc, :decreasing, :high, :highsrc, :hoverinfo, :hoverinfosrc, :hoverlabel, :hovertext, :hovertextsrc, :ids, :idssrc, :increasing, :legendgroup, :line, :low, :lowsrc, :meta, :metasrc, :name, :opacity, :open, :opensrc, :selectedpoints, :showlegend, :stream, :text, :textsrc, :transforms, :type, :uid, :uirevision, :visible, :whiskerwidth, :x, :xaxis, :xcalendar, :xperiod, :xperiod0, :xperiodalignment, :xsrc, :yaxis)


#-----------------------------------------------------------------------------# carpet
export carpet
function carpet(; kw...)
    for k in keys(kw)
        k in (:a, :a0, :aaxis, :asrc, :b, :b0, :baxis, :bsrc, :carpet, :cheaterslope, :color, :customdata, :customdatasrc, :da, :db, :font, :ids, :idssrc, :meta, :metasrc, :name, :opacity, :stream, :type, :uid, :uirevision, :visible, :x, :xaxis, :xsrc, :y, :yaxis, :ysrc) || @warn "Function `carpet` does not have attribute `$k`"
    end
    Plot(; type=:carpet, kw...)
end
Base.propertynames(::typeof(carpet)) = (:a, :a0, :aaxis, :asrc, :b, :b0, :baxis, :bsrc, :carpet, :cheaterslope, :color, :customdata, :customdatasrc, :da, :db, :font, :ids, :idssrc, :meta, :metasrc, :name, :opacity, :stream, :type, :uid, :uirevision, :visible, :x, :xaxis, :xsrc, :y, :yaxis, :ysrc)


#-----------------------------------------------------------------------------# choropleth
export choropleth
function choropleth(; kw...)
    for k in keys(kw)
        k in (:autocolorscale, :coloraxis, :colorbar, :colorscale, :customdata, :customdatasrc, :featureidkey, :geo, :geojson, :hoverinfo, :hoverinfosrc, :hoverlabel, :hovertemplate, :hovertemplatesrc, :hovertext, :hovertextsrc, :ids, :idssrc, :legendgroup, :locationmode, :locations, :locationssrc, :marker, :meta, :metasrc, :name, :reversescale, :selected, :selectedpoints, :showlegend, :showscale, :stream, :text, :textsrc, :transforms, :type, :uid, :uirevision, :unselected, :visible, :z, :zauto, :zmax, :zmid, :zmin, :zsrc) || @warn "Function `choropleth` does not have attribute `$k`"
    end
    Plot(; type=:choropleth, kw...)
end
Base.propertynames(::typeof(choropleth)) = (:autocolorscale, :coloraxis, :colorbar, :colorscale, :customdata, :customdatasrc, :featureidkey, :geo, :geojson, :hoverinfo, :hoverinfosrc, :hoverlabel, :hovertemplate, :hovertemplatesrc, :hovertext, :hovertextsrc, :ids, :idssrc, :legendgroup, :locationmode, :locations, :locationssrc, :marker, :meta, :metasrc, :name, :reversescale, :selected, :selectedpoints, :showlegend, :showscale, :stream, :text, :textsrc, :transforms, :type, :uid, :uirevision, :unselected, :visible, :z, :zauto, :zmax, :zmid, :zmin, :zsrc)


#-----------------------------------------------------------------------------# choroplethmapbox
export choroplethmapbox
function choroplethmapbox(; kw...)
    for k in keys(kw)
        k in (:autocolorscale, :below, :coloraxis, :colorbar, :colorscale, :customdata, :customdatasrc, :featureidkey, :geojson, :hoverinfo, :hoverinfosrc, :hoverlabel, :hovertemplate, :hovertemplatesrc, :hovertext, :hovertextsrc, :ids, :idssrc, :legendgroup, :locations, :locationssrc, :marker, :meta, :metasrc, :name, :reversescale, :selected, :selectedpoints, :showlegend, :showscale, :stream, :subplot, :text, :textsrc, :transforms, :type, :uid, :uirevision, :unselected, :visible, :z, :zauto, :zmax, :zmid, :zmin, :zsrc) || @warn "Function `choroplethmapbox` does not have attribute `$k`"
    end
    Plot(; type=:choroplethmapbox, kw...)
end
Base.propertynames(::typeof(choroplethmapbox)) = (:autocolorscale, :below, :coloraxis, :colorbar, :colorscale, :customdata, :customdatasrc, :featureidkey, :geojson, :hoverinfo, :hoverinfosrc, :hoverlabel, :hovertemplate, :hovertemplatesrc, :hovertext, :hovertextsrc, :ids, :idssrc, :legendgroup, :locations, :locationssrc, :marker, :meta, :metasrc, :name, :reversescale, :selected, :selectedpoints, :showlegend, :showscale, :stream, :subplot, :text, :textsrc, :transforms, :type, :uid, :uirevision, :unselected, :visible, :z, :zauto, :zmax, :zmid, :zmin, :zsrc)


#-----------------------------------------------------------------------------# cone
export cone
function cone(; kw...)
    for k in keys(kw)
        k in (:anchor, :autocolorscale, :cauto, :cmax, :cmid, :cmin, :coloraxis, :colorbar, :colorscale, :customdata, :customdatasrc, :hoverinfo, :hoverinfosrc, :hoverlabel, :hovertemplate, :hovertemplatesrc, :hovertext, :hovertextsrc, :ids, :idssrc, :legendgroup, :lighting, :lightposition, :meta, :metasrc, :name, :opacity, :reversescale, :scene, :showlegend, :showscale, :sizemode, :sizeref, :stream, :text, :textsrc, :type, :u, :uid, :uirevision, :usrc, :v, :visible, :vsrc, :w, :wsrc, :x, :xsrc, :y, :ysrc, :z, :zsrc) || @warn "Function `cone` does not have attribute `$k`"
    end
    Plot(; type=:cone, kw...)
end
Base.propertynames(::typeof(cone)) = (:anchor, :autocolorscale, :cauto, :cmax, :cmid, :cmin, :coloraxis, :colorbar, :colorscale, :customdata, :customdatasrc, :hoverinfo, :hoverinfosrc, :hoverlabel, :hovertemplate, :hovertemplatesrc, :hovertext, :hovertextsrc, :ids, :idssrc, :legendgroup, :lighting, :lightposition, :meta, :metasrc, :name, :opacity, :reversescale, :scene, :showlegend, :showscale, :sizemode, :sizeref, :stream, :text, :textsrc, :type, :u, :uid, :uirevision, :usrc, :v, :visible, :vsrc, :w, :wsrc, :x, :xsrc, :y, :ysrc, :z, :zsrc)


#-----------------------------------------------------------------------------# contour
export contour
function contour(; kw...)
    for k in keys(kw)
        k in (:autocolorscale, :autocontour, :coloraxis, :colorbar, :colorscale, :connectgaps, :contours, :customdata, :customdatasrc, :dx, :dy, :fillcolor, :hoverinfo, :hoverinfosrc, :hoverlabel, :hoverongaps, :hovertemplate, :hovertemplatesrc, :hovertext, :hovertextsrc, :ids, :idssrc, :legendgroup, :line, :meta, :metasrc, :name, :ncontours, :opacity, :reversescale, :showlegend, :showscale, :stream, :text, :textsrc, :transforms, :transpose, :type, :uid, :uirevision, :visible, :x, :x0, :xaxis, :xcalendar, :xperiod, :xperiod0, :xperiodalignment, :xsrc, :xtype, :y, :y0, :yaxis, :ycalendar, :yperiod, :yperiod0, :yperiodalignment, :ysrc, :ytype, :z, :zauto, :zhoverformat, :zmax, :zmid, :zmin, :zsrc) || @warn "Function `contour` does not have attribute `$k`"
    end
    Plot(; type=:contour, kw...)
end
Base.propertynames(::typeof(contour)) = (:autocolorscale, :autocontour, :coloraxis, :colorbar, :colorscale, :connectgaps, :contours, :customdata, :customdatasrc, :dx, :dy, :fillcolor, :hoverinfo, :hoverinfosrc, :hoverlabel, :hoverongaps, :hovertemplate, :hovertemplatesrc, :hovertext, :hovertextsrc, :ids, :idssrc, :legendgroup, :line, :meta, :metasrc, :name, :ncontours, :opacity, :reversescale, :showlegend, :showscale, :stream, :text, :textsrc, :transforms, :transpose, :type, :uid, :uirevision, :visible, :x, :x0, :xaxis, :xcalendar, :xperiod, :xperiod0, :xperiodalignment, :xsrc, :xtype, :y, :y0, :yaxis, :ycalendar, :yperiod, :yperiod0, :yperiodalignment, :ysrc, :ytype, :z, :zauto, :zhoverformat, :zmax, :zmid, :zmin, :zsrc)


#-----------------------------------------------------------------------------# contourcarpet
export contourcarpet
function contourcarpet(; kw...)
    for k in keys(kw)
        k in (:a, :a0, :asrc, :atype, :autocolorscale, :autocontour, :b, :b0, :bsrc, :btype, :carpet, :coloraxis, :colorbar, :colorscale, :contours, :customdata, :customdatasrc, :da, :db, :fillcolor, :hovertext, :hovertextsrc, :ids, :idssrc, :legendgroup, :line, :meta, :metasrc, :name, :ncontours, :opacity, :reversescale, :showlegend, :showscale, :stream, :text, :textsrc, :transpose, :type, :uid, :uirevision, :visible, :xaxis, :yaxis, :z, :zauto, :zmax, :zmid, :zmin, :zsrc) || @warn "Function `contourcarpet` does not have attribute `$k`"
    end
    Plot(; type=:contourcarpet, kw...)
end
Base.propertynames(::typeof(contourcarpet)) = (:a, :a0, :asrc, :atype, :autocolorscale, :autocontour, :b, :b0, :bsrc, :btype, :carpet, :coloraxis, :colorbar, :colorscale, :contours, :customdata, :customdatasrc, :da, :db, :fillcolor, :hovertext, :hovertextsrc, :ids, :idssrc, :legendgroup, :line, :meta, :metasrc, :name, :ncontours, :opacity, :reversescale, :showlegend, :showscale, :stream, :text, :textsrc, :transpose, :type, :uid, :uirevision, :visible, :xaxis, :yaxis, :z, :zauto, :zmax, :zmid, :zmin, :zsrc)


#-----------------------------------------------------------------------------# densitymapbox
export densitymapbox
function densitymapbox(; kw...)
    for k in keys(kw)
        k in (:autocolorscale, :below, :coloraxis, :colorbar, :colorscale, :customdata, :customdatasrc, :hoverinfo, :hoverinfosrc, :hoverlabel, :hovertemplate, :hovertemplatesrc, :hovertext, :hovertextsrc, :ids, :idssrc, :lat, :latsrc, :legendgroup, :lon, :lonsrc, :meta, :metasrc, :name, :opacity, :radius, :radiussrc, :reversescale, :showlegend, :showscale, :stream, :subplot, :text, :textsrc, :transforms, :type, :uid, :uirevision, :visible, :z, :zauto, :zmax, :zmid, :zmin, :zsrc) || @warn "Function `densitymapbox` does not have attribute `$k`"
    end
    Plot(; type=:densitymapbox, kw...)
end
Base.propertynames(::typeof(densitymapbox)) = (:autocolorscale, :below, :coloraxis, :colorbar, :colorscale, :customdata, :customdatasrc, :hoverinfo, :hoverinfosrc, :hoverlabel, :hovertemplate, :hovertemplatesrc, :hovertext, :hovertextsrc, :ids, :idssrc, :lat, :latsrc, :legendgroup, :lon, :lonsrc, :meta, :metasrc, :name, :opacity, :radius, :radiussrc, :reversescale, :showlegend, :showscale, :stream, :subplot, :text, :textsrc, :transforms, :type, :uid, :uirevision, :visible, :z, :zauto, :zmax, :zmid, :zmin, :zsrc)


#-----------------------------------------------------------------------------# funnel
export funnel
function funnel(; kw...)
    for k in keys(kw)
        k in (:alignmentgroup, :cliponaxis, :connector, :constraintext, :customdata, :customdatasrc, :dx, :dy, :hoverinfo, :hoverinfosrc, :hoverlabel, :hovertemplate, :hovertemplatesrc, :hovertext, :hovertextsrc, :ids, :idssrc, :insidetextanchor, :insidetextfont, :legendgroup, :marker, :meta, :metasrc, :name, :offset, :offsetgroup, :opacity, :orientation, :outsidetextfont, :selectedpoints, :showlegend, :stream, :text, :textangle, :textfont, :textinfo, :textposition, :textpositionsrc, :textsrc, :texttemplate, :texttemplatesrc, :transforms, :type, :uid, :uirevision, :visible, :width, :x, :x0, :xaxis, :xperiod, :xperiod0, :xperiodalignment, :xsrc, :y, :y0, :yaxis, :yperiod, :yperiod0, :yperiodalignment, :ysrc) || @warn "Function `funnel` does not have attribute `$k`"
    end
    Plot(; type=:funnel, kw...)
end
Base.propertynames(::typeof(funnel)) = (:alignmentgroup, :cliponaxis, :connector, :constraintext, :customdata, :customdatasrc, :dx, :dy, :hoverinfo, :hoverinfosrc, :hoverlabel, :hovertemplate, :hovertemplatesrc, :hovertext, :hovertextsrc, :ids, :idssrc, :insidetextanchor, :insidetextfont, :legendgroup, :marker, :meta, :metasrc, :name, :offset, :offsetgroup, :opacity, :orientation, :outsidetextfont, :selectedpoints, :showlegend, :stream, :text, :textangle, :textfont, :textinfo, :textposition, :textpositionsrc, :textsrc, :texttemplate, :texttemplatesrc, :transforms, :type, :uid, :uirevision, :visible, :width, :x, :x0, :xaxis, :xperiod, :xperiod0, :xperiodalignment, :xsrc, :y, :y0, :yaxis, :yperiod, :yperiod0, :yperiodalignment, :ysrc)


#-----------------------------------------------------------------------------# funnelarea
export funnelarea
function funnelarea(; kw...)
    for k in keys(kw)
        k in (:aspectratio, :baseratio, :customdata, :customdatasrc, :dlabel, :domain, :hoverinfo, :hoverinfosrc, :hoverlabel, :hovertemplate, :hovertemplatesrc, :hovertext, :hovertextsrc, :ids, :idssrc, :insidetextfont, :label0, :labels, :labelssrc, :legendgroup, :marker, :meta, :metasrc, :name, :opacity, :scalegroup, :showlegend, :stream, :text, :textfont, :textinfo, :textposition, :textpositionsrc, :textsrc, :texttemplate, :texttemplatesrc, :title, :transforms, :type, :uid, :uirevision, :values, :valuessrc, :visible) || @warn "Function `funnelarea` does not have attribute `$k`"
    end
    Plot(; type=:funnelarea, kw...)
end
Base.propertynames(::typeof(funnelarea)) = (:aspectratio, :baseratio, :customdata, :customdatasrc, :dlabel, :domain, :hoverinfo, :hoverinfosrc, :hoverlabel, :hovertemplate, :hovertemplatesrc, :hovertext, :hovertextsrc, :ids, :idssrc, :insidetextfont, :label0, :labels, :labelssrc, :legendgroup, :marker, :meta, :metasrc, :name, :opacity, :scalegroup, :showlegend, :stream, :text, :textfont, :textinfo, :textposition, :textpositionsrc, :textsrc, :texttemplate, :texttemplatesrc, :title, :transforms, :type, :uid, :uirevision, :values, :valuessrc, :visible)


#-----------------------------------------------------------------------------# heatmap
export heatmap
function heatmap(; kw...)
    for k in keys(kw)
        k in (:autocolorscale, :coloraxis, :colorbar, :colorscale, :connectgaps, :customdata, :customdatasrc, :dx, :dy, :hoverinfo, :hoverinfosrc, :hoverlabel, :hoverongaps, :hovertemplate, :hovertemplatesrc, :hovertext, :hovertextsrc, :ids, :idssrc, :legendgroup, :meta, :metasrc, :name, :opacity, :reversescale, :showlegend, :showscale, :stream, :text, :textsrc, :transforms, :transpose, :type, :uid, :uirevision, :visible, :x, :x0, :xaxis, :xcalendar, :xgap, :xperiod, :xperiod0, :xperiodalignment, :xsrc, :xtype, :y, :y0, :yaxis, :ycalendar, :ygap, :yperiod, :yperiod0, :yperiodalignment, :ysrc, :ytype, :z, :zauto, :zhoverformat, :zmax, :zmid, :zmin, :zsmooth, :zsrc) || @warn "Function `heatmap` does not have attribute `$k`"
    end
    Plot(; type=:heatmap, kw...)
end
Base.propertynames(::typeof(heatmap)) = (:autocolorscale, :coloraxis, :colorbar, :colorscale, :connectgaps, :customdata, :customdatasrc, :dx, :dy, :hoverinfo, :hoverinfosrc, :hoverlabel, :hoverongaps, :hovertemplate, :hovertemplatesrc, :hovertext, :hovertextsrc, :ids, :idssrc, :legendgroup, :meta, :metasrc, :name, :opacity, :reversescale, :showlegend, :showscale, :stream, :text, :textsrc, :transforms, :transpose, :type, :uid, :uirevision, :visible, :x, :x0, :xaxis, :xcalendar, :xgap, :xperiod, :xperiod0, :xperiodalignment, :xsrc, :xtype, :y, :y0, :yaxis, :ycalendar, :ygap, :yperiod, :yperiod0, :yperiodalignment, :ysrc, :ytype, :z, :zauto, :zhoverformat, :zmax, :zmid, :zmin, :zsmooth, :zsrc)


#-----------------------------------------------------------------------------# heatmapgl
export heatmapgl
function heatmapgl(; kw...)
    for k in keys(kw)
        k in (:autocolorscale, :coloraxis, :colorbar, :colorscale, :customdata, :customdatasrc, :dx, :dy, :hoverinfo, :hoverinfosrc, :hoverlabel, :ids, :idssrc, :meta, :metasrc, :name, :opacity, :reversescale, :showscale, :stream, :text, :textsrc, :transforms, :transpose, :type, :uid, :uirevision, :visible, :x, :x0, :xaxis, :xsrc, :xtype, :y, :y0, :yaxis, :ysrc, :ytype, :z, :zauto, :zmax, :zmid, :zmin, :zsmooth, :zsrc) || @warn "Function `heatmapgl` does not have attribute `$k`"
    end
    Plot(; type=:heatmapgl, kw...)
end
Base.propertynames(::typeof(heatmapgl)) = (:autocolorscale, :coloraxis, :colorbar, :colorscale, :customdata, :customdatasrc, :dx, :dy, :hoverinfo, :hoverinfosrc, :hoverlabel, :ids, :idssrc, :meta, :metasrc, :name, :opacity, :reversescale, :showscale, :stream, :text, :textsrc, :transforms, :transpose, :type, :uid, :uirevision, :visible, :x, :x0, :xaxis, :xsrc, :xtype, :y, :y0, :yaxis, :ysrc, :ytype, :z, :zauto, :zmax, :zmid, :zmin, :zsmooth, :zsrc)


#-----------------------------------------------------------------------------# histogram
export histogram
function histogram(; kw...)
    for k in keys(kw)
        k in (:_deprecated, :alignmentgroup, :autobinx, :autobiny, :bingroup, :cumulative, :customdata, :customdatasrc, :error_x, :error_y, :histfunc, :histnorm, :hoverinfo, :hoverinfosrc, :hoverlabel, :hovertemplate, :hovertemplatesrc, :hovertext, :hovertextsrc, :ids, :idssrc, :legendgroup, :marker, :meta, :metasrc, :name, :nbinsx, :nbinsy, :offsetgroup, :opacity, :orientation, :selected, :selectedpoints, :showlegend, :stream, :text, :textsrc, :transforms, :type, :uid, :uirevision, :unselected, :visible, :x, :xaxis, :xbins, :xcalendar, :xsrc, :y, :yaxis, :ybins, :ycalendar, :ysrc) || @warn "Function `histogram` does not have attribute `$k`"
    end
    Plot(; type=:histogram, kw...)
end
Base.propertynames(::typeof(histogram)) = (:_deprecated, :alignmentgroup, :autobinx, :autobiny, :bingroup, :cumulative, :customdata, :customdatasrc, :error_x, :error_y, :histfunc, :histnorm, :hoverinfo, :hoverinfosrc, :hoverlabel, :hovertemplate, :hovertemplatesrc, :hovertext, :hovertextsrc, :ids, :idssrc, :legendgroup, :marker, :meta, :metasrc, :name, :nbinsx, :nbinsy, :offsetgroup, :opacity, :orientation, :selected, :selectedpoints, :showlegend, :stream, :text, :textsrc, :transforms, :type, :uid, :uirevision, :unselected, :visible, :x, :xaxis, :xbins, :xcalendar, :xsrc, :y, :yaxis, :ybins, :ycalendar, :ysrc)


#-----------------------------------------------------------------------------# histogram2d
export histogram2d
function histogram2d(; kw...)
    for k in keys(kw)
        k in (:autobinx, :autobiny, :autocolorscale, :bingroup, :coloraxis, :colorbar, :colorscale, :customdata, :customdatasrc, :histfunc, :histnorm, :hoverinfo, :hoverinfosrc, :hoverlabel, :hovertemplate, :hovertemplatesrc, :ids, :idssrc, :legendgroup, :marker, :meta, :metasrc, :name, :nbinsx, :nbinsy, :opacity, :reversescale, :showlegend, :showscale, :stream, :transforms, :type, :uid, :uirevision, :visible, :x, :xaxis, :xbingroup, :xbins, :xcalendar, :xgap, :xsrc, :y, :yaxis, :ybingroup, :ybins, :ycalendar, :ygap, :ysrc, :z, :zauto, :zhoverformat, :zmax, :zmid, :zmin, :zsmooth, :zsrc) || @warn "Function `histogram2d` does not have attribute `$k`"
    end
    Plot(; type=:histogram2d, kw...)
end
Base.propertynames(::typeof(histogram2d)) = (:autobinx, :autobiny, :autocolorscale, :bingroup, :coloraxis, :colorbar, :colorscale, :customdata, :customdatasrc, :histfunc, :histnorm, :hoverinfo, :hoverinfosrc, :hoverlabel, :hovertemplate, :hovertemplatesrc, :ids, :idssrc, :legendgroup, :marker, :meta, :metasrc, :name, :nbinsx, :nbinsy, :opacity, :reversescale, :showlegend, :showscale, :stream, :transforms, :type, :uid, :uirevision, :visible, :x, :xaxis, :xbingroup, :xbins, :xcalendar, :xgap, :xsrc, :y, :yaxis, :ybingroup, :ybins, :ycalendar, :ygap, :ysrc, :z, :zauto, :zhoverformat, :zmax, :zmid, :zmin, :zsmooth, :zsrc)


#-----------------------------------------------------------------------------# histogram2dcontour
export histogram2dcontour
function histogram2dcontour(; kw...)
    for k in keys(kw)
        k in (:autobinx, :autobiny, :autocolorscale, :autocontour, :bingroup, :coloraxis, :colorbar, :colorscale, :contours, :customdata, :customdatasrc, :histfunc, :histnorm, :hoverinfo, :hoverinfosrc, :hoverlabel, :hovertemplate, :hovertemplatesrc, :ids, :idssrc, :legendgroup, :line, :marker, :meta, :metasrc, :name, :nbinsx, :nbinsy, :ncontours, :opacity, :reversescale, :showlegend, :showscale, :stream, :transforms, :type, :uid, :uirevision, :visible, :x, :xaxis, :xbingroup, :xbins, :xcalendar, :xsrc, :y, :yaxis, :ybingroup, :ybins, :ycalendar, :ysrc, :z, :zauto, :zhoverformat, :zmax, :zmid, :zmin, :zsrc) || @warn "Function `histogram2dcontour` does not have attribute `$k`"
    end
    Plot(; type=:histogram2dcontour, kw...)
end
Base.propertynames(::typeof(histogram2dcontour)) = (:autobinx, :autobiny, :autocolorscale, :autocontour, :bingroup, :coloraxis, :colorbar, :colorscale, :contours, :customdata, :customdatasrc, :histfunc, :histnorm, :hoverinfo, :hoverinfosrc, :hoverlabel, :hovertemplate, :hovertemplatesrc, :ids, :idssrc, :legendgroup, :line, :marker, :meta, :metasrc, :name, :nbinsx, :nbinsy, :ncontours, :opacity, :reversescale, :showlegend, :showscale, :stream, :transforms, :type, :uid, :uirevision, :visible, :x, :xaxis, :xbingroup, :xbins, :xcalendar, :xsrc, :y, :yaxis, :ybingroup, :ybins, :ycalendar, :ysrc, :z, :zauto, :zhoverformat, :zmax, :zmid, :zmin, :zsrc)


#-----------------------------------------------------------------------------# image
export image
function image(; kw...)
    for k in keys(kw)
        k in (:colormodel, :customdata, :customdatasrc, :dx, :dy, :hoverinfo, :hoverinfosrc, :hoverlabel, :hovertemplate, :hovertemplatesrc, :hovertext, :hovertextsrc, :ids, :idssrc, :meta, :metasrc, :name, :opacity, :source, :stream, :text, :textsrc, :type, :uid, :uirevision, :visible, :x0, :xaxis, :y0, :yaxis, :z, :zmax, :zmin, :zsrc) || @warn "Function `image` does not have attribute `$k`"
    end
    Plot(; type=:image, kw...)
end
Base.propertynames(::typeof(image)) = (:colormodel, :customdata, :customdatasrc, :dx, :dy, :hoverinfo, :hoverinfosrc, :hoverlabel, :hovertemplate, :hovertemplatesrc, :hovertext, :hovertextsrc, :ids, :idssrc, :meta, :metasrc, :name, :opacity, :source, :stream, :text, :textsrc, :type, :uid, :uirevision, :visible, :x0, :xaxis, :y0, :yaxis, :z, :zmax, :zmin, :zsrc)


#-----------------------------------------------------------------------------# indicator
export indicator
function indicator(; kw...)
    for k in keys(kw)
        k in (:align, :customdata, :customdatasrc, :delta, :domain, :gauge, :ids, :idssrc, :meta, :metasrc, :mode, :name, :number, :stream, :title, :transforms, :type, :uid, :uirevision, :value, :visible) || @warn "Function `indicator` does not have attribute `$k`"
    end
    Plot(; type=:indicator, kw...)
end
Base.propertynames(::typeof(indicator)) = (:align, :customdata, :customdatasrc, :delta, :domain, :gauge, :ids, :idssrc, :meta, :metasrc, :mode, :name, :number, :stream, :title, :transforms, :type, :uid, :uirevision, :value, :visible)


#-----------------------------------------------------------------------------# isosurface
export isosurface
function isosurface(; kw...)
    for k in keys(kw)
        k in (:autocolorscale, :caps, :cauto, :cmax, :cmid, :cmin, :coloraxis, :colorbar, :colorscale, :contour, :customdata, :customdatasrc, :flatshading, :hoverinfo, :hoverinfosrc, :hoverlabel, :hovertemplate, :hovertemplatesrc, :hovertext, :hovertextsrc, :ids, :idssrc, :isomax, :isomin, :legendgroup, :lighting, :lightposition, :meta, :metasrc, :name, :opacity, :reversescale, :scene, :showlegend, :showscale, :slices, :spaceframe, :stream, :surface, :text, :textsrc, :type, :uid, :uirevision, :value, :valuesrc, :visible, :x, :xsrc, :y, :ysrc, :z, :zsrc) || @warn "Function `isosurface` does not have attribute `$k`"
    end
    Plot(; type=:isosurface, kw...)
end
Base.propertynames(::typeof(isosurface)) = (:autocolorscale, :caps, :cauto, :cmax, :cmid, :cmin, :coloraxis, :colorbar, :colorscale, :contour, :customdata, :customdatasrc, :flatshading, :hoverinfo, :hoverinfosrc, :hoverlabel, :hovertemplate, :hovertemplatesrc, :hovertext, :hovertextsrc, :ids, :idssrc, :isomax, :isomin, :legendgroup, :lighting, :lightposition, :meta, :metasrc, :name, :opacity, :reversescale, :scene, :showlegend, :showscale, :slices, :spaceframe, :stream, :surface, :text, :textsrc, :type, :uid, :uirevision, :value, :valuesrc, :visible, :x, :xsrc, :y, :ysrc, :z, :zsrc)


#-----------------------------------------------------------------------------# mesh3d
export mesh3d
function mesh3d(; kw...)
    for k in keys(kw)
        k in (:alphahull, :autocolorscale, :cauto, :cmax, :cmid, :cmin, :color, :coloraxis, :colorbar, :colorscale, :contour, :customdata, :customdatasrc, :delaunayaxis, :facecolor, :facecolorsrc, :flatshading, :hoverinfo, :hoverinfosrc, :hoverlabel, :hovertemplate, :hovertemplatesrc, :hovertext, :hovertextsrc, :i, :ids, :idssrc, :intensity, :intensitymode, :intensitysrc, :isrc, :j, :jsrc, :k, :ksrc, :legendgroup, :lighting, :lightposition, :meta, :metasrc, :name, :opacity, :reversescale, :scene, :showlegend, :showscale, :stream, :text, :textsrc, :type, :uid, :uirevision, :vertexcolor, :vertexcolorsrc, :visible, :x, :xcalendar, :xsrc, :y, :ycalendar, :ysrc, :z, :zcalendar, :zsrc) || @warn "Function `mesh3d` does not have attribute `$k`"
    end
    Plot(; type=:mesh3d, kw...)
end
Base.propertynames(::typeof(mesh3d)) = (:alphahull, :autocolorscale, :cauto, :cmax, :cmid, :cmin, :color, :coloraxis, :colorbar, :colorscale, :contour, :customdata, :customdatasrc, :delaunayaxis, :facecolor, :facecolorsrc, :flatshading, :hoverinfo, :hoverinfosrc, :hoverlabel, :hovertemplate, :hovertemplatesrc, :hovertext, :hovertextsrc, :i, :ids, :idssrc, :intensity, :intensitymode, :intensitysrc, :isrc, :j, :jsrc, :k, :ksrc, :legendgroup, :lighting, :lightposition, :meta, :metasrc, :name, :opacity, :reversescale, :scene, :showlegend, :showscale, :stream, :text, :textsrc, :type, :uid, :uirevision, :vertexcolor, :vertexcolorsrc, :visible, :x, :xcalendar, :xsrc, :y, :ycalendar, :ysrc, :z, :zcalendar, :zsrc)


#-----------------------------------------------------------------------------# ohlc
export ohlc
function ohlc(; kw...)
    for k in keys(kw)
        k in (:close, :closesrc, :customdata, :customdatasrc, :decreasing, :high, :highsrc, :hoverinfo, :hoverinfosrc, :hoverlabel, :hovertext, :hovertextsrc, :ids, :idssrc, :increasing, :legendgroup, :line, :low, :lowsrc, :meta, :metasrc, :name, :opacity, :open, :opensrc, :selectedpoints, :showlegend, :stream, :text, :textsrc, :tickwidth, :transforms, :type, :uid, :uirevision, :visible, :x, :xaxis, :xcalendar, :xperiod, :xperiod0, :xperiodalignment, :xsrc, :yaxis) || @warn "Function `ohlc` does not have attribute `$k`"
    end
    Plot(; type=:ohlc, kw...)
end
Base.propertynames(::typeof(ohlc)) = (:close, :closesrc, :customdata, :customdatasrc, :decreasing, :high, :highsrc, :hoverinfo, :hoverinfosrc, :hoverlabel, :hovertext, :hovertextsrc, :ids, :idssrc, :increasing, :legendgroup, :line, :low, :lowsrc, :meta, :metasrc, :name, :opacity, :open, :opensrc, :selectedpoints, :showlegend, :stream, :text, :textsrc, :tickwidth, :transforms, :type, :uid, :uirevision, :visible, :x, :xaxis, :xcalendar, :xperiod, :xperiod0, :xperiodalignment, :xsrc, :yaxis)


#-----------------------------------------------------------------------------# parcats
export parcats
function parcats(; kw...)
    for k in keys(kw)
        k in (:arrangement, :bundlecolors, :counts, :countssrc, :dimensions, :domain, :hoverinfo, :hoveron, :hovertemplate, :labelfont, :line, :meta, :metasrc, :name, :sortpaths, :stream, :tickfont, :transforms, :type, :uid, :uirevision, :visible) || @warn "Function `parcats` does not have attribute `$k`"
    end
    Plot(; type=:parcats, kw...)
end
Base.propertynames(::typeof(parcats)) = (:arrangement, :bundlecolors, :counts, :countssrc, :dimensions, :domain, :hoverinfo, :hoveron, :hovertemplate, :labelfont, :line, :meta, :metasrc, :name, :sortpaths, :stream, :tickfont, :transforms, :type, :uid, :uirevision, :visible)


#-----------------------------------------------------------------------------# parcoords
export parcoords
function parcoords(; kw...)
    for k in keys(kw)
        k in (:customdata, :customdatasrc, :dimensions, :domain, :ids, :idssrc, :labelangle, :labelfont, :labelside, :line, :meta, :metasrc, :name, :rangefont, :stream, :tickfont, :transforms, :type, :uid, :uirevision, :visible) || @warn "Function `parcoords` does not have attribute `$k`"
    end
    Plot(; type=:parcoords, kw...)
end
Base.propertynames(::typeof(parcoords)) = (:customdata, :customdatasrc, :dimensions, :domain, :ids, :idssrc, :labelangle, :labelfont, :labelside, :line, :meta, :metasrc, :name, :rangefont, :stream, :tickfont, :transforms, :type, :uid, :uirevision, :visible)


#-----------------------------------------------------------------------------# pie
export pie
function pie(; kw...)
    for k in keys(kw)
        k in (:_deprecated, :automargin, :customdata, :customdatasrc, :direction, :dlabel, :domain, :hole, :hoverinfo, :hoverinfosrc, :hoverlabel, :hovertemplate, :hovertemplatesrc, :hovertext, :hovertextsrc, :ids, :idssrc, :insidetextfont, :insidetextorientation, :label0, :labels, :labelssrc, :legendgroup, :marker, :meta, :metasrc, :name, :opacity, :outsidetextfont, :pull, :pullsrc, :rotation, :scalegroup, :showlegend, :sort, :stream, :text, :textfont, :textinfo, :textposition, :textpositionsrc, :textsrc, :texttemplate, :texttemplatesrc, :title, :transforms, :type, :uid, :uirevision, :values, :valuessrc, :visible) || @warn "Function `pie` does not have attribute `$k`"
    end
    Plot(; type=:pie, kw...)
end
Base.propertynames(::typeof(pie)) = (:_deprecated, :automargin, :customdata, :customdatasrc, :direction, :dlabel, :domain, :hole, :hoverinfo, :hoverinfosrc, :hoverlabel, :hovertemplate, :hovertemplatesrc, :hovertext, :hovertextsrc, :ids, :idssrc, :insidetextfont, :insidetextorientation, :label0, :labels, :labelssrc, :legendgroup, :marker, :meta, :metasrc, :name, :opacity, :outsidetextfont, :pull, :pullsrc, :rotation, :scalegroup, :showlegend, :sort, :stream, :text, :textfont, :textinfo, :textposition, :textpositionsrc, :textsrc, :texttemplate, :texttemplatesrc, :title, :transforms, :type, :uid, :uirevision, :values, :valuessrc, :visible)


#-----------------------------------------------------------------------------# pointcloud
export pointcloud
function pointcloud(; kw...)
    for k in keys(kw)
        k in (:customdata, :customdatasrc, :hoverinfo, :hoverinfosrc, :hoverlabel, :ids, :idssrc, :indices, :indicessrc, :legendgroup, :marker, :meta, :metasrc, :name, :opacity, :showlegend, :stream, :text, :textsrc, :type, :uid, :uirevision, :visible, :x, :xaxis, :xbounds, :xboundssrc, :xsrc, :xy, :xysrc, :y, :yaxis, :ybounds, :yboundssrc, :ysrc) || @warn "Function `pointcloud` does not have attribute `$k`"
    end
    Plot(; type=:pointcloud, kw...)
end
Base.propertynames(::typeof(pointcloud)) = (:customdata, :customdatasrc, :hoverinfo, :hoverinfosrc, :hoverlabel, :ids, :idssrc, :indices, :indicessrc, :legendgroup, :marker, :meta, :metasrc, :name, :opacity, :showlegend, :stream, :text, :textsrc, :type, :uid, :uirevision, :visible, :x, :xaxis, :xbounds, :xboundssrc, :xsrc, :xy, :xysrc, :y, :yaxis, :ybounds, :yboundssrc, :ysrc)


#-----------------------------------------------------------------------------# sankey
export sankey
function sankey(; kw...)
    for k in keys(kw)
        k in (:arrangement, :customdata, :customdatasrc, :domain, :hoverinfo, :hoverlabel, :ids, :idssrc, :link, :meta, :metasrc, :name, :node, :orientation, :selectedpoints, :stream, :textfont, :type, :uid, :uirevision, :valueformat, :valuesuffix, :visible) || @warn "Function `sankey` does not have attribute `$k`"
    end
    Plot(; type=:sankey, kw...)
end
Base.propertynames(::typeof(sankey)) = (:arrangement, :customdata, :customdatasrc, :domain, :hoverinfo, :hoverlabel, :ids, :idssrc, :link, :meta, :metasrc, :name, :node, :orientation, :selectedpoints, :stream, :textfont, :type, :uid, :uirevision, :valueformat, :valuesuffix, :visible)


#-----------------------------------------------------------------------------# scatter
export scatter
function scatter(; kw...)
    for k in keys(kw)
        k in (:cliponaxis, :connectgaps, :customdata, :customdatasrc, :dx, :dy, :error_x, :error_y, :fill, :fillcolor, :groupnorm, :hoverinfo, :hoverinfosrc, :hoverlabel, :hoveron, :hovertemplate, :hovertemplatesrc, :hovertext, :hovertextsrc, :ids, :idssrc, :legendgroup, :line, :marker, :meta, :metasrc, :mode, :name, :opacity, :orientation, :r, :rsrc, :selected, :selectedpoints, :showlegend, :stackgaps, :stackgroup, :stream, :t, :text, :textfont, :textposition, :textpositionsrc, :textsrc, :texttemplate, :texttemplatesrc, :transforms, :tsrc, :type, :uid, :uirevision, :unselected, :visible, :x, :x0, :xaxis, :xcalendar, :xperiod, :xperiod0, :xperiodalignment, :xsrc, :y, :y0, :yaxis, :ycalendar, :yperiod, :yperiod0, :yperiodalignment, :ysrc) || @warn "Function `scatter` does not have attribute `$k`"
    end
    Plot(; type=:scatter, kw...)
end
Base.propertynames(::typeof(scatter)) = (:cliponaxis, :connectgaps, :customdata, :customdatasrc, :dx, :dy, :error_x, :error_y, :fill, :fillcolor, :groupnorm, :hoverinfo, :hoverinfosrc, :hoverlabel, :hoveron, :hovertemplate, :hovertemplatesrc, :hovertext, :hovertextsrc, :ids, :idssrc, :legendgroup, :line, :marker, :meta, :metasrc, :mode, :name, :opacity, :orientation, :r, :rsrc, :selected, :selectedpoints, :showlegend, :stackgaps, :stackgroup, :stream, :t, :text, :textfont, :textposition, :textpositionsrc, :textsrc, :texttemplate, :texttemplatesrc, :transforms, :tsrc, :type, :uid, :uirevision, :unselected, :visible, :x, :x0, :xaxis, :xcalendar, :xperiod, :xperiod0, :xperiodalignment, :xsrc, :y, :y0, :yaxis, :ycalendar, :yperiod, :yperiod0, :yperiodalignment, :ysrc)


#-----------------------------------------------------------------------------# scatter3d
export scatter3d
function scatter3d(; kw...)
    for k in keys(kw)
        k in (:connectgaps, :customdata, :customdatasrc, :error_x, :error_y, :error_z, :hoverinfo, :hoverinfosrc, :hoverlabel, :hovertemplate, :hovertemplatesrc, :hovertext, :hovertextsrc, :ids, :idssrc, :legendgroup, :line, :marker, :meta, :metasrc, :mode, :name, :opacity, :projection, :scene, :showlegend, :stream, :surfaceaxis, :surfacecolor, :text, :textfont, :textposition, :textpositionsrc, :textsrc, :texttemplate, :texttemplatesrc, :transforms, :type, :uid, :uirevision, :visible, :x, :xcalendar, :xsrc, :y, :ycalendar, :ysrc, :z, :zcalendar, :zsrc) || @warn "Function `scatter3d` does not have attribute `$k`"
    end
    Plot(; type=:scatter3d, kw...)
end
Base.propertynames(::typeof(scatter3d)) = (:connectgaps, :customdata, :customdatasrc, :error_x, :error_y, :error_z, :hoverinfo, :hoverinfosrc, :hoverlabel, :hovertemplate, :hovertemplatesrc, :hovertext, :hovertextsrc, :ids, :idssrc, :legendgroup, :line, :marker, :meta, :metasrc, :mode, :name, :opacity, :projection, :scene, :showlegend, :stream, :surfaceaxis, :surfacecolor, :text, :textfont, :textposition, :textpositionsrc, :textsrc, :texttemplate, :texttemplatesrc, :transforms, :type, :uid, :uirevision, :visible, :x, :xcalendar, :xsrc, :y, :ycalendar, :ysrc, :z, :zcalendar, :zsrc)


#-----------------------------------------------------------------------------# scattercarpet
export scattercarpet
function scattercarpet(; kw...)
    for k in keys(kw)
        k in (:a, :asrc, :b, :bsrc, :carpet, :connectgaps, :customdata, :customdatasrc, :fill, :fillcolor, :hoverinfo, :hoverinfosrc, :hoverlabel, :hoveron, :hovertemplate, :hovertemplatesrc, :hovertext, :hovertextsrc, :ids, :idssrc, :legendgroup, :line, :marker, :meta, :metasrc, :mode, :name, :opacity, :selected, :selectedpoints, :showlegend, :stream, :text, :textfont, :textposition, :textpositionsrc, :textsrc, :texttemplate, :texttemplatesrc, :transforms, :type, :uid, :uirevision, :unselected, :visible, :xaxis, :yaxis) || @warn "Function `scattercarpet` does not have attribute `$k`"
    end
    Plot(; type=:scattercarpet, kw...)
end
Base.propertynames(::typeof(scattercarpet)) = (:a, :asrc, :b, :bsrc, :carpet, :connectgaps, :customdata, :customdatasrc, :fill, :fillcolor, :hoverinfo, :hoverinfosrc, :hoverlabel, :hoveron, :hovertemplate, :hovertemplatesrc, :hovertext, :hovertextsrc, :ids, :idssrc, :legendgroup, :line, :marker, :meta, :metasrc, :mode, :name, :opacity, :selected, :selectedpoints, :showlegend, :stream, :text, :textfont, :textposition, :textpositionsrc, :textsrc, :texttemplate, :texttemplatesrc, :transforms, :type, :uid, :uirevision, :unselected, :visible, :xaxis, :yaxis)


#-----------------------------------------------------------------------------# scattergeo
export scattergeo
function scattergeo(; kw...)
    for k in keys(kw)
        k in (:connectgaps, :customdata, :customdatasrc, :featureidkey, :fill, :fillcolor, :geo, :geojson, :hoverinfo, :hoverinfosrc, :hoverlabel, :hovertemplate, :hovertemplatesrc, :hovertext, :hovertextsrc, :ids, :idssrc, :lat, :latsrc, :legendgroup, :line, :locationmode, :locations, :locationssrc, :lon, :lonsrc, :marker, :meta, :metasrc, :mode, :name, :opacity, :selected, :selectedpoints, :showlegend, :stream, :text, :textfont, :textposition, :textpositionsrc, :textsrc, :texttemplate, :texttemplatesrc, :transforms, :type, :uid, :uirevision, :unselected, :visible) || @warn "Function `scattergeo` does not have attribute `$k`"
    end
    Plot(; type=:scattergeo, kw...)
end
Base.propertynames(::typeof(scattergeo)) = (:connectgaps, :customdata, :customdatasrc, :featureidkey, :fill, :fillcolor, :geo, :geojson, :hoverinfo, :hoverinfosrc, :hoverlabel, :hovertemplate, :hovertemplatesrc, :hovertext, :hovertextsrc, :ids, :idssrc, :lat, :latsrc, :legendgroup, :line, :locationmode, :locations, :locationssrc, :lon, :lonsrc, :marker, :meta, :metasrc, :mode, :name, :opacity, :selected, :selectedpoints, :showlegend, :stream, :text, :textfont, :textposition, :textpositionsrc, :textsrc, :texttemplate, :texttemplatesrc, :transforms, :type, :uid, :uirevision, :unselected, :visible)


#-----------------------------------------------------------------------------# scattergl
export scattergl
function scattergl(; kw...)
    for k in keys(kw)
        k in (:connectgaps, :customdata, :customdatasrc, :dx, :dy, :error_x, :error_y, :fill, :fillcolor, :hoverinfo, :hoverinfosrc, :hoverlabel, :hovertemplate, :hovertemplatesrc, :hovertext, :hovertextsrc, :ids, :idssrc, :legendgroup, :line, :marker, :meta, :metasrc, :mode, :name, :opacity, :selected, :selectedpoints, :showlegend, :stream, :text, :textfont, :textposition, :textpositionsrc, :textsrc, :texttemplate, :texttemplatesrc, :transforms, :type, :uid, :uirevision, :unselected, :visible, :x, :x0, :xaxis, :xcalendar, :xperiod, :xperiod0, :xperiodalignment, :xsrc, :y, :y0, :yaxis, :ycalendar, :yperiod, :yperiod0, :yperiodalignment, :ysrc) || @warn "Function `scattergl` does not have attribute `$k`"
    end
    Plot(; type=:scattergl, kw...)
end
Base.propertynames(::typeof(scattergl)) = (:connectgaps, :customdata, :customdatasrc, :dx, :dy, :error_x, :error_y, :fill, :fillcolor, :hoverinfo, :hoverinfosrc, :hoverlabel, :hovertemplate, :hovertemplatesrc, :hovertext, :hovertextsrc, :ids, :idssrc, :legendgroup, :line, :marker, :meta, :metasrc, :mode, :name, :opacity, :selected, :selectedpoints, :showlegend, :stream, :text, :textfont, :textposition, :textpositionsrc, :textsrc, :texttemplate, :texttemplatesrc, :transforms, :type, :uid, :uirevision, :unselected, :visible, :x, :x0, :xaxis, :xcalendar, :xperiod, :xperiod0, :xperiodalignment, :xsrc, :y, :y0, :yaxis, :ycalendar, :yperiod, :yperiod0, :yperiodalignment, :ysrc)


#-----------------------------------------------------------------------------# scattermapbox
export scattermapbox
function scattermapbox(; kw...)
    for k in keys(kw)
        k in (:below, :connectgaps, :customdata, :customdatasrc, :fill, :fillcolor, :hoverinfo, :hoverinfosrc, :hoverlabel, :hovertemplate, :hovertemplatesrc, :hovertext, :hovertextsrc, :ids, :idssrc, :lat, :latsrc, :legendgroup, :line, :lon, :lonsrc, :marker, :meta, :metasrc, :mode, :name, :opacity, :selected, :selectedpoints, :showlegend, :stream, :subplot, :text, :textfont, :textposition, :textsrc, :texttemplate, :texttemplatesrc, :transforms, :type, :uid, :uirevision, :unselected, :visible) || @warn "Function `scattermapbox` does not have attribute `$k`"
    end
    Plot(; type=:scattermapbox, kw...)
end
Base.propertynames(::typeof(scattermapbox)) = (:below, :connectgaps, :customdata, :customdatasrc, :fill, :fillcolor, :hoverinfo, :hoverinfosrc, :hoverlabel, :hovertemplate, :hovertemplatesrc, :hovertext, :hovertextsrc, :ids, :idssrc, :lat, :latsrc, :legendgroup, :line, :lon, :lonsrc, :marker, :meta, :metasrc, :mode, :name, :opacity, :selected, :selectedpoints, :showlegend, :stream, :subplot, :text, :textfont, :textposition, :textsrc, :texttemplate, :texttemplatesrc, :transforms, :type, :uid, :uirevision, :unselected, :visible)


#-----------------------------------------------------------------------------# scatterpolar
export scatterpolar
function scatterpolar(; kw...)
    for k in keys(kw)
        k in (:cliponaxis, :connectgaps, :customdata, :customdatasrc, :dr, :dtheta, :fill, :fillcolor, :hoverinfo, :hoverinfosrc, :hoverlabel, :hoveron, :hovertemplate, :hovertemplatesrc, :hovertext, :hovertextsrc, :ids, :idssrc, :legendgroup, :line, :marker, :meta, :metasrc, :mode, :name, :opacity, :r, :r0, :rsrc, :selected, :selectedpoints, :showlegend, :stream, :subplot, :text, :textfont, :textposition, :textpositionsrc, :textsrc, :texttemplate, :texttemplatesrc, :theta, :theta0, :thetasrc, :thetaunit, :transforms, :type, :uid, :uirevision, :unselected, :visible) || @warn "Function `scatterpolar` does not have attribute `$k`"
    end
    Plot(; type=:scatterpolar, kw...)
end
Base.propertynames(::typeof(scatterpolar)) = (:cliponaxis, :connectgaps, :customdata, :customdatasrc, :dr, :dtheta, :fill, :fillcolor, :hoverinfo, :hoverinfosrc, :hoverlabel, :hoveron, :hovertemplate, :hovertemplatesrc, :hovertext, :hovertextsrc, :ids, :idssrc, :legendgroup, :line, :marker, :meta, :metasrc, :mode, :name, :opacity, :r, :r0, :rsrc, :selected, :selectedpoints, :showlegend, :stream, :subplot, :text, :textfont, :textposition, :textpositionsrc, :textsrc, :texttemplate, :texttemplatesrc, :theta, :theta0, :thetasrc, :thetaunit, :transforms, :type, :uid, :uirevision, :unselected, :visible)


#-----------------------------------------------------------------------------# scatterpolargl
export scatterpolargl
function scatterpolargl(; kw...)
    for k in keys(kw)
        k in (:connectgaps, :customdata, :customdatasrc, :dr, :dtheta, :fill, :fillcolor, :hoverinfo, :hoverinfosrc, :hoverlabel, :hovertemplate, :hovertemplatesrc, :hovertext, :hovertextsrc, :ids, :idssrc, :legendgroup, :line, :marker, :meta, :metasrc, :mode, :name, :opacity, :r, :r0, :rsrc, :selected, :selectedpoints, :showlegend, :stream, :subplot, :text, :textfont, :textposition, :textpositionsrc, :textsrc, :texttemplate, :texttemplatesrc, :theta, :theta0, :thetasrc, :thetaunit, :transforms, :type, :uid, :uirevision, :unselected, :visible) || @warn "Function `scatterpolargl` does not have attribute `$k`"
    end
    Plot(; type=:scatterpolargl, kw...)
end
Base.propertynames(::typeof(scatterpolargl)) = (:connectgaps, :customdata, :customdatasrc, :dr, :dtheta, :fill, :fillcolor, :hoverinfo, :hoverinfosrc, :hoverlabel, :hovertemplate, :hovertemplatesrc, :hovertext, :hovertextsrc, :ids, :idssrc, :legendgroup, :line, :marker, :meta, :metasrc, :mode, :name, :opacity, :r, :r0, :rsrc, :selected, :selectedpoints, :showlegend, :stream, :subplot, :text, :textfont, :textposition, :textpositionsrc, :textsrc, :texttemplate, :texttemplatesrc, :theta, :theta0, :thetasrc, :thetaunit, :transforms, :type, :uid, :uirevision, :unselected, :visible)


#-----------------------------------------------------------------------------# scatterternary
export scatterternary
function scatterternary(; kw...)
    for k in keys(kw)
        k in (:a, :asrc, :b, :bsrc, :c, :cliponaxis, :connectgaps, :csrc, :customdata, :customdatasrc, :fill, :fillcolor, :hoverinfo, :hoverinfosrc, :hoverlabel, :hoveron, :hovertemplate, :hovertemplatesrc, :hovertext, :hovertextsrc, :ids, :idssrc, :legendgroup, :line, :marker, :meta, :metasrc, :mode, :name, :opacity, :selected, :selectedpoints, :showlegend, :stream, :subplot, :sum, :text, :textfont, :textposition, :textpositionsrc, :textsrc, :texttemplate, :texttemplatesrc, :transforms, :type, :uid, :uirevision, :unselected, :visible) || @warn "Function `scatterternary` does not have attribute `$k`"
    end
    Plot(; type=:scatterternary, kw...)
end
Base.propertynames(::typeof(scatterternary)) = (:a, :asrc, :b, :bsrc, :c, :cliponaxis, :connectgaps, :csrc, :customdata, :customdatasrc, :fill, :fillcolor, :hoverinfo, :hoverinfosrc, :hoverlabel, :hoveron, :hovertemplate, :hovertemplatesrc, :hovertext, :hovertextsrc, :ids, :idssrc, :legendgroup, :line, :marker, :meta, :metasrc, :mode, :name, :opacity, :selected, :selectedpoints, :showlegend, :stream, :subplot, :sum, :text, :textfont, :textposition, :textpositionsrc, :textsrc, :texttemplate, :texttemplatesrc, :transforms, :type, :uid, :uirevision, :unselected, :visible)


#-----------------------------------------------------------------------------# splom
export splom
function splom(; kw...)
    for k in keys(kw)
        k in (:customdata, :customdatasrc, :diagonal, :dimensions, :hoverinfo, :hoverinfosrc, :hoverlabel, :hovertemplate, :hovertemplatesrc, :hovertext, :hovertextsrc, :ids, :idssrc, :legendgroup, :marker, :meta, :metasrc, :name, :opacity, :selected, :selectedpoints, :showlegend, :showlowerhalf, :showupperhalf, :stream, :text, :textsrc, :transforms, :type, :uid, :uirevision, :unselected, :visible, :xaxes, :yaxes) || @warn "Function `splom` does not have attribute `$k`"
    end
    Plot(; type=:splom, kw...)
end
Base.propertynames(::typeof(splom)) = (:customdata, :customdatasrc, :diagonal, :dimensions, :hoverinfo, :hoverinfosrc, :hoverlabel, :hovertemplate, :hovertemplatesrc, :hovertext, :hovertextsrc, :ids, :idssrc, :legendgroup, :marker, :meta, :metasrc, :name, :opacity, :selected, :selectedpoints, :showlegend, :showlowerhalf, :showupperhalf, :stream, :text, :textsrc, :transforms, :type, :uid, :uirevision, :unselected, :visible, :xaxes, :yaxes)


#-----------------------------------------------------------------------------# streamtube
export streamtube
function streamtube(; kw...)
    for k in keys(kw)
        k in (:autocolorscale, :cauto, :cmax, :cmid, :cmin, :coloraxis, :colorbar, :colorscale, :customdata, :customdatasrc, :hoverinfo, :hoverinfosrc, :hoverlabel, :hovertemplate, :hovertemplatesrc, :hovertext, :ids, :idssrc, :legendgroup, :lighting, :lightposition, :maxdisplayed, :meta, :metasrc, :name, :opacity, :reversescale, :scene, :showlegend, :showscale, :sizeref, :starts, :stream, :text, :type, :u, :uid, :uirevision, :usrc, :v, :visible, :vsrc, :w, :wsrc, :x, :xsrc, :y, :ysrc, :z, :zsrc) || @warn "Function `streamtube` does not have attribute `$k`"
    end
    Plot(; type=:streamtube, kw...)
end
Base.propertynames(::typeof(streamtube)) = (:autocolorscale, :cauto, :cmax, :cmid, :cmin, :coloraxis, :colorbar, :colorscale, :customdata, :customdatasrc, :hoverinfo, :hoverinfosrc, :hoverlabel, :hovertemplate, :hovertemplatesrc, :hovertext, :ids, :idssrc, :legendgroup, :lighting, :lightposition, :maxdisplayed, :meta, :metasrc, :name, :opacity, :reversescale, :scene, :showlegend, :showscale, :sizeref, :starts, :stream, :text, :type, :u, :uid, :uirevision, :usrc, :v, :visible, :vsrc, :w, :wsrc, :x, :xsrc, :y, :ysrc, :z, :zsrc)


#-----------------------------------------------------------------------------# sunburst
export sunburst
function sunburst(; kw...)
    for k in keys(kw)
        k in (:branchvalues, :count, :customdata, :customdatasrc, :domain, :hoverinfo, :hoverinfosrc, :hoverlabel, :hovertemplate, :hovertemplatesrc, :hovertext, :hovertextsrc, :ids, :idssrc, :insidetextfont, :insidetextorientation, :labels, :labelssrc, :leaf, :level, :marker, :maxdepth, :meta, :metasrc, :name, :opacity, :outsidetextfont, :parents, :parentssrc, :root, :rotation, :sort, :stream, :text, :textfont, :textinfo, :textsrc, :texttemplate, :texttemplatesrc, :transforms, :type, :uid, :uirevision, :values, :valuessrc, :visible) || @warn "Function `sunburst` does not have attribute `$k`"
    end
    Plot(; type=:sunburst, kw...)
end
Base.propertynames(::typeof(sunburst)) = (:branchvalues, :count, :customdata, :customdatasrc, :domain, :hoverinfo, :hoverinfosrc, :hoverlabel, :hovertemplate, :hovertemplatesrc, :hovertext, :hovertextsrc, :ids, :idssrc, :insidetextfont, :insidetextorientation, :labels, :labelssrc, :leaf, :level, :marker, :maxdepth, :meta, :metasrc, :name, :opacity, :outsidetextfont, :parents, :parentssrc, :root, :rotation, :sort, :stream, :text, :textfont, :textinfo, :textsrc, :texttemplate, :texttemplatesrc, :transforms, :type, :uid, :uirevision, :values, :valuessrc, :visible)


#-----------------------------------------------------------------------------# surface
export surface
function surface(; kw...)
    for k in keys(kw)
        k in (:_deprecated, :autocolorscale, :cauto, :cmax, :cmid, :cmin, :coloraxis, :colorbar, :colorscale, :connectgaps, :contours, :customdata, :customdatasrc, :hidesurface, :hoverinfo, :hoverinfosrc, :hoverlabel, :hovertemplate, :hovertemplatesrc, :hovertext, :hovertextsrc, :ids, :idssrc, :legendgroup, :lighting, :lightposition, :meta, :metasrc, :name, :opacity, :opacityscale, :reversescale, :scene, :showlegend, :showscale, :stream, :surfacecolor, :surfacecolorsrc, :text, :textsrc, :type, :uid, :uirevision, :visible, :x, :xcalendar, :xsrc, :y, :ycalendar, :ysrc, :z, :zcalendar, :zsrc) || @warn "Function `surface` does not have attribute `$k`"
    end
    Plot(; type=:surface, kw...)
end
Base.propertynames(::typeof(surface)) = (:_deprecated, :autocolorscale, :cauto, :cmax, :cmid, :cmin, :coloraxis, :colorbar, :colorscale, :connectgaps, :contours, :customdata, :customdatasrc, :hidesurface, :hoverinfo, :hoverinfosrc, :hoverlabel, :hovertemplate, :hovertemplatesrc, :hovertext, :hovertextsrc, :ids, :idssrc, :legendgroup, :lighting, :lightposition, :meta, :metasrc, :name, :opacity, :opacityscale, :reversescale, :scene, :showlegend, :showscale, :stream, :surfacecolor, :surfacecolorsrc, :text, :textsrc, :type, :uid, :uirevision, :visible, :x, :xcalendar, :xsrc, :y, :ycalendar, :ysrc, :z, :zcalendar, :zsrc)


#-----------------------------------------------------------------------------# table
export table
function table(; kw...)
    for k in keys(kw)
        k in (:cells, :columnorder, :columnordersrc, :columnwidth, :columnwidthsrc, :customdata, :customdatasrc, :domain, :editType, :header, :hoverinfo, :hoverinfosrc, :hoverlabel, :ids, :idssrc, :meta, :metasrc, :name, :stream, :type, :uid, :uirevision, :visible) || @warn "Function `table` does not have attribute `$k`"
    end
    Plot(; type=:table, kw...)
end
Base.propertynames(::typeof(table)) = (:cells, :columnorder, :columnordersrc, :columnwidth, :columnwidthsrc, :customdata, :customdatasrc, :domain, :editType, :header, :hoverinfo, :hoverinfosrc, :hoverlabel, :ids, :idssrc, :meta, :metasrc, :name, :stream, :type, :uid, :uirevision, :visible)


#-----------------------------------------------------------------------------# treemap
export treemap
function treemap(; kw...)
    for k in keys(kw)
        k in (:branchvalues, :count, :customdata, :customdatasrc, :domain, :hoverinfo, :hoverinfosrc, :hoverlabel, :hovertemplate, :hovertemplatesrc, :hovertext, :hovertextsrc, :ids, :idssrc, :insidetextfont, :labels, :labelssrc, :level, :marker, :maxdepth, :meta, :metasrc, :name, :opacity, :outsidetextfont, :parents, :parentssrc, :pathbar, :root, :sort, :stream, :text, :textfont, :textinfo, :textposition, :textsrc, :texttemplate, :texttemplatesrc, :tiling, :transforms, :type, :uid, :uirevision, :values, :valuessrc, :visible) || @warn "Function `treemap` does not have attribute `$k`"
    end
    Plot(; type=:treemap, kw...)
end
Base.propertynames(::typeof(treemap)) = (:branchvalues, :count, :customdata, :customdatasrc, :domain, :hoverinfo, :hoverinfosrc, :hoverlabel, :hovertemplate, :hovertemplatesrc, :hovertext, :hovertextsrc, :ids, :idssrc, :insidetextfont, :labels, :labelssrc, :level, :marker, :maxdepth, :meta, :metasrc, :name, :opacity, :outsidetextfont, :parents, :parentssrc, :pathbar, :root, :sort, :stream, :text, :textfont, :textinfo, :textposition, :textsrc, :texttemplate, :texttemplatesrc, :tiling, :transforms, :type, :uid, :uirevision, :values, :valuessrc, :visible)


#-----------------------------------------------------------------------------# violin
export violin
function violin(; kw...)
    for k in keys(kw)
        k in (:alignmentgroup, :bandwidth, :box, :customdata, :customdatasrc, :fillcolor, :hoverinfo, :hoverinfosrc, :hoverlabel, :hoveron, :hovertemplate, :hovertemplatesrc, :hovertext, :hovertextsrc, :ids, :idssrc, :jitter, :legendgroup, :line, :marker, :meanline, :meta, :metasrc, :name, :offsetgroup, :opacity, :orientation, :pointpos, :points, :scalegroup, :scalemode, :selected, :selectedpoints, :showlegend, :side, :span, :spanmode, :stream, :text, :textsrc, :transforms, :type, :uid, :uirevision, :unselected, :visible, :width, :x, :x0, :xaxis, :xsrc, :y, :y0, :yaxis, :ysrc) || @warn "Function `violin` does not have attribute `$k`"
    end
    Plot(; type=:violin, kw...)
end
Base.propertynames(::typeof(violin)) = (:alignmentgroup, :bandwidth, :box, :customdata, :customdatasrc, :fillcolor, :hoverinfo, :hoverinfosrc, :hoverlabel, :hoveron, :hovertemplate, :hovertemplatesrc, :hovertext, :hovertextsrc, :ids, :idssrc, :jitter, :legendgroup, :line, :marker, :meanline, :meta, :metasrc, :name, :offsetgroup, :opacity, :orientation, :pointpos, :points, :scalegroup, :scalemode, :selected, :selectedpoints, :showlegend, :side, :span, :spanmode, :stream, :text, :textsrc, :transforms, :type, :uid, :uirevision, :unselected, :visible, :width, :x, :x0, :xaxis, :xsrc, :y, :y0, :yaxis, :ysrc)


#-----------------------------------------------------------------------------# volume
export volume
function volume(; kw...)
    for k in keys(kw)
        k in (:autocolorscale, :caps, :cauto, :cmax, :cmid, :cmin, :coloraxis, :colorbar, :colorscale, :contour, :customdata, :customdatasrc, :flatshading, :hoverinfo, :hoverinfosrc, :hoverlabel, :hovertemplate, :hovertemplatesrc, :hovertext, :hovertextsrc, :ids, :idssrc, :isomax, :isomin, :legendgroup, :lighting, :lightposition, :meta, :metasrc, :name, :opacity, :opacityscale, :reversescale, :scene, :showlegend, :showscale, :slices, :spaceframe, :stream, :surface, :text, :textsrc, :type, :uid, :uirevision, :value, :valuesrc, :visible, :x, :xsrc, :y, :ysrc, :z, :zsrc) || @warn "Function `volume` does not have attribute `$k`"
    end
    Plot(; type=:volume, kw...)
end
Base.propertynames(::typeof(volume)) = (:autocolorscale, :caps, :cauto, :cmax, :cmid, :cmin, :coloraxis, :colorbar, :colorscale, :contour, :customdata, :customdatasrc, :flatshading, :hoverinfo, :hoverinfosrc, :hoverlabel, :hovertemplate, :hovertemplatesrc, :hovertext, :hovertextsrc, :ids, :idssrc, :isomax, :isomin, :legendgroup, :lighting, :lightposition, :meta, :metasrc, :name, :opacity, :opacityscale, :reversescale, :scene, :showlegend, :showscale, :slices, :spaceframe, :stream, :surface, :text, :textsrc, :type, :uid, :uirevision, :value, :valuesrc, :visible, :x, :xsrc, :y, :ysrc, :z, :zsrc)


#-----------------------------------------------------------------------------# waterfall
export waterfall
function waterfall(; kw...)
    for k in keys(kw)
        k in (:alignmentgroup, :base, :cliponaxis, :connector, :constraintext, :customdata, :customdatasrc, :decreasing, :dx, :dy, :hoverinfo, :hoverinfosrc, :hoverlabel, :hovertemplate, :hovertemplatesrc, :hovertext, :hovertextsrc, :ids, :idssrc, :increasing, :insidetextanchor, :insidetextfont, :legendgroup, :measure, :measuresrc, :meta, :metasrc, :name, :offset, :offsetgroup, :offsetsrc, :opacity, :orientation, :outsidetextfont, :selectedpoints, :showlegend, :stream, :text, :textangle, :textfont, :textinfo, :textposition, :textpositionsrc, :textsrc, :texttemplate, :texttemplatesrc, :totals, :transforms, :type, :uid, :uirevision, :visible, :width, :widthsrc, :x, :x0, :xaxis, :xperiod, :xperiod0, :xperiodalignment, :xsrc, :y, :y0, :yaxis, :yperiod, :yperiod0, :yperiodalignment, :ysrc) || @warn "Function `waterfall` does not have attribute `$k`"
    end
    Plot(; type=:waterfall, kw...)
end
Base.propertynames(::typeof(waterfall)) = (:alignmentgroup, :base, :cliponaxis, :connector, :constraintext, :customdata, :customdatasrc, :decreasing, :dx, :dy, :hoverinfo, :hoverinfosrc, :hoverlabel, :hovertemplate, :hovertemplatesrc, :hovertext, :hovertextsrc, :ids, :idssrc, :increasing, :insidetextanchor, :insidetextfont, :legendgroup, :measure, :measuresrc, :meta, :metasrc, :name, :offset, :offsetgroup, :offsetsrc, :opacity, :orientation, :outsidetextfont, :selectedpoints, :showlegend, :stream, :text, :textangle, :textfont, :textinfo, :textposition, :textpositionsrc, :textsrc, :texttemplate, :texttemplatesrc, :totals, :transforms, :type, :uid, :uirevision, :visible, :width, :widthsrc, :x, :x0, :xaxis, :xperiod, :xperiod0, :xperiodalignment, :xsrc, :y, :y0, :yaxis, :yperiod, :yperiod0, :yperiodalignment, :ysrc)


end  # module Traces
